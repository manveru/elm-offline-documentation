[{"name":"EditDistance","comment":"  The EditDistance module allows for calculating the Levenshtein distance\nbetween two lists, or the actual edit steps required to go from one to the\nother.\n\n# Edit Distance\n@docs EditStep, edits, levenshtein\n\n# Convenience Functions\n@docs editsFromStrings, levenshteinFromStrings\n\n","aliases":[],"types":[{"name":"EditStep","comment":" Describes an edit step used to go from one list to another.\n","args":["a"],"cases":[["Insert",["a","Int"]],["Delete",["a","Int"]],["Substitute",["a","Int"]],["Move",["a","Int","Int"]]]}],"values":[{"name":"edits","comment":" Calculate the minimum steps (insertions, deletions, moves and substitutions)\nrequired to turn one given list into another.\n\n    edits (String.toList \"kitten\") (String.toList \"sitting\") ==\n      [ Substitute 's' 0\n      , Substitute 'i' 4\n      , Insert 'g' 6\n      ]\n\n    edits (String.toList \"garvey\") (String.toList \"avery\") ==\n      [ Delete 'g' 0\n      , Move 'r' 2 3\n      ]\n\nThe resulting indices reflect edits where _deletions are made first_, before\ninsertions and substitutions. That is, indices for deletions refer to the source\nlist, whereas indices for insertions and substitutions refer to the latter,\nintermediate lists.\n","type":"List comparable -> List comparable -> List (EditDistance.EditStep comparable)"},{"name":"editsFromStrings","comment":" Same as the `edits` function, but for String values.\n\n    editsFromStrings \"kitten\" \"sitting\" ==\n      [ Substitute 's' 0\n      , Substitute 'i' 4\n      , Insert 'g' 6\n      ]\n\n    editsFromStrings \"garvey\" \"avery\" ==\n      [ Delete 'g' 0\n      , Move 'r' 2 3\n      ]\n","type":"String -> String -> List (EditDistance.EditStep Char)"},{"name":"levenshtein","comment":" Calculate the Levenshtein distance between two lists, i.e. how many\ninsertions, deletions or substitutions are required to turn one given list\ninto another.\n\n    levenshtein (String.toList \"kitten\") (String.toList \"sitting\")\n      == 3\n\n    levenshtein (String.toList \"preterit\") (String.toList \"zeitgeist\")\n      == 6\n\n    levenshtein (String.toList \"garvey\") (String.toList \"avery\")\n      == 3\n","type":"List comparable -> List comparable -> Int"},{"name":"levenshteinFromStrings","comment":" Same as the `levenshtein` function, but for String values.\n\n    levenshtein \"kitten\" \"sitting\" == 3\n\n    levenshtein \"preterit\" \"zeitgeist\" == 6\n\n    levenshtein \"garvey\" \"avery\" == 3\n","type":"String -> String -> Int"}],"generated-with-elm-version":"0.17.1"}]