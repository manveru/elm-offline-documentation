[{"name":"FunFolding","comment":" This library contains high-order functions for folding a list of functions together. foldlFun uses a accumulator function which is used to compose all the functions provided with the function list.\n\nas an example, imagine you want to filter a list of integers [-100..100] using the following predicates\n  (\\x->x/=0)\n  (\\x->x>(-20))\n  (\\x->x<20)\n  (\\x->(rem x 10) == 0)\nThe expected result is : [-10,10]\n\nWe foldl all the predicates using the (&&) operator, we results in a single predicate function.\n\nThe folding function is defined by \nandN : List (a->Bool) -> a -> Bool\nandN =\n  foldlFun (&&) False\n\ntest \"Compare with 4 predicates\" <|\n        \\() ->\n         let           \n           fun = FC.andN [ (\\x->x/=0)\n                         , (\\x->x>(-20))\n                         , (\\x->x<20)\n                         , (\\x->(rem x 10) == 0) ]\n           result = List.filter fun [-100..100]\n           expected = [-10,10]\n         in\n           (Expect.equal result expected)\n\n@docs (<<*), foldlFun, foldlFun2, compareN, andN ,orN \n\n","aliases":[],"types":[],"values":[{"name":"<<*","comment":" (<<*) composes functions f(a,b) and g(a) to obtain f(x,g(x)).\n","type":"(a -> b -> c) -> (a -> b) -> a -> c"},{"name":"andN","comment":" folds a list of predicates using the && operator. andN and orN can be combined together.\n\n           fun = FC.andN [ (\\x->x/=0)\n                         , (\\x->x>(-20))\n                         , (\\x->x<20)\n                         , (\\x->(rem x 10) == 0) ]\n           result = List.filter fun [-100..100]\n           expected = [-10,10]\n","type":"List (a -> Bool) -> a -> Bool"},{"name":"compareN","comment":" compareN folds a list of compare function in such a way that left that left most compares have a bigger weight that the right most compares.\n\n             type alias Person = { name: String\n                                 , age : Int\n                                 , adr : String\n\n             louis id age adr = Person\n                               (\"Louis\"++(toString id))\n                               age\n                               ((toString adr))}\n\n              fun = FC.compareN [ (\\x y -> compare x.name y.name)\n                                , (\\x y -> compare x.age y.age)\n                                , (\\x y -> compare x.adr y.adr)\n                                ]\n                                      \n              sortedList = List.sortWith fun [ louis 2 1 1                                               \n                                             , louis 1 2 2\n                                             , louis 1 1 1\n                                             , louis 1 2 3                                                \n                                             , louis 2 1 2\n                                             , louis 1 2 2\n                                             ]\n              expected = [ louis 1 1 1\n                         , louis 1 2 2\n                         , louis 1 2 2\n                         , louis 1 2 3\n                         , louis 2 1 1\n                         , louis 2 1 2\n                         ]\n\n","type":"List (a -> a -> Basics.Order) -> a -> a -> Basics.Order"},{"name":"foldlFun","comment":" foldlFun folds a list of functions using composition function.\nThe composition function can be ssen as the accumulator function.\nAs an Example , the andN function is defined by :\n \n   andN : List (a->Bool) -> a -> Bool\n   andN = foldlFun (&&) False\n\n","type":"(a -> a -> a) -> a -> List (b -> a) -> b -> a"},{"name":"foldlFun2","comment":" foldlFun2 folds a list of two parameters functions using a composition function.\nThe composition function can be ssen as the accumulator function.\n As an Example , the compareN function is defined by :\n\ncompareN : List (a->a->Order)->a->a->Order\ncompareN = foldlFun2 andOrder EQ\n","type":"(a -> a -> a) -> a -> List (b -> b -> a) -> b -> b -> a"},{"name":"orN","comment":" folds a list of predicates using the || operator. andN and orN can be combined together.\n\n           fun = FC.orN [(\\x->x==0), (\\x->x<(-99)), (\\x->x>99) ]\n           result = List.filter fun [-100..100]\n           expected = [-100,0,100]\n","type":"List (a -> Bool) -> a -> Bool"}],"generated-with-elm-version":"0.17.1"}]