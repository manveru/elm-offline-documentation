[{"name":"Basics.Extra","comment":" Additional basic functions.\n\n@docs never, (=>)\n","aliases":[],"types":[],"values":[{"name":"=>","comment":" A shorthand for writing 2-tuples.  Very commonly used when expressing key/value pairs\nin CSS or Json encoders.\n","type":"a -> b -> ( a, b )"},{"name":"never","comment":" The empty function.\nThis converts a value of type\n[`Never`](http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#Never)\ninto a value of any type, which is safe because there are no values of\ntype `Never`. Useful in certain situations as argument to\n[`Task.perform`](http://package.elm-lang.org/packages/elm-lang/core/latest/Task#perform)\nand\n[`Html.App.map`](http://package.elm-lang.org/packages/elm-lang/html/latest/Html-App#map).\n\n*Note:* To use this function, its argument need not be literally of type `Never`.\nIt suffices if it is a fully polymorphic value. For example, this works:\n`Process.sleep >> Task.perform never (\\() -> ...)`, because the output of\n[`Process.sleep`](http://package.elm-lang.org/packages/elm-lang/core/latest/Process#sleep)\nis fully polymorphic in the `x` of `Task x ()`. \n","type":"Basics.Never -> a"}],"generated-with-elm-version":"0.17.0"}]