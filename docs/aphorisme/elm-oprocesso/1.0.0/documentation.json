[{"name":"Oprocesso","comment":"\n  # Framework\n  @docs actionbox, hook, ioport\n\n  # Lifts\n  @docs pure, async, asyncOn, task\n\n  # Combinators\n  @docs thenDo, next, onfail","aliases":[],"types":[{"name":"RepType","comment":"","args":["error","model"],"cases":[["Sync",[{"tag":"app","func":{"tag":"type","name":"Action"},"args":[{"tag":"var","name":"error"},{"tag":"var","name":"model"}]}]],["Async",[{"tag":"app","func":{"tag":"type","name":"Task.Task"},"args":[{"tag":"var","name":"error"},{"tag":"app","func":{"tag":"type","name":"Action"},"args":[{"tag":"var","name":"error"},{"tag":"var","name":"model"}]}]}]]]}],"values":[{"name":"actionbox","comment":"'actionbox' is where one sends actions to, when using the provided framework.","type":{"tag":"app","func":{"tag":"type","name":"Signal.Mailbox"},"args":[{"tag":"app","func":{"tag":"type","name":"Action"},"args":[{"tag":"var","name":"error"},{"tag":"var","name":"model"}]}]}},{"name":"async","comment":"An asynchronous modification of the model is any task which gets invoked based on the current model and returns with a modification. One can use 'async' to lift such functions.","type":{"tag":"lambda","in":{"tag":"lambda","in":{"tag":"var","name":"model"},"out":{"tag":"app","func":{"tag":"type","name":"Task.Task"},"args":[{"tag":"var","name":"error"},{"tag":"lambda","in":{"tag":"var","name":"model"},"out":{"tag":"var","name":"model"}}]}},"out":{"tag":"app","func":{"tag":"type","name":"Action"},"args":[{"tag":"var","name":"error"},{"tag":"var","name":"model"}]}}},{"name":"asyncOn","comment":"Often the invocation of tasks depends on a certain value out of the model which can be reached by a getter. 'asyncOn' is meant to be used in such a situation:\n\n  requestJson `asyncOn` .typed","type":{"tag":"lambda","in":{"tag":"lambda","in":{"tag":"var","name":"a"},"out":{"tag":"app","func":{"tag":"type","name":"Task.Task"},"args":[{"tag":"var","name":"error"},{"tag":"lambda","in":{"tag":"var","name":"model"},"out":{"tag":"var","name":"model"}}]}},"out":{"tag":"lambda","in":{"tag":"lambda","in":{"tag":"var","name":"model"},"out":{"tag":"var","name":"a"}},"out":{"tag":"app","func":{"tag":"type","name":"Action"},"args":[{"tag":"var","name":"error"},{"tag":"var","name":"model"}]}}}},{"name":"hook","comment":"'hook' sets up the main model signal.\n\n  import Oprocesso  as O\n  main = Signal.map view (O.hook initmodel)","type":{"tag":"lambda","in":{"tag":"var","name":"model"},"out":{"tag":"app","func":{"tag":"type","name":"Signal.Signal"},"args":[{"tag":"var","name":"model"}]}}},{"name":"invoke","comment":"'invoke' is the direct way to invoke an action.","type":{"tag":"lambda","in":{"tag":"app","func":{"tag":"type","name":"Action"},"args":[{"tag":"var","name":"error"},{"tag":"var","name":"model"}]},"out":{"tag":"app","func":{"tag":"type","name":"Task.Task"},"args":[{"tag":"var","name":"x"},{"tag":"app","func":{"tag":"type","name":"_Tuple0"},"args":[]}]}}},{"name":"ioport","comment":"'ioport' sets up a port which runs the asynchronous tasks and calls the actions by feeding them back into the 'actionbox'.\n\n  import Oprocesso as O\n\n  port asyncrunner : Signal (Task x ())\n  port asyncrunner = O.ioport initmodel","type":{"tag":"lambda","in":{"tag":"var","name":"model"},"out":{"tag":"app","func":{"tag":"type","name":"Signal"},"args":[{"tag":"app","func":{"tag":"type","name":"Task.Task"},"args":[{"tag":"var","name":"x"},{"tag":"app","func":{"tag":"type","name":"_Tuple0"},"args":[]}]}]}}},{"name":"mmstack","comment":"The 'mmstack' is a signal consisting of the latest model and the next action, if there is any. It *forks* the actionbox by past folding pure operations and keeping track of the latest next action.","type":{"tag":"lambda","in":{"tag":"var","name":"model"},"out":{"tag":"app","func":{"tag":"type","name":"Signal.Signal"},"args":[{"tag":"app","func":{"tag":"type","name":"_Tuple2"},"args":[{"tag":"var","name":"model"},{"tag":"app","func":{"tag":"type","name":"Maybe"},"args":[{"tag":"app","func":{"tag":"type","name":"RepType"},"args":[{"tag":"var","name":"error"},{"tag":"var","name":"model"}]}]}]}]}}},{"name":"next","comment":"'next' is the asynchronous combinator. It combines two actions such that both get invoked asynchronously.","type":{"tag":"lambda","in":{"tag":"app","func":{"tag":"type","name":"Action"},"args":[{"tag":"var","name":"error"},{"tag":"var","name":"model"}]},"out":{"tag":"lambda","in":{"tag":"app","func":{"tag":"type","name":"Action"},"args":[{"tag":"var","name":"error"},{"tag":"var","name":"model"}]},"out":{"tag":"app","func":{"tag":"type","name":"Action"},"args":[{"tag":"var","name":"error"},{"tag":"var","name":"model"}]}}}},{"name":"onfail","comment":"'onfail' is the error handling combinator. Its second argument is an error handler; on none asynchronous actions, nothing changes.\n\n\n   (requestJson `asyncOn` .typed)\n        `onfail` \\err -> pure <| addEntry <| \"Error happened: \" ++ err","type":{"tag":"lambda","in":{"tag":"app","func":{"tag":"type","name":"Action"},"args":[{"tag":"var","name":"error"},{"tag":"var","name":"model"}]},"out":{"tag":"lambda","in":{"tag":"lambda","in":{"tag":"var","name":"error"},"out":{"tag":"app","func":{"tag":"type","name":"Action"},"args":[{"tag":"var","name":"x"},{"tag":"var","name":"model"}]}},"out":{"tag":"app","func":{"tag":"type","name":"Action"},"args":[{"tag":"var","name":"x"},{"tag":"var","name":"model"}]}}}},{"name":"pure","comment":"The easiest building blocks are actions which just change the model, these are so called 'pure' ones.\n\n  pure (\\m -> { m | entries <- asEntry m.typed\n                  , typed   <- \"\"})","type":{"tag":"lambda","in":{"tag":"lambda","in":{"tag":"var","name":"model"},"out":{"tag":"var","name":"model"}},"out":{"tag":"app","func":{"tag":"type","name":"Action"},"args":[{"tag":"var","name":"error"},{"tag":"var","name":"model"}]}}},{"name":"pureParam","comment":"Usually, a model gets modified based on a parameter. These can be lifted with `pureParam`:\n\n  addString : String -> Model -> Model\n  addString s = \\m -> { m | entries <- asEntry s }\n\n  pureParam addString \"an Entry\"","type":{"tag":"lambda","in":{"tag":"lambda","in":{"tag":"var","name":"a"},"out":{"tag":"lambda","in":{"tag":"var","name":"model"},"out":{"tag":"var","name":"model"}}},"out":{"tag":"lambda","in":{"tag":"var","name":"a"},"out":{"tag":"app","func":{"tag":"type","name":"Action"},"args":[{"tag":"var","name":"error"},{"tag":"var","name":"model"}]}}}},{"name":"task","comment":"An asynchronous modification which does not depend on the current model can be lifted with 'task'.","type":{"tag":"lambda","in":{"tag":"app","func":{"tag":"type","name":"Task.Task"},"args":[{"tag":"var","name":"error"},{"tag":"lambda","in":{"tag":"var","name":"model"},"out":{"tag":"var","name":"model"}}]},"out":{"tag":"app","func":{"tag":"type","name":"Action"},"args":[{"tag":"var","name":"error"},{"tag":"var","name":"model"}]}}},{"name":"thenDo","comment":"'thenDo' can be thought of as an `onSuccess` combinator: it combines two actions `act1` and `act2` in such a way, that if `act1` succeeds (which is always the case if no asynchronous action is involved) then right after it returns, `act2` takes place.","type":{"tag":"lambda","in":{"tag":"app","func":{"tag":"type","name":"Action"},"args":[{"tag":"var","name":"error"},{"tag":"var","name":"model"}]},"out":{"tag":"lambda","in":{"tag":"app","func":{"tag":"type","name":"Action"},"args":[{"tag":"var","name":"error"},{"tag":"var","name":"model"}]},"out":{"tag":"app","func":{"tag":"type","name":"Action"},"args":[{"tag":"var","name":"error"},{"tag":"var","name":"model"}]}}}}]},{"name":"Oprocesso.EDSL","comment":"The `EDSL` module provides infix operator symbols and precedence to use the framework as mentioned in the `README`.\n    Just include, if you into such stuff.\n\n@docs >>-, !<<, -<<, =>>","aliases":[],"types":[],"values":[]},{"name":"Oprocesso.Types","comment":"\n  # Base Types\n\n  ## State Monad\n  @docs State, run, mapState, andThen, return\n\n  ## Action and Modifier\n  @docs Modifier, Action","aliases":[{"name":"Modifier","comment":"","args":["error","model"],"type":{"tag":"app","func":{"tag":"type","name":"State"},"args":[{"tag":"var","name":"model"},{"tag":"app","func":{"tag":"type","name":"Action"},"args":[{"tag":"var","name":"error"},{"tag":"var","name":"model"}]}]}}],"types":[{"name":"Action","comment":"","args":["error","model"],"cases":[["None",[]],["Modify",[{"tag":"app","func":{"tag":"type","name":"Modifier"},"args":[{"tag":"var","name":"error"},{"tag":"var","name":"model"}]}]],["Launch",[{"tag":"lambda","in":{"tag":"var","name":"model"},"out":{"tag":"app","func":{"tag":"type","name":"Task.Task"},"args":[{"tag":"var","name":"error"},{"tag":"app","func":{"tag":"type","name":"Modifier"},"args":[{"tag":"var","name":"error"},{"tag":"var","name":"model"}]}]}}]]]},{"name":"State","comment":"","args":["s","a"],"cases":[["State",[{"tag":"lambda","in":{"tag":"var","name":"s"},"out":{"tag":"app","func":{"tag":"type","name":"_Tuple2"},"args":[{"tag":"var","name":"s"},{"tag":"var","name":"a"}]}}]]]}],"values":[{"name":"andThen","comment":"","type":{"tag":"lambda","in":{"tag":"app","func":{"tag":"type","name":"State"},"args":[{"tag":"var","name":"s"},{"tag":"var","name":"a"}]},"out":{"tag":"lambda","in":{"tag":"lambda","in":{"tag":"var","name":"a"},"out":{"tag":"app","func":{"tag":"type","name":"State"},"args":[{"tag":"var","name":"s"},{"tag":"var","name":"b"}]}},"out":{"tag":"app","func":{"tag":"type","name":"State"},"args":[{"tag":"var","name":"s"},{"tag":"var","name":"b"}]}}}},{"name":"mapState","comment":"","type":{"tag":"lambda","in":{"tag":"lambda","in":{"tag":"var","name":"s"},"out":{"tag":"var","name":"s"}},"out":{"tag":"lambda","in":{"tag":"app","func":{"tag":"type","name":"State"},"args":[{"tag":"var","name":"s"},{"tag":"var","name":"a"}]},"out":{"tag":"app","func":{"tag":"type","name":"State"},"args":[{"tag":"var","name":"s"},{"tag":"var","name":"a"}]}}}},{"name":"return","comment":"","type":{"tag":"lambda","in":{"tag":"var","name":"a"},"out":{"tag":"app","func":{"tag":"type","name":"State"},"args":[{"tag":"var","name":"s"},{"tag":"var","name":"a"}]}}},{"name":"run","comment":"","type":{"tag":"lambda","in":{"tag":"app","func":{"tag":"type","name":"State"},"args":[{"tag":"var","name":"s"},{"tag":"var","name":"a"}]},"out":{"tag":"lambda","in":{"tag":"var","name":"s"},"out":{"tag":"app","func":{"tag":"type","name":"_Tuple2"},"args":[{"tag":"var","name":"s"},{"tag":"var","name":"a"}]}}}}]}]