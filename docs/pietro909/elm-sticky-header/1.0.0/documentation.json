[{"name":"StickyHeader","comment":" This module provides a header components which accepts a brand and a list of links. It will react to window's scroll.\n\n# Definition\n@docs Model, Item, Port\n\n# Helpers\n@docs initialModel, Msg, view, update, subscriptions, buildItem, buildActiveItem\n\n","aliases":[{"name":"Model","comment":" Represent the header's model: attach it to your model\n\n    -- inserting header's model in your application model\n    type alias Model =\n        { headerModel: StickyHeader.Model }\n","args":[],"type":"{ style : Animation.State , current : Float , nextGoal : Float , brand : Maybe.Maybe StickyHeader.Item , links : List StickyHeader.Item , speedUp : Int , speedDown : Int , active : Maybe.Maybe Int }"},{"name":"Port","comment":" Type of the port needed to get scroll values.\n    \n    -- declaring the port in `Ports.elm` file\n    -- need to import Scroll.Move\n\n    port scroll : (Move -> msg) -> Sub msg\n","args":[],"type":"(Scroll.Move -> StickyHeader.Msg) -> Platform.Sub.Sub StickyHeader.Msg"}],"types":[{"name":"Item","comment":" An header item has this type, and is returned by helper functions.\n","args":[],"cases":[]},{"name":"Msg","comment":" The messages being used for scroll events and header's movement. Are to be put in union with your message type.\n\n    -- extend your own messages\n    type Msg\n        = StickyHeaderMsg StickyHeader.Msg\n        | -- your messages\n\n","args":[],"cases":[]}],"values":[{"name":"buildActiveItem","comment":" Build a Item with a title and a list of css classes to be applied\n\n    -- a header's item just showing the title\n    headerBrand = StickyHeader.buildActiveItem \"\" \"#home\" []\n","type":"String -> String -> List String -> StickyHeader.Item"},{"name":"buildItem","comment":" Build a Item with a title and a list of css classes to be applied\n\n    -- a header's item just showing the title\n    headerBrand = StickyHeader.buildItem \"\" []\n","type":"String -> List String -> StickyHeader.Item"},{"name":"initialModel","comment":" Helper function to initialize the header's model. It accepts an optional brand and a list of links.\n\n    -- initializing your model\n    initialModel =\n        let\n            headerBrand = StickyHeader.Item \"\" (Just \"#home\") []\n        in\n            { headerModel = StickyHeader.initialModel (Just headerBrand) [] }\n","type":"Maybe.Maybe StickyHeader.Item -> List StickyHeader.Item -> StickyHeader.Model"},{"name":"subscriptions","comment":" Provide the subscription to the JS port which brings the scroll values.\n    The port named 'scroll' needs to be fed with window's scroll event.\n\n    -- insert the subscription in you subscription loop\n    subscriptions model =\n        List.map (Platform.Sub.map StickyHeaderMsg) (StickyHeader.subscriptions model.headerModel)\n        |> Sub.batch\n\n    -- initialize port in your javascript code\n    <script>\n        // init myApp with Elm.Main\n        var mountNode = document.getElementById('main');\n        var myApp = Elm.Main.embed(mountNode);\n\n        // get the port\n        var scroll = window.pageYOffset || document.body.scrollTop;\n\n        // on window's scroll, send the current values\n        window.onscroll = function() {\n            var newScroll = window.pageYOffset || document.body.scrollTop;\n            myApp.ports.scroll.send([scroll, newScroll]);\n            scroll = newScroll;\n        };\n    </script>\n\n","type":"StickyHeader.Port -> StickyHeader.Model -> List (Platform.Sub.Sub StickyHeader.Msg)"},{"name":"update","comment":" Update function to handle the header's messages. It needs to be placed inside your application's update function.\n\n    -- handling header's messages in your application with update function\n    update msg model =\n        case msg of\n            StickyHeaderMsg subMsg->\n                let\n                    ( updatedModel, headerCmd ) = StickyHeader.update subMsg model.headerModel\n                in\n                    ( { model | headerModel = updatedModel }, Cmd.map StickyHeaderMsg headerCmd )\n","type":"StickyHeader.Msg -> StickyHeader.Model -> ( StickyHeader.Model, Platform.Cmd.Cmd a )"},{"name":"view","comment":" Provides the Html, given an updated model.\n    \n    -- insert it in your view function\n    view model =\n        App.map StickyHeaderMsg (StickyHeader.view model.headerModel)\n\n","type":"StickyHeader.Model -> Html.Html StickyHeader.Msg"}],"generated-with-elm-version":"0.17.1"}]