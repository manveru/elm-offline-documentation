[
  {
    "name": "CssModules",
    "comment": " This library lets you reference classes defined in CSS modules in your Elm\nviews, and then have the actual class names injected into your Elm modules by\nWebpack at build time.\n\n# Definition\n@docs CssModule\n\n# Using Module Classes\n@docs class, classList\n\n",
    "aliases": [],
    "types": [
      {
        "name": "CssModule",
        "comment": " Declare a CSS module that you wish to use in your Elm application.\n\n    classes = CssModule \"./styles.css\"\n        { someClass = \"\"\n        , anotherClass = \"\"\n        }\n\nThe Webpack loader recognises this constructor in the JavaScript code generated\nby the Elm compiler. **The CSS filename must be a literal string.**\n\nThe CSS file path is relative to either 1) a Webpack module root directory, or\n2) the JavaScript file in which your top-level Elm module is referenced (in\nwhich case the path should begin with with `./`).\n\nEach of the classes in the list may be set to any string, but it’s probably\neasiest just to leave them as empty strings, since these will be replaced with\nthe actual class names by the Webpack loader at build time.\n\n**Warning:** Currently, if you list a class that is not defined in the CSS\nmodule, it will receive a value of `undefined` at runtime, which is likely to\nresult in `class=\"undefined\"`.\n\n",
        "args": [
          "classes"
        ],
        "cases": [
          [
            "CssModule",
            [
              "String",
              "classes"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "class",
        "comment": " Use a CSS module class as an HTML class attribute’s value.\n\n    let\n        classes = CssModule \"./styles.css\"\n            { someClass = \"\" }\n    in\n        Html.div [ class .someClass classes ]\n\n",
        "type": "(classes -> String) -> CssModules.CssModule classes -> Html.Attribute msg"
      },
      {
        "name": "classList",
        "comment": " Combine a list of CSS module classes as an HTML class attribute’s value.\n\n    let\n        classes = CssModule \"./styles.css\"\n            { message = \"\"\n            , important = \"\"\n            }\n    in\n        Html.div\n            [ classList\n                [ (.message, True)\n                , (.important, message.isImportant)\n                ]\n                classes\n            ]\n\n",
        "type": "List ( classes -> String, Bool ) -> CssModules.CssModule classes -> Html.Attribute msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]