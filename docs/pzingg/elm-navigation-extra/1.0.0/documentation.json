[
  {
    "name": "Navigation.Router",
    "comment": " This module provides routing for single-page apps based on changes to the\nthe browser's location. To use this module, create a `Navigation.program`\nor `Navigation.programWithFlags` in your main module, and follow the\nprotocols described here to pass state changes (that can possibly change\nthe URL shown in your browser's location bar), and location changes\n(that can either come from your program changing the location, or from\na user typing a new URL into the location bar, following a link, etc.).\n\nRouting happens in both directions\n-- that is, changes to the browser's location are translated to messages\nyour app can respond to, and changes to your app's state are translated to\nchanges in the browser's location. The net effect is to make it possible for\nthe 'back' and 'forward' buttons in the browser to do useful things, and for\nthe state of your app to be partially bookmark-able.\n\nThe router state and protocols in this module are responsible for updating\nthe browser's history and prevent infinite loops that can be could be caused\nif you are both changing the location and responding to location changes.\n\nSee the documentation on the\n[`elm-lang/navigation` package](http://package.elm-lang.org/packages/elm-lang/navigation/latest)\nfor a basic discussion of how location changes are passed to a\n`Navigation.program` and how you set up the program to create a `LocationChanged`\nmessage (Note: `LocationChanged` is just a message tag you create; you could\nname it anything you like).\n\nFor a discussion of the\ndifferences between the official module and this one, see the [package documentation]\n(http://package.elm-lang.org/packages/pzingg/elm-navgiation-extra/latest).\n\n# Router State\n\nYour porgram is responsible for maintaining the state of the `router`, by\nkeeping a `Navigation.Router.Model` member in your program's larger model.\nThis state is used to detect whether incoming changes to your program's location\nare \"internal\" or \"external\".  Call the `Navigation.Router.init` function\nas part of the `init` function in your `Navigation.program`.\n\n@docs Model, init\n\n# Processing Location Changes\n\nYour program's `update` function must update the router's state when\nhandling the `LocationChanged` message, by calling\n`Navigation.Router.locationChanged`.  After updating your program's model,\nthe router can process any additional commands that should be performed\nwhen the URL changes, by calling `Navigation.Router.processLocation`.\n\n@docs locationChanged, processLocation\n\n# Setting Urls Based on Program State\n\nWhen any messages other than a 'LocationChanged' message are received\nby your program's `update` function, you may want changes to your model\nto be reflected in a new URL.  You do this by generating a\n`Navigation.Router.UrlChange` type that indicates what the new URL should\nbe and whether the URL should replace or modify the browser's current history.\n\nYour program's `update` function calls `Navigation.Router.urlChanged` to\nlet the router remember the URL that you are setting, so that when the\nlocation change is received later, an infinite loop is prevented.\n\n@docs UrlChange, HistoryEntry, urlChanged\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Encapsulates the router's state.  A `Navigation.Router.Model` must be\nincluded in your program's larger model.\n\n`reportedUrl` is the last Url reported to us via urlUpdate.\n\n`expectedUrlUpdates` represents how many outstanding commands we've\nsent to change the URL. We increment it when we send a command, and\ndecrement it when `urlUpdate` is called (unless it's already zero,\nof course).\n",
        "args": [],
        "type": "{ reportedUrl : Erl.Url, expectedUrlUpdates : Int }"
      },
      {
        "name": "UrlChange",
        "comment": " Indicates a change to be made in the URL, either creating\na new entry in the browser's history (`NewEntry`), or merely replacing the\ncurrent URL (`ModifyEntry`).\n\nThis is ultimately implemented via\n[`Navigation.newUrl`](http://package.elm-lang.org/packages/elm-lang/navigation/1.0.0/Navigation#newUrl) or\n[`Navigation.modifyUrl`](http://package.elm-lang.org/packages/elm-lang/navigation/1.0.0/Navigation#modifyUrl).\nThe reason we use this intermediate type is so that we can check whether the\nprovided string already corresponds to the current URL. In that case, we can\navoid creating a spurious duplicate entry in the browser's history.\n\nThe reason we take a `String` (rather than a more structured type) is that\nthere may be several ways you might want to build up the required URL. We\ndon't want to be prescriptive about that. However, the `String` you provide\nmust follow a couple of rules.\n\n* The `String` must already be uri-encoded.\n\n* The `String` must either start with a '/', a `?' or a '#'.\n\n    * If it starts with a '/', it will be interpreted as a full path, including\n      optional query parameters and hash.\n\n    * If it starts with a '?', then we'll assume that you want the current\n      path to stay the same -- only the query parameters and hash will change.\n\n    * If it starts with a '#', then we'll assume that you want the current\n      path and query parameters (if any) to stay the same -- only the\n      hash will change.\n\nSo, what you should *not* provide is the scheme, host, or authentication\nmethod -- that is, no \"http://elm-lang.org\". You should also not use relative\nURLs. (Let me know if you'd like relative URLs -- we might be able to do\nsomething sensible with them, but we don't yet in this version).\n\nOne way to construct a `UrlChange` in a modular way is to use the\n`RouteUrl.Builder` module. However, a variety of approaches are possible.\n",
        "args": [],
        "type": "{ entry : Navigation.Router.HistoryEntry, url : String }"
      }
    ],
    "types": [
      {
        "name": "HistoryEntry",
        "comment": " Indicates whether to create a new entry in the browser's history, or merely\nmodify the current entry.\n\nOne could have used a `Bool` for this instead, but I hate remembering what\n`True` actually means.\n",
        "args": [],
        "cases": [
          [
            "NewEntry",
            []
          ],
          [
            "ModifyEntry",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "init",
        "comment": " Initalize the router's `Model` with the initial location passed to\nyour program at startup.\n",
        "type": "Navigation.Location -> Navigation.Router.Model"
      },
      {
        "name": "locationChanged",
        "comment": " Updates the router's `Model` when a location message has been\nreceived in the program's `update` function.\n\nReturns a `Tuple` consisting of the updated `Model` and a `Bool` flag,\n`external`, indicating if the change was from the \"outside\",\ni.e. from the user clicking on a link, typing in the location bar,\nor following a bookmark.\n\nThis is step one of procssing a location message in the `update` function.\n\nStep two is to update your program's larger model, keeping the new state of the\nrouter's model.\n\nStep three is to call `Navigation.Router.processLocation` with the `external`\nflag returned here, with your program's `update` and `location2messages`\nfunctions, the location and your program's model.\n",
        "type": "Navigation.Router.Model -> Navigation.Location -> ( Navigation.Router.Model, Bool )"
      },
      {
        "name": "processLocation",
        "comment": " If the location change came from an outside source, this function\ncalls the program's `location2messages` function, which generates a list\nof program messages.  Each message is processed by calling back to the\nprogram's `update` function (possibly updating the program's larger model\nand possibly creating additional commands).\n\nIf the location change came from an internally generated URL (created by\nyour program's `delta2url` function), this function just returns the\nmodel and commands passed to it, without calling the `update` function.\n\nFinally the function returns the possibly updated model and list of commands.\n",
        "type": "Bool -> (msg -> model -> ( model, Platform.Cmd.Cmd msg )) -> (Navigation.Location -> List msg) -> Navigation.Location -> model -> List (Platform.Cmd.Cmd msg) -> ( model, Platform.Cmd.Cmd msg )"
      },
      {
        "name": "urlChanged",
        "comment": " To process a change of your program's state, first create a function\n`delta2url` in your program.\n\nThen in your program's `update` function, if your model changes,\ncall `delta2url` with two parameters. The first parameter is\nthe model's previous value, and the second is the model's new value.\n\nYour function should return a `Just Router.UrlChange` if a new URL should be\ndisplayed in the browser's location bar (or `Nothing` if no change to the URL\nis needed). This library will check the current URL before setting a new one,\nso you need not worry about setting duplicate URLs -- that will be\nautomatically avoided.\n\nThe reason we provide both the previous and current model for your\nconsideration is that sometimes you may want to do something differently\ndepending on the nature of the change in the model, not just the new value.\nFor instance, it might make the difference between using `NewEntry` or\n`ModifyEntry` to make the change.\n\nNote: Do not call `delta2url` when processing a `LocationChanged` message.\nInstead use the `Navigation.Router.locationChanged` and\n`Navigation.Router.processLocation` functions described above.\n\nAfter calling `delta2url`, step two of processing a state change that\nmay result in a new URL to be added to your browser's location bar is\nto then call this function, `Navigation.Router.urlChanged`.\n\nThe function takes two parameters, the current state of your program's\n`Navigation.Router.Model`, and the `Maybe Navigation.Router.UrlChange`\nyou received from your program's `delta2url` function.\n\nThe function returns a `Tuple`, containing the new router state (to be\nkept in your program's larger model) and possibly a `Cmd` from the\nelm-lang `Navigation` module (either `Navigation.newUrl` or\n`Navigation.modifUrl`. Return the command from your program's `update`\nfunction.\n",
        "type": "Navigation.Router.Model -> Maybe.Maybe Navigation.Router.UrlChange -> ( Navigation.Router.Model, Platform.Cmd.Cmd msg )"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]