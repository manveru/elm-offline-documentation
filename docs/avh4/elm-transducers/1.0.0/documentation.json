[
  {
    "name": "Transducer",
    "comment": "A transducer is a composable way of processing a series of values.  \nMany basic transducers correspond to functions you may be familiar with for \nprocessing `List`s or `Signal`s.\n\n    import Maybe\n    import String\n    import Transducer exposing (..)\n\n    port stringSource : Signal String\n\n    parseValidInts =\n        map String.toInt\n        >>> map toMaybe\n        >>> filter ((/=) Nothing)\n        >>> map (Maybe.withDefault 0)\n\n    exampleList : List Int\n    exampleList = transduceList parseValidInts [\"123\", \"-34\", \"35.0\", \"SDF\", \"7\"]\n\n    exampleSignal : Signal Int\n    exampleSignal = transduceSignal parseValidInts stringSource\n\n# Definitions\n@docs Reducers, Transducer, Fold\n\n# Common transducers\n@docs map, filter, take, drop\n\n# More transducers\n@docs concatMap, dedupe\n\n# Composing transducers\n@docs (>>>)\n\n# Applying transducers\n@docs transduce, transduceList, transduceSignal, transduceSet, transduceArray",
    "aliases": [
      {
        "name": "Fold",
        "comment": "A fold is function that takes a Reducer, an initial value, and input source,\nand returns a final value.",
        "args": [
          "input",
          "result",
          "source"
        ],
        "type": "Reducer input result -> result -> source -> result"
      },
      {
        "name": "Transducer",
        "comment": "A transducer an `init` value for it's internal state, a `step` function that\ntransforms a Reducer into a Reducer of a new type, and a `complete` function that\ntransforms a Reducer into a function collapsing the internal state.\n\nWhen defining transducers, the type parameter `r` should be left free.",
        "args": [
          "a",
          "b",
          "r",
          "state"
        ],
        "type": "{ init : state , step : Reducer b r -> Reducer a ( state, r ) , complete : Reducer b r -> ( state, r ) -> r }"
      },
      {
        "name": "Reducer",
        "comment": "A reducer is a function taking an input and a value and produces a new value.\n\n    List.foldl : Reducer a b -> b -> List a -> b",
        "args": [
          "input",
          "result"
        ],
        "type": "input -> result -> result"
      }
    ],
    "types": [],
    "values": [
      {
        "name": ">>>",
        "comment": "Transducer composition",
        "type": "Transducer a b ( s2, r ) s1 -> Transducer b c r s2 -> Transducer a c r ( s1, s2 )"
      },
      {
        "name": "comp",
        "comment": "",
        "type": "Transducer a b ( s2, r ) s1 -> Transducer b c r s2 -> Transducer a c r ( s1, s2 )"
      },
      {
        "name": "concatMap",
        "comment": "Map a given function onto a list and flatten the results.\n\n    transduceList (concatMap (\\x -> [x,x+10])) [1,2] == [1,10,2,20]",
        "type": "(a -> List b) -> Transducer a b r ()"
      },
      {
        "name": "dedupe",
        "comment": "Drop values that repeat the previous value.\n\n    transduceList dedupe [1,1,2,2,1] == [1,2,1]",
        "type": "Transducer a a r (Maybe a)"
      },
      {
        "name": "drop",
        "comment": "Drop the first *n* values.\n\n    transduceList (drop 2) [1,2,3,4] == [3,4]",
        "type": "Int -> Transducer a a r Int"
      },
      {
        "name": "filter",
        "comment": "Keep only values that satisfy the predicate.\n\n    transduceList (filter isEven) [1..6] == [2,4,6]",
        "type": "(a -> Bool) -> Transducer a a r ()"
      },
      {
        "name": "map",
        "comment": "Apply a function to every value.\n\n    transduceList (map sqrt) [1,4,9] == [1,2,3]",
        "type": "(a -> b) -> Transducer a b r ()"
      },
      {
        "name": "partition",
        "comment": "",
        "type": "Int -> Transducer a (List a) r ( Int, List a )"
      },
      {
        "name": "take",
        "comment": "Take the first *n* values.\n\n    transduceList (take 2) [1,2,3,4] == [1,2]",
        "type": "Int -> Transducer a a r Int"
      },
      {
        "name": "transduce",
        "comment": "Apply a transducer.",
        "type": "Fold a ( s, r ) x -> Reducer b r -> r -> Transducer a b r s -> x -> r"
      },
      {
        "name": "transduceArray",
        "comment": "Apply a Transducer to an Array, producing an Array.\n\n    transduceArray t xs = transduce Array.foldl Array.push Array.empty t xs",
        "type": "Transducer a b (Array b) s -> Array a -> Array b"
      },
      {
        "name": "transduceList",
        "comment": "Apply a Transducer to a List, producing a List.\n\n    transduceList t xs == transduce List.foldr (::) [] t xs",
        "type": "Transducer a b (List b) s -> List a -> List b"
      },
      {
        "name": "transduceSet",
        "comment": "Apply a Transducer to a Set, producing a Set.\n\n    transduceSet t xs = transduce Set.foldr Set.insert Set.empty t xs",
        "type": "Transducer comparable comparable' (Set comparable'') s -> Set comparable -> Set comparable''"
      },
      {
        "name": "transduceSignal",
        "comment": "Apply a Transducer to a Signal, producing a new Signal.  Note that because Signals\nnever terminate, the transducer's `complete` will never be invoked.\n\n    main = transduceSignal (map show) (show \"initial value\") Mouse.position",
        "type": "Transducer a b b s -> b -> Signal a -> Signal b"
      }
    ],
    "generated-with-elm-version": "old"
  },
  {
    "name": "Transducer.Debug",
    "comment": "This module provides support for debugging transducers.\n\n# Logging\n@docs debug",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "debug",
        "comment": "Wrap an existing transducer such that input and output of the transducer \nwill be logged with `Debug.log`.\n\n    filter' pred = debug \"filter\" (filter pred)\n    main = show (transduceList (filter' ((/=) 2)) [1, 2, 3])\n    -- Console output:\n    --     filter: input: 3\n    --     filter: state: ()\n    --     filter -> : 3\n    --     filter: input: 2\n    --     filter: state: ()\n    --     filter: input: 1\n    --     filter: state: ()\n    --     filter -> : 1\n    --     filter: complete: ()",
        "type": "String -> Transducer a b r s -> Transducer a b r s"
      }
    ],
    "generated-with-elm-version": "old"
  }
]