[
  {
    "name": "Css",
    "comment": " A library to create and use css stylesheets in Elm.\n# Type Definitions\n@docs Property, Value, Declaration, Selector, Rule\n# The Style Tag\n@docs style\n# Helpers\n@docs stylesheet, dec, rule\n",
    "aliases": [
      {
        "name": "Declaration",
        "comment": " A Declaration consists of (is a tuple of) a Property and a Value.\nIt should be a valid CSS Declaration.\n\n    -- Example\n\n    blueBgc = (\"background-color\", \"lightblue\") -- Declaration (Property, Value)\n",
        "args": [],
        "type": "( Css.Property, Css.Value )"
      },
      {
        "name": "Property",
        "comment": " It should be a valid CSS Property (as String).\n\n    -- Example\n\n    \"background-color\" : Property\n",
        "args": [],
        "type": "String"
      },
      {
        "name": "Rule",
        "comment": " A Rule consists of (is a tuple of) a Selector and List of Declarations.\nIt should be a valid CSS Rule.\n\n    -- Example\n\n    alertText = (\"color\", \"red\")                -- Declaration (Property, Value)\n    alertBg = (\"background-color\", \"lightpink\") -- Declaration (Property, Value)\n\n    alertRule =\n      ( \"span.has-alert\"\n      , [ alertText\n        , alertBg\n        ]\n      )                                         -- Rule\n",
        "args": [],
        "type": "( Css.Selector, List Css.Declaration )"
      },
      {
        "name": "Selector",
        "comment": " It should be a valid CSS Selector (as String).\n\n    -- Example\n\n    \"div.foo > span.bar, #baz, [disabled]\" : Selector\n",
        "args": [],
        "type": "String"
      },
      {
        "name": "Value",
        "comment": " It should be a valid CSS Value (as String).\n\n    -- Example\n\n    \"1px solid black\" : Value\n",
        "args": [],
        "type": "String"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "dec",
        "comment": " Constructor for Declaration. (,) can be used instead.\n",
        "type": "Css.Property -> Css.Value -> Css.Declaration"
      },
      {
        "name": "rule",
        "comment": " Constructor for Rule. (,) can be used instead.\n",
        "type": "Css.Selector -> List Css.Declaration -> Css.Rule"
      },
      {
        "name": "style",
        "comment": " Html style tag (for internal styles).\n\n    -- Example\n\n    style [] []\n\n    -- <style></style>\n\n    style [] [text \"body { background-color : blue }\"]\n\n    --  <style>\n    --    body {\n    --      backdround-color : blue\n    --    }\n    --  </style>\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "stylesheet",
        "comment": " Helper for style tag.\n\n    -- Example\n\n    themedStyleSheet primaryColor bgColor =\n      stylesheet\n      [ rule \"body\"\n        [ dec \"background-color\" bgColor\n        ]\n      , rule \"button\"\n        [ dec \"color\" primaryColor\n        ]\n      ]\n",
        "type": "List Css.Rule -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  }
]