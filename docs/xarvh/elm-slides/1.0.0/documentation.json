[
  {
    "name": "Slides",
    "comment": "\n# Main API\n@docs app, html, htmlFragments, md, mdFragments\n\n# Options\n@docs Options, slidesDefaultOptions, SlideAttributes, FragmentAttributes, SlideAnimation, SlideMotionDirection, SlideRelativeOrder\n\n# Elm Architecture\n@docs Message, Model, program\n",
    "aliases": [
      {
        "name": "FragmentAttributes",
        "comment": " Shorthand for the function type used to customise fragment animation.\n```\nfragmentAttributesOpacity : FragmentAttributes\nfragmentAttributesOpacity completion =\n    [ style\n        [ (\"opacity\", toString completion) ]\n    ]\n```\n",
        "args": [],
        "type": "Float -> List (Html.Attribute Slides.Message)"
      },
      {
        "name": "Model",
        "comment": "\nThe Slides model.\nContains all the state of the app, including the slides list itself, the current configuration options\nand all the information needed for the slides and fragments animations.\n",
        "args": [],
        "type": "{ slides : Array.Array Slides.Slide , options : Slides.Options , windowSize : Window.Size , isPaused : Bool , slideAnimation : SmoothAnimator.Model , fragmentAnimation : SmoothAnimator.Model }"
      },
      {
        "name": "Options",
        "comment": "\nConfiguration options:\n\n* `slidePixelSize` &mdash; `width` and `height` geometry of the slide area, in pixel.\n   While the slide will be scaled to the window size, the internal coordinates of the slide will refer to these values.\n\n* `easingFunction` &mdash: Any f : [0, 1] -> [0, 1]\n  The standard ones are available in Elm's [easing-functions](http://package.elm-lang.org/packages/elm-community/easing-functions/1.0.1/).\n\n* `slideAttributes` &mdash: The function used to customize the slide animation.\n  It takes the slide state and motion as argument, and produces a list of DOM attributes (usually just the `style`\n  attribute, but you can add `class` or anything else you need) that can be used to animate the slides.\n\n* `fragmentAttributes` &mdash; the function used to animate a fragment within a slide.\n  It takes the fragment completion from 0 to 1 (0 being invisible and 1 being fully visible) and produces a list of Dom attributes\n  (as above, usually just the `style` attribute will suffice).\n\n* `animationDuration` &mdash; the `Time` duration of a slide or fragment animation.\n\n* `keyCodesToMessage` &mdash; a map of all Messages and the key codes that can trigger them.\n",
        "args": [],
        "type": "{ slidePixelSize : { height : Int, width : Int } , easingFunction : Float -> Float , slideAttributes : Slides.SlideAttributes , fragmentAttributes : Slides.FragmentAttributes , animationDuration : Time.Time , keyCodesToMessage : List { message : Slides.Message, keyCodes : List Int } }"
      },
      {
        "name": "SlideAttributes",
        "comment": " Shorthand for the function type used to animate the slides.\nThe first argument describes the slide state: whether it is still or moving, and if the latter\nin which direction and how much movement.\n\n```\nslideAttributesOpacity : SlideAttributes\nslideAttributesOpacity slideAnimation =\n    let\n        opacity =\n            case slideAnimation of\n                Still -> 1\n                Moving direction order completion ->\n                    case direction of\n                        Incoming -> completion\n                        Outgoing -> 1 - completion\n    in\n        [ style\n            [ (\"opacity\", toString opacity) ]\n        ]\n```\n",
        "args": [],
        "type": "Slides.SlideAnimation -> List (Html.Attribute Slides.Message)"
      }
    ],
    "types": [
      {
        "name": "Message",
        "comment": " The Elm-architecture Msgs.\n",
        "args": [],
        "cases": [
          [
            "Noop",
            []
          ],
          [
            "First",
            []
          ],
          [
            "Last",
            []
          ],
          [
            "Next",
            []
          ],
          [
            "Prev",
            []
          ],
          [
            "AnimationTick",
            [
              "Time.Time"
            ]
          ],
          [
            "PauseAnimation",
            []
          ],
          [
            "WindowResizes",
            [
              "Window.Size"
            ]
          ]
        ]
      },
      {
        "name": "SlideAnimation",
        "comment": " Tells you what a visible slide is doing.\n",
        "args": [],
        "cases": [
          [
            "Still",
            []
          ],
          [
            "Moving",
            [
              "Slides.SlideMotionDirection",
              "Slides.SlideRelativeOrder",
              "Float"
            ]
          ]
        ]
      },
      {
        "name": "SlideMotionDirection",
        "comment": " This is used to tell the slideAttributes function whether it is running on\n    the slide that's coming into view or the one that's going away.\n",
        "args": [],
        "cases": [
          [
            "Incoming",
            []
          ],
          [
            "Outgoing",
            []
          ]
        ]
      },
      {
        "name": "SlideRelativeOrder",
        "comment": "\n Usually during an animation there will be two visible slides:\n this tells you the relative position of the two slides within the normal\n slide sequence.\n\n If you navigate from one slide to the next, the Outgoing slide will be\n the slide with the SmallerIndex, and the Incoming slide will be the slide\n with the LargerIndex.\n\n If instead you navigate backwards, from one slide to the previous, it\n will be the opposite.\n",
        "args": [],
        "cases": [
          [
            "SmallerIndex",
            []
          ],
          [
            "LargerIndex",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "app",
        "comment": "\nDoes all the wiring for you, returning a `Program` ready to run.\n```\nmain = app\n    slidesDefaultOptions\n    [ slide1\n    , slide2\n    , ...\n    ]\n```\n",
        "type": "Slides.Options -> List Slides.Slide -> Platform.Program Basics.Never"
      },
      {
        "name": "html",
        "comment": "\nCreates a single slide from a DOM node.\n\nCan be used to create custom slides constructors (yes, it is used internally by `md` and `mdMarkdown`).\n```\nimport Html exposing (..)\n\nslide1 = html <|\n     div\n        []\n        [ h1 [] [ text \"Hello, I am the slide header\" ]\n        , div [] [ text \"and I am some content\" ]\n        ]\n```\n",
        "type": "Html.Html Slides.Message -> Slides.Slide"
      },
      {
        "name": "htmlFragments",
        "comment": "\nCreates a single slide made by several fragments, which are displayed in sequence, one after the other.\n```\nslide2 = htmlFragments\n    [ div [] [ text \"I am always visible when the slide is visible\" ]\n    , div [] [ text \"Then I appear\"\n    , div [] [ text \"and then I appear!\"\n    ]\n",
        "type": "List (Html.Html Slides.Message) -> Slides.Slide"
      },
      {
        "name": "md",
        "comment": "\nCreates a slide from a Markdown string.\n\nIt uses [elm-markdown](http://package.elm-lang.org/packages/evancz/elm-markdown/3.0.0/)\nso you can enable syntax highlightning by including [highlight.js](https://highlightjs.org/).\n\nIt automatically removes indentation from multi-line strings.\n\n```\nslide3 = md\n    \"\"\"\n    # Hello! I am a header\n    *and I am emph!*\n    \"\"\"\n```\n",
        "type": "String -> Slides.Slide"
      },
      {
        "name": "mdFragments",
        "comment": "\nTurns several Markdown strings into a single slide made by several fragments,\nwhich will appear one after another:\n```\nslide4 = mdFragments\n    [ \"I am always visible\"\n    , \"Then I appear\"\n    , \"and Then I\"\n    ]\n```\n",
        "type": "List String -> Slides.Slide"
      },
      {
        "name": "program",
        "comment": "\nThis provides you with all the standard functions used in the Elm architecture (`init`, `update`, `view`, `subscriptions`)\nplus the one used for URL navigation (`urlUpdate`).\n\nThis allows you to embed a Slides app inside another Elm app or, more importantly, to have full control of how the app behaves.\n",
        "type": "Slides.Options -> List Slides.Slide -> { init : Navigation.Location -> ( Slides.Model, Platform.Cmd.Cmd Slides.Message ) , update : Slides.Message -> Slides.Model -> ( Slides.Model, Platform.Cmd.Cmd Slides.Message ) , urlUpdate : Navigation.Location -> Slides.Model -> ( Slides.Model, Platform.Cmd.Cmd Slides.Message ) , view : Slides.Model -> Html.Html Slides.Message , subscriptions : Slides.Model -> Platform.Sub.Sub Slides.Message }"
      },
      {
        "name": "slidesDefaultOptions",
        "comment": "\n    Default configuration options.\n\n    I called them `slidesDefaultOptions` instead than just `defaultOptions` because you can't use `{ Slides.defaultOptions | whatever... }`\n    so at least it is possible to `import Slides exposing (slidesDefaultOptions)` that does not pollute the scope.\n\n    { slidePixelSize =\n        { height = 700\n        , width = 960\n        }\n\n    , easingFunction =\n        Ease.inOutCubic\n\n    , animationDuration =\n        500 * Time.millisecond\n\n    , slideAttributes =\n        slideAttributesScroll\n\n    , fragmentAttributes =\n        fragmentAttributesOpacity\n\n    , keyCodesToMessage =\n        [   { message = First\n            , keyCodes = [36] -- Home\n            }\n        ,   { message = Last\n            , keyCodes = [35] -- End\n            }\n        ,   { message = Next\n            , keyCodes = [13, 32, 39, 76, 68] -- Enter, Spacebar, Arrow Right, l, d\n            }\n        ,   { message = Prev\n            , keyCodes = [37, 72, 65] -- Arrow Left, h, a\n            }\n        ,   { message = PauseAnimation\n            , keyCodes = [80]\n            }\n        ]\n    }\n",
        "type": "Slides.Options"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  }
]