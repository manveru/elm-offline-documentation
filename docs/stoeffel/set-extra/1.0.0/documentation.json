[
  {
    "name": "Set.Extra",
    "comment": " Convenience functions for working with Set.\n\n@docs concatMap, subset\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "concatMap",
        "comment": " Map a given function onto a set and union the resulting set.\n    neighbors :: (Int, Int) -> Set (Int, Int)\n    neighbors (x, y) =\n        Set.fromList\n          [ (x - 1, y - 1), (x, y - 1), (x + 1, y - 1)\n          , (x - 1, y),                 (x + 1, y)\n          , (x - 1, y + 1), (x, y + 1), (x + 1, y + 1)\n          ]\n    Set.Extra.concatMap neighbors setOfPoints\n",
        "type": "(comparable -> Set.Set comparable2) -> Set.Set comparable -> Set.Set comparable2"
      },
      {
        "name": "subset",
        "comment": " Check if a Set is a subset of another Set.\n    Set.Extra.subset (Set.fromList [1,2,3]) (Set.fromList [1,2,3,4,5]) -- True\n",
        "type": "Set.Set comparable -> Set.Set comparable -> Bool"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]