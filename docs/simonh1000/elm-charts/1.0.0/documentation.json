[{"name":"Chart","comment":"This library supports three basic chart types. The horizontal bar chart is built with simple div elements (based on an ideas from [D3]()); the vertical one uses a flexbox layout and some CSS transforms, while the Pie chart is based on [this post](http://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/).\n\nThis module comprises tools to create and modify a model of the data, labels and styling, and then the function `toHtml` renders the model using one of the provided views. Three convenience functions are provided to accelerate modeling, but the defaults can be overriden.\n\n# Chart constructors\n@docs hBar, vBar, pie\n\n# Customisers\n@docs title, colours, colors, addValueToLabel, updateStyles\n\n# Rendering\n@docs toHtml","aliases":[],"types":[],"values":[{"name":"addValueToLabel","comment":"addValueToLabel adds the data value of each item to the data label. This is applied by default in hBar.\n\n    vBar vs ls \"Title\"\n        |> addValueToLabel\n        |> toHtml","type":"Chart.Model -> Chart.Model"},{"name":"colors","comment":"colors supports alternative spelling of colours","type":"List String -> Chart.Model -> Chart.Model"},{"name":"colours","comment":"colours replaces the default colours. Bar charts use just one colour, which will be the head of the list provided.\n\n    vChart vs ls\n        |> colours [\"steelblue\", \"#96A65B\", \"#D9A679\", \"#593F27\", \"#A63D33\"]    -- pie chart\n        |> toHtml","type":"List String -> Chart.Model -> Chart.Model"},{"name":"hBar","comment":"The horizontal bar chart results in a set of bars, one above the other, of lengths in proportion to the value. A label with the data value is printed in each bar.\n\n    hBar vals labels\n        |> title \"My Chart\n        |> toHtml","type":"List Float -> List String -> Chart.Model"},{"name":"pie","comment":"The pie chart results in a circle cut into coloured segments of size proportional to the data value.\n\n    pie vals labels\n        |> toHtml","type":"List Float -> List String -> Chart.Model"},{"name":"title","comment":"title adds a title to the model.\n\n    -- e.g. build a chart from scratch\n    chartInit vs ls BarHorizontal\n        |> title \"This will be the title\"\n        |> toHtml","type":"String -> Chart.Model -> Chart.Model"},{"name":"toHtml","comment":"toHtml is called last, and causes the chart data to be rendered to html.\n\n    hBar vs l\n        |> toHtml","type":"Chart.Model -> Html.Html"},{"name":"updateStyles","comment":"updateStyles replaces styles for a specified part of the chart. Charts have the following div structure\n\n    .container\n        .title\n        .chart-container\n            .chart      (container for the bars or pie segments)\n                .chart-elements\n            .legend     (also for the label container in a vertical bar chart)\n                .legend-labels\n\n    vChart vs ls\n        |> updateStyles \"chart\" [ ( \"color\", \"black\" ) ]\n        |> toHtml","type":"String -> List Chart.Style -> Chart.Model -> Chart.Model"},{"name":"vBar","comment":"The vertical bar chart results in a set of bars of lengths in proportion to the value. A label is printed below each bar.\n\n    vBar vals labels\n        |> title \"My Chart\"\n        |> toHtml","type":"List Float -> List String -> Chart.Model"}],"generated-with-elm-version":"0.15.1"}]