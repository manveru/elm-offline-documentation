[{"name":"Collision","comment":"this module provides an implementation of the\nGilbert-Johnson-Keerthi (GJK) collision detection algorith for\nconvex objects in 2D. To deal with concave objects, simply\nbreak your larger object into smaller convex shapes.\n\nIt is very efficient, usually converging in one or two iterations.\n\n# Definitions\n@docs Pt, Mink\n\n# API\n@docs collision\n\n# Support function\n@docs polySupport","aliases":[{"name":"Mink","comment":"","args":["a"],"type":"( a, a -> Pt -> Pt )"},{"name":"Pt","comment":"","args":[],"type":"( Float, Float )"}],"types":[],"values":[{"name":"collision","comment":"Determine if there is a collision between two objects.\nObject information is given as a pair of: a boundary representation\nof type a, and a support function for that representaion f : a -> Pt -> Pt\nwhich takes the boundary representation and a direction vector, and\nreturns the point of the boundary furthest along the direction.\nPt here is used as an alias for (Float, Float). The first argument\nto collision is max recursion depth, which might come in handy in\nthe case where you are writing your own support functions.\n\n    poly1 = [(-15,-10),(0,15),(12,-5)] \n    poly2 = [(-9,13),(6,13),(-2,22)] \n\n    collision 10 (poly1, polySupport) (poly2, polySupport) == True","type":"Int -> Mink a -> Mink b -> Bool"},{"name":"polySupport","comment":"This support function is provided for the (probably) common\ncase where your object boundary is represented as a list of points\nof the form (Float, Float). It calculates the polygon vertex furthest\nin a direction of a 2D direction vector, also of the form (Float, Float).\n\n    polySupport [(-15,-10),(0,15),(12,-5)] (1,0) == (12,-5) \n    polySupport [(-15,-10),(0,15),(12,-5)] (0,-1) == (-15,-10)","type":"List Pt -> Pt -> Pt"}],"generated-with-elm-version":"old"}]