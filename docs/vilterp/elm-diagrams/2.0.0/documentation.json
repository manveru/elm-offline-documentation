[
  {
    "name": "Diagrams",
    "comment": "Diagrams is a library built on top of Graphics.Collage which allows you to\nconstruct graphics by laying out elements relative to each other. You can also\n\"tag\" elements in the diagram, and, given coordinates (i.e. of the mouse) find\nwhich path in the hierarchy of tagged elements the coordinates are over. Lastly,\ngiven a tag path, you can find the coordinates at which that element was placed.\n\nDiagrams are defined as a tree\n\n# Basic Types\n@docs Diagram, TagPath, Point\n\n# Constructors\n@docs circle, rect, path, text, spacer, transform, group, tag\n\n# Basic Transforms\n@docs move, moveX, moveY, scale, rotate\n\n# Rendering and Debugging\n@docs render, fullWindowView, fullWindowMain, showBBox, showOrigin, outlineBox\n\n# Properties and Querying\n@docs Direction, envelope, width, height, pick, getCoords\n\n# Relative Positioning\n@docs beside, above, atop, hcat, vcat, zcat, alignLeft\n\n# Shortcuts\n@docs empty, vspace, hspace, vline, hline\n\n# Geometry Utilities\n@docs Transform, applyTrans, invertTrans, magnitude, lerp\n\n# Setup Utilities\n@docs fullWindowView, fullWindowMain",
    "aliases": [
      {
        "name": "TagPath",
        "comment": "",
        "args": [
          "a"
        ],
        "type": "List a"
      },
      {
        "name": "Point",
        "comment": "",
        "args": [],
        "type": "( Float, Float )"
      }
    ],
    "types": [
      {
        "name": "Direction",
        "comment": "",
        "args": [],
        "cases": [
          [
            "Up",
            []
          ],
          [
            "Down",
            []
          ],
          [
            "Left",
            []
          ],
          [
            "Right",
            []
          ]
        ]
      },
      {
        "name": "Transform",
        "comment": "",
        "args": [],
        "cases": [
          [
            "Translate",
            [
              "Float",
              "Float"
            ]
          ],
          [
            "Rotate",
            [
              "Float"
            ]
          ],
          [
            "Scale",
            [
              "Float"
            ]
          ]
        ]
      },
      {
        "name": "Diagram",
        "comment": "The recursive tree datatype which represents diagrams. NOTE: because\nthese may change, use the functions under Constructors to create them,\nnot the datatype constructors themselves.",
        "args": [
          "a"
        ],
        "cases": [
          [
            "Circle",
            [
              "Float",
              "C.FillStyle"
            ]
          ],
          [
            "Rect",
            [
              "Float",
              "Float",
              "C.FillStyle"
            ]
          ],
          [
            "Path",
            [
              "List Point",
              "C.LineStyle"
            ]
          ],
          [
            "Text",
            [
              "String",
              "T.Style"
            ]
          ],
          [
            "Spacer",
            [
              "Float",
              "Float"
            ]
          ],
          [
            "TransformD",
            [
              "Transform",
              "Diagram a"
            ]
          ],
          [
            "Group",
            [
              "List (Diagram a)"
            ]
          ],
          [
            "Tag",
            [
              "a",
              "Diagram a"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "above",
        "comment": "Place a above b. The origin of the new diagram will be at the origin of a.",
        "type": "Diagram a -> Diagram a -> Diagram a"
      },
      {
        "name": "alignLeft",
        "comment": "",
        "type": "List (Diagram a) -> Diagram a"
      },
      {
        "name": "applyTrans",
        "comment": "",
        "type": "Transform -> Point -> Point"
      },
      {
        "name": "atop",
        "comment": "",
        "type": "Diagram a -> Diagram a -> Diagram a"
      },
      {
        "name": "beside",
        "comment": "Place a beside b. The origin of the new diagram will be at the origin of a.",
        "type": "Diagram a -> Diagram a -> Diagram a"
      },
      {
        "name": "circle",
        "comment": "Circle with a given radius and fill, centered on the local origin.",
        "type": "Float -> C.FillStyle -> Diagram a"
      },
      {
        "name": "defaultFill",
        "comment": "",
        "type": "C.FillStyle"
      },
      {
        "name": "empty",
        "comment": "",
        "type": "Diagram a"
      },
      {
        "name": "envelope",
        "comment": "Given a Diagram and a Direction, return the distance in that direction from the origin\nto the closest line which doesn't intersect the content of the diagram.\nSee docs in [Haskell Diagrams][hd].\n\n [hd][http://projects.haskell.org/diagrams/doc/manual.html#envelopes-and-local-vector-spaces]",
        "type": "Direction -> Diagram a -> Float"
      },
      {
        "name": "firstJust",
        "comment": "",
        "type": "List (M.Maybe a) -> M.Maybe a"
      },
      {
        "name": "fullWindowMain",
        "comment": "",
        "type": "Diagram a -> Signal E.Element"
      },
      {
        "name": "fullWindowView",
        "comment": "",
        "type": "( Int, Int ) -> Diagram a -> E.Element"
      },
      {
        "name": "getCoords",
        "comment": "",
        "type": "Diagram a -> TagPath a -> M.Maybe Point"
      },
      {
        "name": "getCoords'",
        "comment": "",
        "type": "Diagram a -> TagPath a -> Point -> M.Maybe Point"
      },
      {
        "name": "group",
        "comment": "Group a list of Diagrams in to one. Elements will be stacked with local origins\non top of one another.",
        "type": "List (Diagram a) -> Diagram a"
      },
      {
        "name": "hcat",
        "comment": "Place a list of Diagrams next to each other, such that\ntheir origins are along a horizontal line. The first element in the list will\nbe on the left; the last on the right.",
        "type": "List (Diagram a) -> Diagram a"
      },
      {
        "name": "height",
        "comment": "",
        "type": "Diagram a -> Float"
      },
      {
        "name": "hline",
        "comment": "Horizontal line",
        "type": "Float -> C.LineStyle -> Diagram a"
      },
      {
        "name": "hspace",
        "comment": "Horizontal spacer of width w",
        "type": "Float -> Diagram a"
      },
      {
        "name": "invertTrans",
        "comment": "",
        "type": "Transform -> Transform"
      },
      {
        "name": "lerp",
        "comment": "linear interpolation. To map x from interval (imin, imax) to (omin, omax), use:\n\n    lerp (omin, omax) (imin, imax) x",
        "type": "( Float, Float ) -> ( Float, Float ) -> Float -> Float"
      },
      {
        "name": "magnitude",
        "comment": "",
        "type": "Point -> Float"
      },
      {
        "name": "move",
        "comment": "Translate given diagram by (x, y). Origin remains the same.",
        "type": "( Float, Float ) -> Diagram a -> Diagram a"
      },
      {
        "name": "moveX",
        "comment": "",
        "type": "Float -> Diagram a -> Diagram a"
      },
      {
        "name": "moveY",
        "comment": "",
        "type": "Float -> Diagram a -> Diagram a"
      },
      {
        "name": "outlineBox",
        "comment": "",
        "type": "C.LineStyle -> Diagram a -> Diagram a"
      },
      {
        "name": "path",
        "comment": "Unclosed path made of this list of points, laid out relative to the local origin.",
        "type": "List Point -> C.LineStyle -> Diagram a"
      },
      {
        "name": "pick",
        "comment": "Given a diagram and a point (e.g. of the mouse) in that Diagram's coordinate space,\ndescend the diagram tree to the lowest primitive, returning a list of all tag nodes\nthe traversal passed through, or M.Nothing if the point was not over any primitives.",
        "type": "Diagram a -> Point -> M.Maybe (TagPath a)"
      },
      {
        "name": "rect",
        "comment": "Rectangle with given width, height, and fill, centered on the local origin.",
        "type": "Float -> Float -> C.FillStyle -> Diagram a"
      },
      {
        "name": "render",
        "comment": "",
        "type": "Diagram a -> C.Form"
      },
      {
        "name": "rotate",
        "comment": "",
        "type": "Float -> Diagram a -> Diagram a"
      },
      {
        "name": "scale",
        "comment": "",
        "type": "Float -> Diagram a -> Diagram a"
      },
      {
        "name": "showBBox",
        "comment": "Draw a red dot box around a diagram. Implemented in terms of `envelope`.",
        "type": "Diagram a -> Diagram a"
      },
      {
        "name": "showOrigin",
        "comment": "Draw a red dot at (0, 0) in the diagram's local vector space.",
        "type": "Diagram a -> Diagram a"
      },
      {
        "name": "spacer",
        "comment": "Spacer with given width and height; renders as transparent.",
        "type": "Float -> Float -> Diagram a"
      },
      {
        "name": "tag",
        "comment": "Return a Tag node with the given diagram as its sole child. Adding this to the \ndiagram tree is useful for picking and getting coordinates.",
        "type": "a -> Diagram a -> Diagram a"
      },
      {
        "name": "text",
        "comment": "Text with given style, centered vertically and horizontally on the local origin.",
        "type": "String -> T.Style -> Diagram a"
      },
      {
        "name": "textElem",
        "comment": "",
        "type": "String -> T.Style -> E.Element"
      },
      {
        "name": "toPoint",
        "comment": "",
        "type": "( Int, Int ) -> Point"
      },
      {
        "name": "transform",
        "comment": "Translate, rotate, or scale a given diagram. The transformed diagram has the\nsame origin.",
        "type": "Transform -> Diagram a -> Diagram a"
      },
      {
        "name": "vcat",
        "comment": "Place a list of Diagrams next to each other, such that\ntheir origins are along a vertical line. The first element in the list will\nbe on the top; the last on the bottom.",
        "type": "List (Diagram a) -> Diagram a"
      },
      {
        "name": "vline",
        "comment": "Vertical line",
        "type": "Float -> C.LineStyle -> Diagram a"
      },
      {
        "name": "vspace",
        "comment": "Vertical spacer of height h",
        "type": "Float -> Diagram a"
      },
      {
        "name": "width",
        "comment": "",
        "type": "Diagram a -> Float"
      },
      {
        "name": "zcat",
        "comment": "Place a list of diagrams on top of each other.",
        "type": "List (Diagram a) -> Diagram a"
      }
    ],
    "generated-with-elm-version": "old"
  }
]