[{"name":"Diagrams","comment":"Diagrams is a library built on top of `Graphics.Collage` which allows you to\nconstruct graphics by laying out elements relative to each other.\n\nA Diagram is represented as a tree of elements, where the leaves are primitive\nshapes like rectangles, circles, paths and text and the nodes are transformations\nlike translation, rotation, and scaling.\n\nThere are also `Group` nodes. These have multiple children which are transformed\nsimultaneously by the transformations above them.\n\n[Sierpinski triangle example](https://gist.github.com/vilterp/9966fd18de8d9b282ade)\n\nLastly, there are `Tag` nodes which just hold a child diagram and a value of type a;\nthese exist solely to identify a subdiagram, for the purposes of (a) specifying a tag\npath and getting the coordinates it was positioned at (the `getCoords` function) or\n(b) given a point, find what subtree it is over (the `pick` function).\n\nUsing signals to compose `pick` with mouse clicks, you can create a signal of\nclicked-on elements. Folding this with the application state and re-rendering, you\ncan make an interface which is responsive to the mouse without channels.\n\nThe library is based on the excellent [Diagrams][hd] library for Haskell, which\nhas a nice [visual tutorial][hd-tut]. Things are named slightly differently, and this\nversion is missing a lot of features and generality.\n\n [hd]: http://projects.haskell.org/diagrams/\n [hd-tut]: http://projects.haskell.org/diagrams/doc/quickstart.html\n\n# Basic Types\n@docs Diagram, TagPath, Point\n\n# Constructors\n@docs circle, rect, path, polygon, text, spacer, transform, group, tag, ngon, eqTriangle\n\n# Basic Transforms\n@docs move, moveX, moveY, scale, rotate\n\n# Rendering and Debugging\n@docs render, showBBox, showOrigin, outlineBox\n\n# Properties and Querying\n@docs Direction, envelope, width, height, PickPath, pick, getCoords\n\n# Relative Positioning\n@docs beside, above, atop, hcat, vcat, zcat, alignLeft, alignCenter\n\n# Composition Utilities\n@docs empty, vspace, hspace, vline, hline, pad, padAll, background\n\n# Styles\n@docs FillStroke, justFill, justStroke, fillAndStroke, invisible\n\n# Bezier curves\n@docs bezier\n\n# Geometry Utilities\n@docs Transform, applyTrans, invertTrans, magnitude, lerp\n\n# Setup Utilities\n@docs fullWindowView, fullWindowMain, collageMousePos","aliases":[{"name":"PickPath","comment":"(Tag, Coordinates) pairs from bottom of tree to top; result of\ncalling `pick` (see below).","args":["a"],"type":"List ( a, Point )"},{"name":"TransWHBox","comment":"","args":[],"type":"{ translate : ( Float, Float ), width : Float, height : Float }"},{"name":"BBox","comment":"","args":[],"type":"{ up : Float, down : Float, left : Float, right : Float }"},{"name":"FillStroke","comment":"","args":[],"type":"{ fill : Maybe C.FillStyle, stroke : Maybe C.LineStyle }"},{"name":"TagPath","comment":"","args":["a"],"type":"List a"},{"name":"Point","comment":"","args":[],"type":"( Float, Float )"}],"types":[{"name":"Direction","comment":"","args":[],"cases":[["Up",[]],["Down",[]],["Left",[]],["Right",[]]]},{"name":"Transform","comment":"","args":[],"cases":[["Translate",["Float","Float"]],["Rotate",["Float"]],["Scale",["Float"]]]},{"name":"Diagram","comment":"The recursive tree datatype which represents diagrams. NOTE: because\nthese may change, use the functions under Constructors to create them,\nnot the datatype constructors themselves.","args":["a"],"cases":[["Circle",["Float","FillStroke"]],["Rect",["Float","Float","FillStroke"]],["Path",["List Point","FillStroke","PathType"]],["Text",["String","T.Style","( Float, Float )"]],["TransformD",["Transform","Diagram a"]],["Group",["List (Diagram a)"]],["Tag",["a","Diagram a"]]]},{"name":"PathType","comment":"","args":[],"cases":[["ClosedP",[]],["OpenP",[]]]}],"values":[{"name":"above","comment":"Given two diagrams a and b, place b to the right of a, such that their origins\nare on a horizontal line and their envelopes touch. The origin of the new diagram\nis the origin of a.","type":"Diagram a -> Diagram a -> Diagram a"},{"name":"alignCenter","comment":"translate a diagram such that the envelope in all directions is equal","type":"Diagram a -> Diagram a"},{"name":"alignLeft","comment":"Stack diagrams vertically (as with `vcat`), such that their left edges align.\nThe origin of the resulting diagram is the origin of the first diagram.","type":"List (Diagram a) -> Diagram a"},{"name":"applyTrans","comment":"","type":"Transform -> Point -> Point"},{"name":"atop","comment":"Given two diagrams a and b, stack a on top of b in the \"out of page\" axis,\nso a occlodes b.","type":"Diagram a -> Diagram a -> Diagram a"},{"name":"background","comment":"Put a rectangle behind the given diagram, matching its bounding box.","type":"FillStroke -> Diagram a -> Diagram a"},{"name":"bbox2transwh","comment":"","type":"BBox -> TransWHBox"},{"name":"beside","comment":"Given two diagrams a and b, place b to the right of a, such that their origins\nare on a horizontal line and their envelopes touch. The origin of the new diagram\nis the origin of a.","type":"Diagram a -> Diagram a -> Diagram a"},{"name":"bezier","comment":"Given four points a, cp1, cp2, b, return path diagram which is a bezier\ncurve from a to b, using cp1 and cp2 as control points.","type":"Point -> Point -> Point -> Point -> C.LineStyle -> Diagram a"},{"name":"bezierCurve","comment":"","type":"Point -> Point -> Point -> Point -> List Point"},{"name":"bezierPoint","comment":"","type":"Float -> List Point -> Point"},{"name":"boundingBox","comment":"","type":"Diagram a -> BBox"},{"name":"circle","comment":"Circle with a given radius and fill, centered on the local origin.","type":"Float -> FillStroke -> Diagram a"},{"name":"collageMousePos","comment":"Mouse position relative to the collage's origin (in the middle of the screen).","type":"Signal Point"},{"name":"defaultStroke","comment":"","type":"C.LineStyle"},{"name":"empty","comment":"","type":"Diagram a"},{"name":"envelope","comment":"Given a Diagram and a Direction, return the distance in that direction from the origin\nto the closest line which doesn't intersect the content of the diagram.\n\n [hd]: http://projects.haskell.org/diagrams/doc/manual.html#envelopes-and-local-vector-spaces","type":"Direction -> Diagram a -> Float"},{"name":"eqTriangle","comment":"equilateral triangle with given side length & fill/stroke style","type":"Float -> FillStroke -> Diagram a"},{"name":"fillAndStroke","comment":"","type":"C.FillStyle -> C.LineStyle -> FillStroke"},{"name":"firstNonempty","comment":"","type":"List (List a) -> List a"},{"name":"fullWindowMain","comment":"The easiest way to get a diagram on the screen:\n\n    main = fullWindowMain (rect 10 10 (justFill <| C.Solid Color.orange))","type":"Diagram a -> Signal E.Element"},{"name":"fullWindowView","comment":"","type":"( Int, Int ) -> Diagram a -> E.Element"},{"name":"generate","comment":"","type":"Float -> Float -> Float -> List Float"},{"name":"getCoords","comment":"","type":"Diagram a -> TagPath a -> Maybe Point"},{"name":"getCoords'","comment":"","type":"Diagram a -> TagPath a -> Point -> Maybe Point"},{"name":"group","comment":"Group a list of Diagrams in to one. Elements will be stacked with local origins\non top of one another. This is the same as `zcat`.","type":"List (Diagram a) -> Diagram a"},{"name":"halfStrokeWidth","comment":"","type":"FillStroke -> Float"},{"name":"hcat","comment":"Place a list of Diagrams next to each other, such that\ntheir origins are along a horizontal line. The first element in the list will\nbe on the left; the last on the right.","type":"List (Diagram a) -> Diagram a"},{"name":"height","comment":"","type":"Diagram a -> Float"},{"name":"hline","comment":"Horizontal line","type":"Float -> C.LineStyle -> Diagram a"},{"name":"hspace","comment":"Horizontal spacer of width w","type":"Float -> Diagram a"},{"name":"interpolatePoint","comment":"","type":"Float -> Point -> Point -> Point"},{"name":"invertTrans","comment":"","type":"Transform -> Transform"},{"name":"invisible","comment":"","type":"FillStroke"},{"name":"justFill","comment":"","type":"C.FillStyle -> FillStroke"},{"name":"justStroke","comment":"","type":"C.LineStyle -> FillStroke"},{"name":"lerp","comment":"linear interpolation. To map x from interval (imin, imax) to (omin, omax), use:\n\n    lerp (omin, omax) (imin, imax) x","type":"( Float, Float ) -> ( Float, Float ) -> Float -> Float"},{"name":"magnitude","comment":"","type":"Point -> Float"},{"name":"move","comment":"Translate given diagram by (x, y). Origin of resulting diagram is the same.","type":"( Float, Float ) -> Diagram a -> Diagram a"},{"name":"moveX","comment":"","type":"Float -> Diagram a -> Diagram a"},{"name":"moveY","comment":"","type":"Float -> Diagram a -> Diagram a"},{"name":"ngon","comment":"regular polygon with number of sides, side length, & fill/stroke style","type":"Int -> Float -> FillStroke -> Diagram a"},{"name":"outlineBox","comment":"Draw a box around the given diagram (uses `envelope`)","type":"C.LineStyle -> Diagram a -> Diagram a"},{"name":"pad","comment":"Like `padAll`, but with same spacing on all sides.","type":"Float -> Diagram a -> Diagram a"},{"name":"padAll","comment":"Given four numbers up, down, left, and right, put an invisible spacer\nbehind the given diagram, changing its envelope.","type":"Float -> Float -> Float -> Float -> Diagram a -> Diagram a"},{"name":"path","comment":"Unclosed path made of this list of points, laid out relative to the local origin.","type":"List Point -> C.LineStyle -> Diagram a"},{"name":"pick","comment":"Given a diagram and a point (e.g. of the mouse), return the list of Tag nodes between\nthe diagram root and the leaf node the point is within (a primitive visual element), along\nwith the point's offset from the local origin at each level. If the mouse is not over a leaf\nnode, return `[]`.\n\nReturns a `PickPath`, which is a list of (Tag, Coordinates) pairs ordered\nfrom the leaf node to the root. The second element in each pair is the given\npoint in the tag's coordinate space -- the point which, if transformed by every\nTransform node from that tag node to the root,  would be the point initially given to `pick`.\n\n    pick myDiagram myPoint\n    => [(<tag nearest myDiagram leaf>, <myPoint in leaf coordinate space>),\n       , ...\n       , (<tag nearest myDiagram root>, <myPoint in root coordinate space>)]","type":"Diagram a -> Point -> PickPath a"},{"name":"polygon","comment":"","type":"List Point -> FillStroke -> Diagram a"},{"name":"rect","comment":"Rectangle with given width, height, and fill, centered on the local origin.","type":"Float -> Float -> FillStroke -> Diagram a"},{"name":"render","comment":"","type":"Diagram a -> C.Form"},{"name":"resolution","comment":"","type":"List Float"},{"name":"rotate","comment":"","type":"Float -> Diagram a -> Diagram a"},{"name":"scale","comment":"","type":"Float -> Diagram a -> Diagram a"},{"name":"showBBox","comment":"Draw a red dot box around a diagram. Implemented in terms of `envelope`.","type":"Diagram a -> Diagram a"},{"name":"showOrigin","comment":"Draw a red dot at `(0, 0)` in the diagram's local vector space.","type":"Diagram a -> Diagram a"},{"name":"spacer","comment":"Spacer with given width and height; renders as transparent.","type":"Float -> Float -> Diagram a"},{"name":"tag","comment":"Return a Tag node with the given diagram as its sole child. Adding this to the \ndiagram tree is useful for picking and getting coordinates.","type":"a -> Diagram a -> Diagram a"},{"name":"text","comment":"Text with given style, centered vertically and horizontally on the local origin.","type":"String -> T.Style -> Diagram a"},{"name":"textElem","comment":"","type":"String -> T.Style -> E.Element"},{"name":"toPoint","comment":"","type":"( Int, Int ) -> Point"},{"name":"transform","comment":"Translate, rotate, or scale a given diagram. The transformed diagram has the\nsame origin.","type":"Transform -> Diagram a -> Diagram a"},{"name":"vcat","comment":"Place a list of Diagrams next to each other, such that\ntheir origins are along a vertical line. The first element in the list will\nbe on the top; the last on the bottom.","type":"List (Diagram a) -> Diagram a"},{"name":"vline","comment":"Vertical line","type":"Float -> C.LineStyle -> Diagram a"},{"name":"vspace","comment":"Vertical spacer of height h","type":"Float -> Diagram a"},{"name":"width","comment":"","type":"Diagram a -> Float"},{"name":"zcat","comment":"Place a list of diagrams on top of each other, with their origin points\nstacked on the \"out of page\" axis. The first diagram in the list is on top.\nThis is the same as the `group`.","type":"List (Diagram a) -> Diagram a"}],"generated-with-elm-version":"old"}]