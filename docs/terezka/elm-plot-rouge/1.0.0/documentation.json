[
  {
    "name": "Svg.Plot",
    "comment": " First of all: If you're looking to a plotting library\n use [elm-plot](https://github.com/terezka/elm-plot) instead! If you feel\n like you're missing something in that library, you should just open an issue\n in that repo and I'll see what I can do to accommodate your needs.\n\n That said, this is raw plotting elements.\n\n@docs line, area, Interpolation\n\n",
    "aliases": [],
    "types": [
      {
        "name": "Interpolation",
        "comment": " ",
        "args": [],
        "cases": [
          [
            "Linear",
            []
          ],
          [
            "Monotone",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "area",
        "comment": " ",
        "type": "List (Svg.Attribute msg) -> Svg.Plot.Interpolation -> Svg.Coordinates.Plane -> List Svg.Coordinates.Point -> Svg.Svg msg"
      },
      {
        "name": "line",
        "comment": " ",
        "type": "List (Svg.Attribute msg) -> Svg.Plot.Interpolation -> Svg.Coordinates.Plane -> List Svg.Coordinates.Point -> Svg.Svg msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Svg.Coordinates",
    "comment": " First of all: If you're looking to a plotting library\n use [elm-plot](https://github.com/terezka/elm-plot) instead! If you feel\n like you're missing something in that library, you should just open an issue\n in that repo and I'll see what I can do to accommodate your needs.\n\nThat said, here are some cartesian to SVG coordinate translation helpers.\n\n# Plane\n@docs Plane, Axis\n\n# Plane from data\n\nYou may want to produce a plane which fits all your data. For that you need\nto find the minimum and maximum values withing your data in order to calculate\nthe domain and range.\n\n@docs min, max\n\n    planeFromPoints : List Coordinates.Point -> Coordinates.Plane\n    planeFromPoints points =\n      { x =\n        { marginLower = 10\n        , marginUpper = 10\n        , length = 300\n        , min = Coordinates.min .x points\n        , max = Coordinates.max .x points\n        }\n      , y =\n        { marginLower = 10\n        , marginUpper = 10\n        , length = 300\n        , min = Coordinates.min .y points\n        , max = Coordinates.max .y points\n        }\n      }\n\n# Cartesian to SVG\n@docs toSVGX, toSVGY, scaleSVG\n\n# SVG to cartesian\n@docs toCartesianX, toCartesianY, scaleCartesian\n\n# Helpers\n@docs Point, place, placeWithOffset\n\n",
    "aliases": [
      {
        "name": "Axis",
        "comment": " The axis of the plane.\n\n  - The margin properties are the upper and lower margins for the axis. So for example,\n    if you want to add margin on top of the plot, increase the marginUpper of\n    the y-`Axis`.\n  - The length is the length of your SVG axis. (Plane.x.length is the width,\n    Plane.y.length is the height)\n  - The `min` and `max` values is the reach of your plane. (Domain for the y-axis, range\n    for the x-axis)\n",
        "args": [],
        "type": "{ marginLower : Float , marginUpper : Float , length : Float , min : Float , max : Float }"
      },
      {
        "name": "Plane",
        "comment": " The properties of your plane.\n",
        "args": [],
        "type": "{ x : Svg.Coordinates.Axis, y : Svg.Coordinates.Axis }"
      },
      {
        "name": "Point",
        "comment": " Representation of a point in your plane.\n",
        "args": [],
        "type": "{ x : Float, y : Float }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "max",
        "comment": " Helper to extract the maximum value amongst your coordinates.\n",
        "type": "(a -> Float) -> List a -> Float"
      },
      {
        "name": "min",
        "comment": " Helper to extract the minimum value amongst your coordinates.\n",
        "type": "(a -> Float) -> List a -> Float"
      },
      {
        "name": "place",
        "comment": " A `transform translate(x, y)` SVG attribute. Beware that using this and\n  and another transform attribute on the same node, will overwrite the first.\n  If that's the case, just make one yourself:\n\n    myTransformAttribute : Svg.Attribute msg\n    myTransformAttribute =\n      transform <|\n        \"translate(\"\n        ++ toString (toSVGX plane x) ++ \",\"\n        ++ toString (toSVGY plane y) ++ \") \"\n        ++ \"rotateX(\" ++ whatever ++ \")\"\n",
        "type": "Svg.Coordinates.Plane -> Svg.Coordinates.Point -> Svg.Attribute msg"
      },
      {
        "name": "placeWithOffset",
        "comment": " Place at coordinate, but you may add a SVG offset. See `place` above for important notes.\n",
        "type": "Svg.Coordinates.Plane -> Svg.Coordinates.Point -> Float -> Float -> Svg.Attribute msg"
      },
      {
        "name": "scaleCartesian",
        "comment": " For scaling a SVG value to a cartesian value. Note that this will _not_\n  return a coordinate on the plane, but the scaled value.\n",
        "type": "Svg.Coordinates.Axis -> Float -> Float"
      },
      {
        "name": "scaleSVG",
        "comment": " For scaling a cartesian value to a SVG value. Note that this will _not_\n  return a coordinate on the plane, but the scaled value.\n",
        "type": "Svg.Coordinates.Axis -> Float -> Float"
      },
      {
        "name": "toCartesianX",
        "comment": " Translate a cartesian x-coordinate to its SVG x-coordinate.\n",
        "type": "Svg.Coordinates.Plane -> Float -> Float"
      },
      {
        "name": "toCartesianY",
        "comment": " Translate a cartesian y-coordinate to its SVG y-coordinate.\n",
        "type": "Svg.Coordinates.Plane -> Float -> Float"
      },
      {
        "name": "toSVGX",
        "comment": " Translate a SVG x-coordinate to its cartesian x-coordinate.\n",
        "type": "Svg.Coordinates.Plane -> Float -> Float"
      },
      {
        "name": "toSVGY",
        "comment": " Translate a SVG y-coordinate to its cartesian y-coordinate.\n",
        "type": "Svg.Coordinates.Plane -> Float -> Float"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]