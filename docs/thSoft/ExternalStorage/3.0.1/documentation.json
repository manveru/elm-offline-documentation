[{"name":"ExternalStorage.Cache","comment":"\n# Defining a cache\n@docs Cache, create, Update","aliases":[{"name":"Update","comment":"A cache update command.\nIndicates that a new value has to be inserted to the cache or an existing value has to be removed from it.\n\n    port feed : Signal Cache.Update","args":[],"type":"Maybe { url : String, value : Maybe Value }"},{"name":"Cache","comment":"Stores JSON values (potentially coming from an external storage) associated with their URLs.\n\n    cache : Signal Cache","args":[],"type":"Dict String Value"}],"types":[],"values":[{"name":"create","comment":"Maintains the state of a cache by processing an update feed.\n\n    cache = feed |> Cache.create","type":"Signal Update -> Signal Cache"}],"generated-with-elm-version":"old"},{"name":"ExternalStorage.Reference","comment":"\n# Referring values in a cache\n@docs Reference, Error, create, decoder","aliases":[{"name":"Reference","comment":"A type-safe remote reference which can be resolved lazily with its `get` function.\n\n    type alias Book = {\n      title: String,\n      authors: List (Reference Writer)\n    }","args":["a"],"type":"{ url : String, get : Result Error a }"}],"types":[{"name":"Error","comment":"The various error cases that might happen when dereferencing an object.\n\n    viewError url error =\n      case error of\n        NotFound -> \"Loading \" ++ url\n        DecodingFailed message -> \"Can't decode \" ++ url ++ \": \" ++ message","args":[],"cases":[["NotFound",[]],["DecodingFailed",["String"]]]}],"values":[{"name":"create","comment":"Creates a reference to the object at the given URL.\nThe object is looked up from the given cache and decoded with the given decoder.\n\n    book : Signal (Reference Book)\n    book =\n      let load cache = Reference.create (bookDecoder cache) bookUrl cache\n      in Signal.map load cache","type":"Decoder a -> String -> Cache -> Reference a"},{"name":"decoder","comment":"Decodes a JavaScript string to a remote reference with the string as URL.\n\n    bookDecoder : Cache -> Decoder Book\n    bookDecoder cache =\n      object2 Book\n        (\"title\" := string)\n        (\"authors\" := list (decoder writerDecoder cache))","type":"Decoder a -> Cache -> Decoder (Reference a)"}],"generated-with-elm-version":"old"}]