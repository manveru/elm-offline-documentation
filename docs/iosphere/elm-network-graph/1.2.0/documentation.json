[
  {
    "name": "Graph.Json",
    "comment": " JSON encoding and decoding of the graph is close to the JSON representation\nin sigmajs.org to allow easier intergration.\n\n@docs decode, encode\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "decode",
        "comment": " A decoder for `Graph Node`.\n",
        "type": "Json.Decode.Decoder (Graph.Graph Graph.Node.Node)"
      },
      {
        "name": "encode",
        "comment": " Encode `Graph Node`.\n",
        "type": "Graph.Graph Graph.Node.Node -> Json.Encode.Value"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Graph.GraphViz",
    "comment": " Exports a Graph in [GraphViz](http://www.graphviz.org) format.\n\n@docs string\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "string",
        "comment": " A GraphViz representation of the Graph.\n",
        "type": "Graph.Graph Graph.Node.Node -> String"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Graph.Edge.Json",
    "comment": " JSON encoding and decoding of edges is a subset of the JSON representation\nin sigmajs.org to allow easier intergration.\n\n@docs decode, encode\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "decode",
        "comment": " Decodes JSON into an Edge record.\n",
        "type": "Json.Decode.Decoder Graph.Edge.Edge"
      },
      {
        "name": "encode",
        "comment": " Encodes an Edge record as JSON.\n",
        "type": "Graph.Edge.Edge -> Json.Encode.Value"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Graph",
    "comment": " A network graph consists of a list of nodes connected by edges.\n\n## Types\n\n@docs Graph\n\n## Constructors\n\n@docs init, empty\n\n## Filtering\n\n@docs filter, filterByName\n",
    "aliases": [
      {
        "name": "Graph",
        "comment": " A network graph consists of a list of nodes connected by edges.\n\nThe node type of the Graph is abstract to allow you to use records extending the\ntype Node. Most functions provided by this work with `Graph Node`.\n",
        "args": [
          "node"
        ],
        "type": "{ edges : List Graph.Edge.Edge, nodes : List node }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "empty",
        "comment": " Creates an empty graph without edges or nodes.\n",
        "type": "Graph.Graph Graph.Node.Node"
      },
      {
        "name": "filter",
        "comment": " Filters a graph such that only nodes passing the test are included.\n",
        "type": "(Graph.Node.Node -> Bool) -> Graph.Graph Graph.Node.Node -> Graph.Graph Graph.Node.Node"
      },
      {
        "name": "filterByName",
        "comment": " Filter by name to include only nodes that start with the\nspecified name prefix.\n",
        "type": "Graph.Node.Name -> Graph.Graph Graph.Node.Node -> Graph.Graph Graph.Node.Node"
      },
      {
        "name": "init",
        "comment": " Initialize a node from a list of edges (see Edge) and nodes (see Node).\n",
        "type": "List Graph.Edge.Edge -> List Graph.Node.Node -> Graph.Graph Graph.Node.Node"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Graph.Node.Json",
    "comment": " JSON encoding and decoding of nodes is close to the JSON representation in\nsigmajs.org to allow easier intergration.\n\n@docs decode, encode\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "decode",
        "comment": " Decodes JSON into a Node record.\n",
        "type": "Json.Decode.Decoder Graph.Node.Node"
      },
      {
        "name": "encode",
        "comment": " Encodes a Node record as JSON.\n",
        "type": "Graph.Node.Node -> Json.Encode.Value"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Graph.Edge",
    "comment": " An edge connects two nodes in a graph. Edges are designed to work with the\ntype Node. You may however use an extensible record to add fields to Node\nwithout breaking the Edge implementation.\n\n@docs Edge, filterForIdentifiers\n",
    "aliases": [
      {
        "name": "Edge",
        "comment": " Describes the link between two nodes in a Graph.\n",
        "args": [],
        "type": "{ from : Graph.Node.Identifier, to : Graph.Node.Identifier }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "filterForIdentifiers",
        "comment": " Filter list of edges to only include edges referencing a node in the\ngiven list. This is useful to exclude external nodes that might have been\naccidentally referenced.\n",
        "type": "Set.Set Graph.Node.Identifier -> List Graph.Edge.Edge -> List Graph.Edge.Edge"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Graph.Node",
    "comment": " Node describes a node in a network graph. A Node is identified\nby `.identifier` which is used by Edge to reference two connected nodes.\n\nThe node's name is a list of strings to allow you to represent paths\n(e.g. for modules).\n\n## Types\n\n@docs Node, Identifier, Name\n\n## Constructor\n\n@docs fromName\n\n## Other\n@docs namePrefix, identifierFromName\n",
    "aliases": [
      {
        "name": "Identifier",
        "comment": " A simple type alias for String to make function signatures easier readable.\n",
        "args": [],
        "type": "String"
      },
      {
        "name": "Name",
        "comment": " A node's name is a list of strings to allow\nyou to represent paths (e.g. for modules).\n",
        "args": [],
        "type": "List String"
      },
      {
        "name": "Node",
        "comment": " Describes a node in a graph.\n",
        "args": [],
        "type": "{ identifier : Graph.Node.Identifier, name : Graph.Node.Name }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "fromName",
        "comment": " Create a node from a name using. An identifier will be created\nautomatically. Use this function if all nodes in your graph have unique names.\n",
        "type": "Graph.Node.Name -> Graph.Node.Node"
      },
      {
        "name": "identifierFromName",
        "comment": " Create an identifier from a name. This is only useful if you expect names to\nbe unique in your graph.\n",
        "type": "Graph.Node.Name -> Graph.Node.Identifier"
      },
      {
        "name": "namePrefix",
        "comment": " Returns the first *n* members of a name.\n",
        "type": "Int -> Graph.Node.Name -> Graph.Node.Name"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]