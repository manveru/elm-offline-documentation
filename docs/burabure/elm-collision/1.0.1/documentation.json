[
  {
    "name": "Collision",
    "comment": " Detect collision/intersection of geometry in a defined coordinate space\nAKA tell me when objects are touching or overlapping\n\n# Rectangle to rectangle\n@docs axisAlignedBoundingBox, rectangleSide, Side\n\n# Circle to circle\n@docs circleToCircle\n",
    "aliases": [],
    "types": [
      {
        "name": "Side",
        "comment": " Represents sides of a Rectangle\n",
        "args": [],
        "cases": [
          [
            "Top",
            []
          ],
          [
            "Right",
            []
          ],
          [
            "Bottom",
            []
          ],
          [
            "Left",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "axisAlignedBoundingBox",
        "comment": " Detect collision between two Rectangles that\nare axis aligned â€” meaning no rotation.\n\n    rect1 = { cx = 5, cy = 5, w = 10, h = 10 }\n    rect2 = { cx = 7, cy = 5, w = 10, h = 10 }\n\n    axisAlignedBoundingBox rect1 rect2 -- True\n    -- rect1 is coliding with rect2\n",
        "type": "Collision.Hitbox.Rectangle -> Collision.Hitbox.Rectangle -> Bool"
      },
      {
        "name": "circleToCircle",
        "comment": " Detect collision between two Circles\n\n    circle1 = { cx = 5, cy = 5, radius = 5 }\n    circle2 = { cx = 7, cy = 5, radius = 5 }\n\n    circleToCircle circle1 circle2 -- True\n    -- circle1 is coliding with circle2\n",
        "type": "Collision.Hitbox.Circle -> Collision.Hitbox.Circle -> Bool"
      },
      {
        "name": "rectangleSide",
        "comment": " Detect which side of a Rectangle is colliding with another Rectangle\n\n    rect1 = { cx = 5, cy = 5, w = 10, h = 10 }\n    rect2 = { cx = 7, cy = 5, w = 10, h = 10 }\n\n    rectangleSide rect1 rect2 -- Just Right\n    -- rect1 is coliding with it's right side onto rect2\n",
        "type": "Collision.Hitbox.Rectangle -> Collision.Hitbox.Rectangle -> Maybe.Maybe Collision.Side"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Collision.Hitbox",
    "comment": " Define and create hitbox geometry to test for collisions.\nAll objects use the same coordinate system you might see in an algebra or\nphysics problem, origin (0,0) is at the center of the object,\nso they're compatible with the core Graphics.Collage coordinate system.\n\n# Basic geometry\n@docs Rectangle, rectangle, Circle, circle\n",
    "aliases": [
      {
        "name": "Circle",
        "comment": " Represents circular geometry.\nYou should only use this type for type annotations, don't depend on the constructor,\ninstead, use the circle function\n\n    -- GOOD\n    myCircle : Hitbox.Circle\n    myCircle =\n      circle 5 5 10 10\n\n    -- BAD\n    myCircle : Hitbox.Circle\n    myCircle =\n      Hitbox.Circle 5 5 10 10\n\nUsing the circle function will keep your code working if there's an\ninternal change on the Circle type definition\n",
        "args": [],
        "type": "{ cx : Float, cy : Float, radius : Float }"
      },
      {
        "name": "Rectangle",
        "comment": " Represents rectangular hitbox geometry.\nYou should only use this type for type annotations, don't depend on the constructor,\n instead, use the rectangle function\n\n    -- GOOD\n    myRectangle : Hitbox.Rectangle\n    myRectangle =\n      rectangle 5 5 10 10\n\n    -- BAD\n    myRectangle : Hitbox.Rectangle\n    myRectangle =\n      Rectangle 5 5 10 10\n\nUsing the rectangle function will keep your code working if there's an\ninternal change on the Rectangle type definition\n",
        "args": [],
        "type": "{ cx : Float, cy : Float, w : Float, h : Float }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "circle",
        "comment": " Create a Circle Hitbox from geometry (radius) and coordinates (cx, cy)\n\n    circle 5 5 10 -- a radius 10 circle centered on coordinates 5,5\n",
        "type": "Float -> Float -> Float -> Collision.Hitbox.Circle"
      },
      {
        "name": "rectangle",
        "comment": " Create a Rectangle hitbox from geometry (width and height) and coordinates (cx, cy)\n\n    rectangle 5 5 10 10\n    -- a 10 x 10 rectangle centered on coordinates 5,5\n",
        "type": "Float -> Float -> Float -> Float -> Collision.Hitbox.Rectangle"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  }
]