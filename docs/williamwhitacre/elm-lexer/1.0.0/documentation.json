[
  {
    "name": "Lexer",
    "comment": " An easy to use lexer written using `Bogdanp/elm-combine` that provides a sufficient backbone for use\nwith LR(k) parser generators, or as a standalone for simpler higher order pattern matching.\n\n# Types\n@docs Class, Lexeme, Lexer\n\n# Construction\n@docs class, lexer\n\n# Lexing\n@docs lex\n\n# Primitive\n@docs pattern, interpret\n\n",
    "aliases": [
      {
        "name": "Lexeme",
        "comment": " A lexeme, including the original string token, the interpreted lexeme, the index of\noccurrence, and the length. ",
        "args": [
          "lex"
        ],
        "type": "{ token : String, lexeme : lex, index : Int, length : Int }"
      }
    ],
    "types": [
      {
        "name": "Class",
        "comment": " A lexeme class, consisting of a regex pattern and a transducer that will interpret' the token\nand spit out an associated lexeme. ",
        "args": [
          "lex"
        ],
        "cases": []
      },
      {
        "name": "Lexer",
        "comment": " A lexer. ",
        "args": [
          "lex"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "class",
        "comment": " Create a new lexeme class from a Javascript style regex and an function to interpret a lexeme\nfrom the matched token. ",
        "type": "String -> (String -> Result.Result (List String) lex) -> Lexer.Class lex"
      },
      {
        "name": "interpret",
        "comment": " Interpret a token. ",
        "type": "Lexer.Class lex -> String -> Result.Result (List String) lex"
      },
      {
        "name": "lex",
        "comment": " Lex a string, producing a list of errors (if any) and a list of lexemes. ",
        "type": "Lexer.Lexer lex -> String -> ( List String, List (Lexer.Lexeme lex) )"
      },
      {
        "name": "lexer",
        "comment": " Create a lexer from a list of lexeme classes. ",
        "type": "List (Lexer.Class lex) -> Lexer.Lexer lex"
      },
      {
        "name": "pattern",
        "comment": " Get the pattern of a class. ",
        "type": "Lexer.Class lex -> String"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  }
]