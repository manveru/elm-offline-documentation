[{"name":"Check","comment":"Library for doing property-based testing in Elm\n\n#Constructing properties\n@docs property, property2, property3, property4, property5, property6, propertyN, property2N, property3N, property4N, property5N\n\n#Checking the properties\n@docs check","aliases":[{"name":"Property","comment":"","args":[],"type":"Result ( String, String ) ()"}],"types":[],"values":[{"name":"check","comment":"Returns the result of checking a list of given properties as a string.\n\nExample :\n\n    check [\n      property \"Identity\" (\\x -> x == x) (int 5 10),\n      property \"Double Negative is Positive\" (\\n -> -(-n) == n) (float 20 100)\n    ]\n    -- Ok, passed all tests\n\n\n    check [\n      property \"No Identity\" (\\x -> x /= x) (float 0 2)\n    ]\n    -- No Identity has failed with the following input: 0.7185091971695677","type":"List Property -> String"},{"name":"property","comment":"Create a property given a name, a condition to test and a generator\n\nExample :\n\n    doubleNegativeIsPositive =\n      property \"Double Negative is Positive\"\n               (\\number -> -(-number) == number)\n               (float -300 400)\n\nNote : This property will create 100 test cases. If you want a different\nnumber, use `propertyN`","type":"String -> (a -> Bool) -> Generator a -> Property"},{"name":"property2","comment":"Analog of `property` for functions of two arguments\n\nExample :\n\n    property2 \"Bad Addition Subtraction Inverse\"\n              (\\a b -> (a - b - 1) == (a + (-b)))\n              (float 0 100) (float 0 100)","type":"String -> (a -> b -> Bool) -> Generator a -> Generator b -> Property"},{"name":"property2N","comment":"Analog of `propertyN` for functions of two arguments","type":"Int -> String -> (a -> b -> Bool) -> Generator a -> Generator b -> Property"},{"name":"property3","comment":"Analog of `property` for functions of three arguments","type":"String -> (a -> b -> c -> Bool) -> Generator a -> Generator b -> Generator c -> Property"},{"name":"property3N","comment":"Analog of `propertyN` for functions of three arguments","type":"Int -> String -> (a -> b -> c -> Bool) -> Generator a -> Generator b -> Generator c -> Property"},{"name":"property4","comment":"Analog of `property` for functions of four arguments","type":"String -> (a -> b -> c -> d -> Bool) -> Generator a -> Generator b -> Generator c -> Generator d -> Property"},{"name":"property4N","comment":"Analog of `propertyN` for functions of four arguments","type":"Int -> String -> (a -> b -> c -> d -> Bool) -> Generator a -> Generator b -> Generator c -> Generator d -> Property"},{"name":"property5","comment":"Analog of `property` for functions of five arguments","type":"String -> (a -> b -> c -> d -> e -> Bool) -> Generator a -> Generator b -> Generator c -> Generator d -> Generator e -> Property"},{"name":"property5N","comment":"Analog of `propertyN` for functions of five arguments","type":"Int -> String -> (a -> b -> c -> d -> e -> Bool) -> Generator a -> Generator b -> Generator c -> Generator d -> Generator e -> Property"},{"name":"property6","comment":"Analog of `property` for functions of six arguments","type":"String -> (a -> b -> c -> d -> e -> f -> Bool) -> Generator a -> Generator b -> Generator c -> Generator d -> Generator e -> Generator f -> Property"},{"name":"propertyN","comment":"Create a property given a number of test cases, a name, a condition to test and a generator\n\nExample :\n\n    doubleNegativeIsPositive =\n      propertyN 10000\n                \"Double Negative is Positive\"\n                (\\number -> -(-number) == number)\n                (float -300 400)","type":"Int -> String -> (a -> Bool) -> Generator a -> Property"}],"generated-with-elm-version":"old"}]