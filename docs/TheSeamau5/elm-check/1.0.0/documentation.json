[
  {
    "name": "Check",
    "comment": "Library for doing property-based testing in Elm\n\n#Constructing properties\n@docs property, propertyN\n\n#Checking the properties\n@docs check",
    "aliases": [
      {
        "name": "Property",
        "comment": "",
        "args": [],
        "type": "Result ( String, String ) ()"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "check",
        "comment": "Returns the result of checking a list of given properties as a string.\n\nExample :\n\n    check [\n      property \"Identity\" (\\x -> x == x) (int 5 10),\n      property \"Double Negative is Positive\" (\\n -> -(-n) == n) (float 20 100)\n    ]\n    -- Ok, passed all tests\n\n\n    check [\n      property \"No Identity\" (\\x -> x /= x) (float 0 2)\n    ]\n    -- No Identity has failed with the following input: 0.7185091971695677",
        "type": "List Property -> String"
      },
      {
        "name": "property",
        "comment": "Create a property given a name, a condition to test and a generator\n\nExample :\n\n    doubleNegativeIsPositive =\n      property \"Double Negative is Positive\"\n               (\\number -> -(-number) == number)\n               (float -300 400)\n\nNote : This property will create 100 test cases. If you want a different\nnumber, use `propertyN`",
        "type": "String -> (a -> Bool) -> Generator a -> Property"
      },
      {
        "name": "propertyN",
        "comment": "Create a property given a number of test cases, a name, a condition to test and a generator\n\nExample :\n\n    doubleNegativeIsPositive =\n      propertyN 10000\n                \"Double Negative is Positive\"\n                (\\number -> -(-number) == number)\n                (float -300 400)",
        "type": "Int -> String -> (a -> Bool) -> Generator a -> Property"
      }
    ],
    "generated-with-elm-version": "old"
  }
]