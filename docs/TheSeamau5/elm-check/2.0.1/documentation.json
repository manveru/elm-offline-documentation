[
  {
    "name": "Check",
    "comment": "Library for doing property-based testing in Elm\n\n# Constructing properties\n@docs property, propertyN\n\n# Checking the properties\n@docs check, simpleCheck\n\n# Continuously checking properties\n@docs continuousCheck, deepContinuousCheck, continuousCheckEvery, deepContinuousCheckEvery\n\n# Printing and displaying results\n@docs print, printVerbose, display, displayVerbose\n\n# Properties for functions of multiple parameters\n@docs property2, property3, property4, property5, property6, property2N, property3N, property4N, property5N",
    "aliases": [
      {
        "name": "TestOutput",
        "comment": "",
        "args": [],
        "type": "List TestResult"
      },
      {
        "name": "Property",
        "comment": "",
        "args": [],
        "type": "Seed -> TestResult"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "check",
        "comment": "Check a list of properties given a random seed.\n\n    check\n      [ prop_reverseReverseList\n      , prop_numberIsOdd\n      , prop_numberIsEqualToItself\n      ]\n      (initialSeed 1)",
        "type": "List Property -> Seed -> TestOutput"
      },
      {
        "name": "continuousCheck",
        "comment": "Version of check which continuously runs every second\nand uses the current time as its seed and merges test outputs.",
        "type": "List Property -> Signal TestOutput"
      },
      {
        "name": "continuousCheckEvery",
        "comment": "Version of check which continuously runs every given time interval\nand uses the current time as its seed and merges test outputs.\n\n    continuousCheck = continuousCheckEvery second",
        "type": "Time -> List Property -> Signal TestOutput"
      },
      {
        "name": "deepContinuousCheck",
        "comment": "Version of check which continuously runs every second\nand uses the current time as its seed and accumulates all test outputs.",
        "type": "List Property -> Signal TestOutput"
      },
      {
        "name": "deepContinuousCheckEvery",
        "comment": "Version of check which continuously runs every given time interval\nand uses the current time as its seed and accumulates all test outputs.",
        "type": "Time -> List Property -> Signal TestOutput"
      },
      {
        "name": "display",
        "comment": "Display a test output as an Element.\nUseful for viewing in the browser.",
        "type": "TestOutput -> Element"
      },
      {
        "name": "displayVerbose",
        "comment": "Display a detailed test output as an Element.\nUseful for viewing in the browser.",
        "type": "TestOutput -> Element"
      },
      {
        "name": "print",
        "comment": "Print a test output as a string.",
        "type": "TestOutput -> String"
      },
      {
        "name": "printVerbose",
        "comment": "Print a test output as a detailed string.",
        "type": "TestOutput -> String"
      },
      {
        "name": "property",
        "comment": "Create a property given a name, a condition to test and a generator\nExample :\n    doubleNegativeIsPositive =\n      property \"Double Negative is Positive\"\n               (\\number -> -(-number) == number)\n               (float -300 400)\nNote : This property will create 100 test cases. If you want a different\nnumber, use `propertyN`",
        "type": "String -> (a -> Bool) -> Generator a -> Property"
      },
      {
        "name": "property2",
        "comment": "Analog of `property` for functions of two arguments\nExample :\n\n    property2 \"Bad Addition Subtraction Inverse\"\n              (\\a b -> (a - b - 1) == (a + (-b)))\n              (float 0 100) (float 0 100)",
        "type": "String -> (a -> b -> Bool) -> Generator a -> Generator b -> Property"
      },
      {
        "name": "property2N",
        "comment": "Analog of `propertyN` for functions of two arguments",
        "type": "Int -> String -> (a -> b -> Bool) -> Generator a -> Generator b -> Property"
      },
      {
        "name": "property3",
        "comment": "Analog of `property` for functions of three arguments",
        "type": "String -> (a -> b -> c -> Bool) -> Generator a -> Generator b -> Generator c -> Property"
      },
      {
        "name": "property3N",
        "comment": "Analog of `propertyN` for functions of three arguments",
        "type": "Int -> String -> (a -> b -> c -> Bool) -> Generator a -> Generator b -> Generator c -> Property"
      },
      {
        "name": "property4",
        "comment": "Analog of `property` for functions of four arguments",
        "type": "String -> (a -> b -> c -> d -> Bool) -> Generator a -> Generator b -> Generator c -> Generator d -> Property"
      },
      {
        "name": "property4N",
        "comment": "Analog of `propertyN` for functions of four arguments",
        "type": "Int -> String -> (a -> b -> c -> d -> Bool) -> Generator a -> Generator b -> Generator c -> Generator d -> Property"
      },
      {
        "name": "property5",
        "comment": "Analog of `property` for functions of five arguments",
        "type": "String -> (a -> b -> c -> d -> e -> Bool) -> Generator a -> Generator b -> Generator c -> Generator d -> Generator e -> Property"
      },
      {
        "name": "property5N",
        "comment": "Analog of `propertyN` for functions of five arguments",
        "type": "Int -> String -> (a -> b -> c -> d -> e -> Bool) -> Generator a -> Generator b -> Generator c -> Generator d -> Generator e -> Property"
      },
      {
        "name": "property6",
        "comment": "Analog of `property` for functions of six arguments",
        "type": "String -> (a -> b -> c -> d -> e -> f -> Bool) -> Generator a -> Generator b -> Generator c -> Generator d -> Generator e -> Generator f -> Property"
      },
      {
        "name": "propertyN",
        "comment": "Create a property given a number of test cases, a name, a condition to test and a generator\nExample :\n\n    doubleNegativeIsPositive =\n      propertyN 1000\n                \"Double Negative is Positive\"\n                (\\number -> -(-number) == number)\n                (float -300 400)",
        "type": "Int -> String -> (a -> Bool) -> Generator a -> Property"
      },
      {
        "name": "simpleCheck",
        "comment": "Version of check with a default initialSeed of 1",
        "type": "List Property -> TestOutput"
      }
    ],
    "generated-with-elm-version": "old"
  }
]