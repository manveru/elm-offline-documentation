[
  {
    "name": "Random.Array",
    "comment": "List of Array Generators\n\n# Generators\n@docs array, emptyArray, rangeLengthArray",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "array",
        "comment": "Generate a random array of given size given a random generator\n\n    randomLength5IntArray = array 5 (int 0 100)",
        "type": "Int -> Generator a -> Generator (Array a)"
      },
      {
        "name": "emptyArray",
        "comment": "Generator that always generates the empty array",
        "type": "Generator (Array a)"
      },
      {
        "name": "rangeLengthArray",
        "comment": "Generate a random array of random length given a minimum length and\na maximum length.",
        "type": "Int -> Int -> Generator a -> Generator (Array a)"
      }
    ],
    "generated-with-elm-version": "old"
  },
  {
    "name": "Random.Char",
    "comment": "List of Char Generators\n\n# Basic Generators\n@docs char, lowerCaseLatin, upperCaseLatin, latin, english, ascii, unicode\n\n# Unicode Generators (UTF-8)\n@ docs basicLatin, latin1Supplement, latinExtendedA, latinExtendedB, ipaExtensions, spacingModifier, combiningDiacriticalMarks, greekAndCoptic, cyrillic, cyrillicSupplement, armenian, hebrew, arabic, syriac, arabicSupplement, thaana, nko, samaritan, mandaic, arabicExtendedA, devanagari, bengali, gurmukhi, gujarati, oriya, tamil, telugu, kannada, malayalam, sinhala, thai, lao, tibetan, myanmar, georgian, hangulJamo, ethiopic, ethiopicSupplement, cherokee, unifiedCanadianAboriginalSyllabic, ogham, runic, tagalog, hanunoo, buhid, tagbanwa, khmer, mongolian, unifiedCanadianAboriginalSyllabicExtended, limbu, taiLe, newTaiLue, khmerSymbol, buginese, taiTham, balinese, sundanese, batak, lepcha, olChiki, sundaneseSupplement, vedicExtensions, phoneticExtensions, phoneticExtensionsSupplement, combiningDiacriticalMarksSupplement, latinExtendedAdditional, greekExtended, generalPunctuation, superscriptOrSubscript, currencySymbol, combiningDiacriticalMarksForSymbols, letterlikeSymbol, numberForm, arrow, mathematicalOperator, miscellaneousTechnical, controlPicture, opticalCharacterRecognition, enclosedAlphanumeric, boxDrawing, blockElement, geometricShape, miscellaneousSymbol, dingbat, miscellaneousMathematicalSymbolA, supplementalArrowA, braillePattern, supplementalArrowB, miscellaneousMathematicalSymbolB, supplementalMathematicalOperator, miscellaneousSymbolOrArrow, glagolitic, latinExtendedC, coptic, georgianSupplement, tifinagh, ethiopicExtended, cyrillicExtendedA, supplementalPunctuation, cjkRadicalSupplement, kangxiRadical, ideographicDescription, cjkSymbolOrPunctuation, hiragana, katakana, bopomofo, hangulCompatibilityJamo, kanbun, bopomofoExtended, cjkStroke, katakanaPhoneticExtension, enclosedCJKLetterOrMonth, cjkCompatibility, cjkUnifiedIdeographExtensionA, yijingHexagramSymbol, cjkUnifiedIdeograph, yiSyllable, yiRadical, lisu, vai, cyrillicExtendedB, bamum, modifierToneLetter, latinExtendedD, sylotiNagri, commonIndicNumberForm, phagsPa, saurashtra, devanagariExtended, kayahLi, rejang, hangulJamoExtendedA, javanese, cham, myanmarExtendedA, taiViet, meeteiMayekExtension, ethiopicExtendedA, meeteiMayek, hangulSyllable, hangulJamoExtendedB, highSurrogate, highPrivateUseSurrogate, lowSurrogate, privateUseArea, cjkCompatibilityIdeograph, alphabeticPresentationForm, arabicPresentationFormA, variationSelector, verticalForm, combiningHalfMark, cjkCompatibilityForm, smallFormVariant, arabicPresentationFormB, halfwidthOrFullwidthForm, special, linearBSyllable, linearBIdeogram, aegeanNumber, ancientGreekNumber, ancientSymbol, phaistosDisc, lycian, carian, oldItalic, gothic, ugaritic, oldPersian, deseret, shavian, osmanya, cypriotSyllable, imperialAramaic, phoenician, lydian, meroiticHieroglyph, meroiticCursive, kharoshthi, oldSouthArabian, avestan, inscriptionalParthian, inscriptionalPahlavi, oldTurkic, rumiNumericalSymbol, brahmi, kaithi, soraSompeng, chakma, sharada, takri, cuneiform, cuneiformNumberOrPunctuation, egyptianHieroglyph, bamumSupplement, miao, kanaSupplement, byzantineMusicalSymbol, musicalSymbol, ancientGreekMusicalNotationSymbol, taiXuanJingSymbol, countingRodNumeral, mathematicalAlphanumericSymbol, arabicMathematicalAlphabeticSymbol, mahjongTile, dominoTile, playingCard, enclosedAlphanumericSupplement, enclosedIdeographicSupplement, miscellaneousSymbolOrPictograph, emoticon, transportOrMapSymbol, alchemicalSymbol, cjkUnifiedIdeographExtensionB, cjkUnifiedIdeographExtensionC, cjkUnifiedIdeographExtensionD, cjkCompatibilityIdeographSupplement, tag, variationSelectorSupplement, supplementaryPrivateUseAreaA, supplementaryPrivateUseAreaB",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "aegeanNumber",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "alchemicalSymbol",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "alphabeticPresentationForm",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "ancientGreekMusicalNotationSymbol",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "ancientGreekNumber",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "ancientSymbol",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "arabic",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "arabicExtendedA",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "arabicMathematicalAlphabeticSymbol",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "arabicPresentationFormA",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "arabicPresentationFormB",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "arabicSupplement",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "armenian",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "arrow",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "ascii",
        "comment": "Generate a random ASCII Character",
        "type": "Generator Char"
      },
      {
        "name": "avestan",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "balinese",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "bamum",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "bamumSupplement",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "basicLatin",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "batak",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "bengali",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "blockElement",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "bopomofo",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "bopomofoExtended",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "boxDrawing",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "brahmi",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "braillePattern",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "buginese",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "buhid",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "byzantineMusicalSymbol",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "carian",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "chakma",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "cham",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "char",
        "comment": "Generate a random character within a certain keyCode range\n\n    lowerCaseLetter = char 65 90",
        "type": "Int -> Int -> Generator Char"
      },
      {
        "name": "cherokee",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "cjkCompatibility",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "cjkCompatibilityForm",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "cjkCompatibilityIdeograph",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "cjkCompatibilityIdeographSupplement",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "cjkRadicalSupplement",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "cjkStroke",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "cjkSymbolOrPunctuation",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "cjkUnifiedIdeograph",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "cjkUnifiedIdeographExtensionA",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "cjkUnifiedIdeographExtensionB",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "cjkUnifiedIdeographExtensionC",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "cjkUnifiedIdeographExtensionD",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "combiningDiacriticalMarks",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "combiningDiacriticalMarksForSymbols",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "combiningDiacriticalMarksSupplement",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "combiningHalfMark",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "commonIndicNumberForm",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "controlPicture",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "coptic",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "countingRodNumeral",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "cuneiform",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "cuneiformNumberOrPunctuation",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "currencySymbol",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "cypriotSyllable",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "cyrillic",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "cyrillicExtendedA",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "cyrillicExtendedB",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "cyrillicSupplement",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "deseret",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "devanagari",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "devanagariExtended",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "dingbat",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "dominoTile",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "egyptianHieroglyph",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "emoticon",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "enclosedAlphanumeric",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "enclosedAlphanumericSupplement",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "enclosedCJKLetterOrMonth",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "enclosedIdeographicSupplement",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "english",
        "comment": "Generate a random English Letter (alias for `latin`)",
        "type": "Generator Char"
      },
      {
        "name": "ethiopic",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "ethiopicExtended",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "ethiopicExtendedA",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "ethiopicSupplement",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "generalPunctuation",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "geometricShape",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "georgian",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "georgianSupplement",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "glagolitic",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "gothic",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "greekAndCoptic",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "greekExtended",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "gujarati",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "gurmukhi",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "halfwidthOrFullwidthForm",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "hangulCompatibilityJamo",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "hangulJamo",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "hangulJamoExtendedA",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "hangulJamoExtendedB",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "hangulSyllable",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "hanunoo",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "hebrew",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "highPrivateUseSurrogate",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "highSurrogate",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "hiragana",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "ideographicDescription",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "imperialAramaic",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "inscriptionalPahlavi",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "inscriptionalParthian",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "ipaExtensions",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "javanese",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "kaithi",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "kanaSupplement",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "kanbun",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "kangxiRadical",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "kannada",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "katakana",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "katakanaPhoneticExtension",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "kayahLi",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "kharoshthi",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "khmer",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "khmerSymbol",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "lao",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "latin",
        "comment": "Generate a random Latin Letter",
        "type": "Generator Char"
      },
      {
        "name": "latin1Supplement",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "latinExtendedA",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "latinExtendedAdditional",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "latinExtendedB",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "latinExtendedC",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "latinExtendedD",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "lepcha",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "letterlikeSymbol",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "limbu",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "linearBIdeogram",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "linearBSyllable",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "lisu",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "lowSurrogate",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "lowerCaseLatin",
        "comment": "Generate a random lower-case Latin Letter",
        "type": "Generator Char"
      },
      {
        "name": "lycian",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "lydian",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "mahjongTile",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "malayalam",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "mandaic",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "mathematicalAlphanumericSymbol",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "mathematicalOperator",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "meeteiMayek",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "meeteiMayekExtension",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "meroiticCursive",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "meroiticHieroglyph",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "miao",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "miscellaneousMathematicalSymbolA",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "miscellaneousMathematicalSymbolB",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "miscellaneousSymbol",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "miscellaneousSymbolOrArrow",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "miscellaneousSymbolOrPictograph",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "miscellaneousTechnical",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "modifierToneLetter",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "mongolian",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "musicalSymbol",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "myanmar",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "myanmarExtendedA",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "newTaiLue",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "nko",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "numberForm",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "ogham",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "olChiki",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "oldItalic",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "oldPersian",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "oldSouthArabian",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "oldTurkic",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "opticalCharacterRecognition",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "oriya",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "osmanya",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "phagsPa",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "phaistosDisc",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "phoenician",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "phoneticExtensions",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "phoneticExtensionsSupplement",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "playingCard",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "privateUseArea",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "rejang",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "rumiNumericalSymbol",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "runic",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "samaritan",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "saurashtra",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "sharada",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "shavian",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "sinhala",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "smallFormVariant",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "soraSompeng",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "spacingModifier",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "special",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "sundanese",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "sundaneseSupplement",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "superscriptOrSubscript",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "supplementalArrowA",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "supplementalArrowB",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "supplementalMathematicalOperator",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "supplementalPunctuation",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "supplementaryPrivateUseAreaA",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "supplementaryPrivateUseAreaB",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "sylotiNagri",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "syriac",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "tag",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "tagalog",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "tagbanwa",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "taiLe",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "taiTham",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "taiViet",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "taiXuanJingSymbol",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "takri",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "tamil",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "telugu",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "thaana",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "thai",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "tibetan",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "tifinagh",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "transportOrMapSymbol",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "ugaritic",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "unicode",
        "comment": "Generate a random Character in the valid unicode range.\nNote: This can produce garbage values as unicode doesn't use all valid values.\nTo test for specific languages and character sets, use the appropriate one\nfrom the list.",
        "type": "Generator Char"
      },
      {
        "name": "unifiedCanadianAboriginalSyllabic",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "unifiedCanadianAboriginalSyllabicExtended",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "upperCaseLatin",
        "comment": "Generate a random upper-case Latin Letter",
        "type": "Generator Char"
      },
      {
        "name": "vai",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "variationSelector",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "variationSelectorSupplement",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "vedicExtensions",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "verticalForm",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "yiRadical",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "yiSyllable",
        "comment": "",
        "type": "Generator Char"
      },
      {
        "name": "yijingHexagramSymbol",
        "comment": "",
        "type": "Generator Char"
      }
    ],
    "generated-with-elm-version": "old"
  },
  {
    "name": "Random.Color",
    "comment": "List of Color Generators\n\n# Generators\n@docs color, rgb, rgba, hsl, hsla, greyscale, grayscale, red, green, blue",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "blue",
        "comment": "Generate a random shade of blue",
        "type": "Generator Color.Color"
      },
      {
        "name": "color",
        "comment": "Generate a random color",
        "type": "Generator Color.Color"
      },
      {
        "name": "grayscale",
        "comment": "Alias for greyscale",
        "type": "Generator Color.Color"
      },
      {
        "name": "green",
        "comment": "Generate a random shade of green",
        "type": "Generator Color.Color"
      },
      {
        "name": "greyscale",
        "comment": "Generate a random shade of grey",
        "type": "Generator Color.Color"
      },
      {
        "name": "hsl",
        "comment": "Generate a random color which randomizes hsl values",
        "type": "Generator Color.Color"
      },
      {
        "name": "hsla",
        "comment": "Generate a random color which randomizes hsla values",
        "type": "Generator Color.Color"
      },
      {
        "name": "red",
        "comment": "Generate a random shade of red",
        "type": "Generator Color.Color"
      },
      {
        "name": "rgb",
        "comment": "Generate a random color which randomizes rgb values",
        "type": "Generator Color.Color"
      },
      {
        "name": "rgba",
        "comment": "Generate a random color which randomizes rgba values",
        "type": "Generator Color.Color"
      }
    ],
    "generated-with-elm-version": "old"
  },
  {
    "name": "Random.Date",
    "comment": "List of date Generators\n\n# Generators\n@docs date, day, month, year, hour, hour24, hour12, minute, second",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "date",
        "comment": "Generate a random date given a start date and an end date.",
        "type": "Date -> Date -> Generator Date"
      },
      {
        "name": "day",
        "comment": "Generate a random day of the week.",
        "type": "Generator Day"
      },
      {
        "name": "hour",
        "comment": "Generate a random hour (random int between 0 and 23 inclusive)",
        "type": "Generator Int"
      },
      {
        "name": "hour12",
        "comment": "Generate a random 12-hour day hour (random int between 0 and 11 inclusive)",
        "type": "Generator Int"
      },
      {
        "name": "hour24",
        "comment": "Generate a random 24-hour day hour (random int between 0 and 23 inclusive)",
        "type": "Generator Int"
      },
      {
        "name": "minute",
        "comment": "Generate a random minute (random int between 0 and 59 inclusive)",
        "type": "Generator Int"
      },
      {
        "name": "month",
        "comment": "Generate a random month of the year.",
        "type": "Generator Month"
      },
      {
        "name": "second",
        "comment": "Generate a random second (random int between 0 and 59 inclusive)",
        "type": "Generator Int"
      },
      {
        "name": "year",
        "comment": "Generate a random year given a start year and end year (alias for `int`)",
        "type": "Int -> Int -> Generator Int"
      }
    ],
    "generated-with-elm-version": "old"
  },
  {
    "name": "Random.Dict",
    "comment": "List of Dict Generators\n\n# Generators\n@docs dict, emptyDict, rangeLengthDict",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "dict",
        "comment": "Generate a random dict with given length, key generator, and value generator\n\n    randomLength10StringIntDict = dict 10 (englishWord 10) (int 0 100)",
        "type": "Int -> Generator comparable -> Generator value -> Generator (Dict comparable value)"
      },
      {
        "name": "emptyDict",
        "comment": "Generator that always generates the empty dict",
        "type": "Generator (Dict comparable value)"
      },
      {
        "name": "rangeLengthDict",
        "comment": "Generate a random dict of random length given a minimum length and\na maximum length.",
        "type": "Int -> Int -> Generator comparable -> Generator value -> Generator (Dict comparable value)"
      }
    ],
    "generated-with-elm-version": "old"
  },
  {
    "name": "Random.Extra",
    "comment": "Module providing extra functionality to the core Random module.\n\n# Constant Generators\n@docs constant, emptyList\n\n# Boolean Generator\n@docs bool\n\n# Integer Generators\n@docs anyInt, positiveInt, negativeInt, intGreaterThan, intLessThan\n\n# Float Generators\n@docs anyFloat, positiveFloat, negativeFloat, floatGreaterThan, floatLessThan, probability, negativeProbability, absoluteProbability\n\n# Function Generators\n@docs func, func2, func3, func4, func5, func6\n\n# Operations on Function Generators\n@docs apply, (<<<), (>>>)\n\n# Select\n@docs select, selectWithDefault\n\n# Maps\n@docs map, map2, map3, map4, map5, map6, mapConstraint\n\n# Flat Maps\n@docs flatMap, flatMap2, flatMap3, flatMap4, flatMap5, flatMap6\n\n# Zips\n@docs zip, zip3, zip4, zip5, zip6\n\n# Chaining Generators\n@docs andThen\n\n# Merging Generators\n@docs merge\n\n# Generate Functions\n@docs quickGenerate, cappedGenerateUntil, generateIterativelyUntil, generateIterativelySuchThat, generateUntil, maybeGenerateSuchThat, generateSuchThat",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "<<<",
        "comment": "Compose two function generators. Analogous to `<<`",
        "type": "Generator (b -> c) -> Generator (a -> b) -> Generator (a -> c)",
        "associativity": "right",
        "precedence": 9
      },
      {
        "name": ">>>",
        "comment": "Compose two function generators. Analogous to `>>`",
        "type": "Generator (a -> b) -> Generator (b -> c) -> Generator (a -> c)",
        "associativity": "left",
        "precedence": 9
      },
      {
        "name": "absoluteProbability",
        "comment": "Generator that generates a float between - 1 and 1",
        "type": "Generator Float"
      },
      {
        "name": "andThen",
        "comment": "",
        "type": "Generator a -> (a -> Generator b) -> Generator b"
      },
      {
        "name": "anyFloat",
        "comment": "Generator that generates any float",
        "type": "Generator Float"
      },
      {
        "name": "anyInt",
        "comment": "Generator that generates any int that can be generate by the random generator algorithm.",
        "type": "Generator Int"
      },
      {
        "name": "apply",
        "comment": "",
        "type": "Generator (a -> b) -> Generator a -> Generator b"
      },
      {
        "name": "bool",
        "comment": "Random Bool generator",
        "type": "Generator Bool"
      },
      {
        "name": "cappedGenerateUntil",
        "comment": "",
        "type": "Int -> (a -> Bool) -> Generator a -> Seed -> List a"
      },
      {
        "name": "constant",
        "comment": "Create a generator that always returns the same value.",
        "type": "a -> Generator a"
      },
      {
        "name": "emptyList",
        "comment": "Generator that always returns the empty list.",
        "type": "Generator (List a)"
      },
      {
        "name": "flatMap",
        "comment": "",
        "type": "(a -> Generator b) -> Generator a -> Generator b"
      },
      {
        "name": "flatMap2",
        "comment": "",
        "type": "(a -> b -> Generator c) -> Generator a -> Generator b -> Generator c"
      },
      {
        "name": "flatMap3",
        "comment": "",
        "type": "(a -> b -> c -> Generator d) -> Generator a -> Generator b -> Generator c -> Generator d"
      },
      {
        "name": "flatMap4",
        "comment": "",
        "type": "(a -> b -> c -> d -> Generator e) -> Generator a -> Generator b -> Generator c -> Generator d -> Generator e"
      },
      {
        "name": "flatMap5",
        "comment": "",
        "type": "(a -> b -> c -> d -> e -> Generator f) -> Generator a -> Generator b -> Generator c -> Generator d -> Generator e -> Generator f"
      },
      {
        "name": "flatMap6",
        "comment": "",
        "type": "(a -> b -> c -> d -> e -> f -> Generator g) -> Generator a -> Generator b -> Generator c -> Generator d -> Generator e -> Generator f -> Generator g"
      },
      {
        "name": "floatGreaterThan",
        "comment": "Generator that generates a float greater than a given float",
        "type": "Float -> Generator Float"
      },
      {
        "name": "floatLessThan",
        "comment": "Generator that generates a float less than a given float",
        "type": "Float -> Generator Float"
      },
      {
        "name": "func",
        "comment": "Generates a random function of one argument given a generator for the output.",
        "type": "Generator b -> Generator (a -> b)"
      },
      {
        "name": "func2",
        "comment": "Generates a random function of two arguments given a generator for the output.",
        "type": "Generator c -> Generator (a -> b -> c)"
      },
      {
        "name": "func3",
        "comment": "Generates a random function of three arguments given a generator for the output.",
        "type": "Generator d -> Generator (a -> b -> c -> d)"
      },
      {
        "name": "func4",
        "comment": "Generates a random function of four arguments given a generator for the output.",
        "type": "Generator e -> Generator (a -> b -> c -> d -> e)"
      },
      {
        "name": "func5",
        "comment": "Generates a random function of five arguments given a generator for the output.",
        "type": "Generator f -> Generator (a -> b -> c -> d -> e -> f)"
      },
      {
        "name": "func6",
        "comment": "Generates a random function of six arguments given a generator for the output.",
        "type": "Generator g -> Generator (a -> b -> c -> d -> e -> f -> g)"
      },
      {
        "name": "generateIterativelySuchThat",
        "comment": "",
        "type": "Int -> (a -> Bool) -> (Int -> Generator a) -> Seed -> List a"
      },
      {
        "name": "generateIterativelyUntil",
        "comment": "",
        "type": "Int -> (a -> Bool) -> (Int -> Generator a) -> Seed -> List a"
      },
      {
        "name": "generateSuchThat",
        "comment": "",
        "type": "(a -> Bool) -> Generator a -> Seed -> ( a, Seed )"
      },
      {
        "name": "generateUntil",
        "comment": "",
        "type": "(a -> Bool) -> Generator a -> Seed -> List a"
      },
      {
        "name": "intGreaterThan",
        "comment": "Generator that generates an int greater than a given int",
        "type": "Int -> Generator Int"
      },
      {
        "name": "intLessThan",
        "comment": "Generator that generates an int less than a given int",
        "type": "Int -> Generator Int"
      },
      {
        "name": "map",
        "comment": "",
        "type": "(a -> b) -> Generator a -> Generator b"
      },
      {
        "name": "map2",
        "comment": "",
        "type": "(a -> b -> c) -> Generator a -> Generator b -> Generator c"
      },
      {
        "name": "map3",
        "comment": "",
        "type": "(a -> b -> c -> d) -> Generator a -> Generator b -> Generator c -> Generator d"
      },
      {
        "name": "map4",
        "comment": "",
        "type": "(a -> b -> c -> d -> e) -> Generator a -> Generator b -> Generator c -> Generator d -> Generator e"
      },
      {
        "name": "map5",
        "comment": "",
        "type": "(a -> b -> c -> d -> e -> f) -> Generator a -> Generator b -> Generator c -> Generator d -> Generator e -> Generator f"
      },
      {
        "name": "map6",
        "comment": "",
        "type": "(a -> b -> c -> d -> e -> f -> g) -> Generator a -> Generator b -> Generator c -> Generator d -> Generator e -> Generator f -> Generator g"
      },
      {
        "name": "maybeGenerateSuchThat",
        "comment": "",
        "type": "Int -> (a -> Bool) -> Generator a -> Seed -> Maybe ( a, Seed )"
      },
      {
        "name": "merge",
        "comment": "",
        "type": "Generator a -> Generator a -> Generator a"
      },
      {
        "name": "negativeFloat",
        "comment": "Generator that generates any negative float",
        "type": "Generator Float"
      },
      {
        "name": "negativeInt",
        "comment": "Generator that generates a negative int",
        "type": "Generator Int"
      },
      {
        "name": "negativeProbability",
        "comment": "Generator that generates a float between -1 and 0",
        "type": "Generator Float"
      },
      {
        "name": "positiveFloat",
        "comment": "Generator that generates any positive float",
        "type": "Generator Float"
      },
      {
        "name": "positiveInt",
        "comment": "Generator that generates a positive int",
        "type": "Generator Int"
      },
      {
        "name": "probability",
        "comment": "Generator that generates a float between 0 and 1",
        "type": "Generator Float"
      },
      {
        "name": "quickGenerate",
        "comment": "",
        "type": "Generator a -> Seed -> a"
      },
      {
        "name": "select",
        "comment": "Generator that randomly selects an element from a list.",
        "type": "List a -> Generator (Maybe a)"
      },
      {
        "name": "selectWithDefault",
        "comment": "Generator that randomly selects an element from a list with a default value\n(in case you pass in an empty list).",
        "type": "a -> List a -> Generator a"
      },
      {
        "name": "zip",
        "comment": "",
        "type": "Generator a -> Generator b -> Generator ( a, b )"
      },
      {
        "name": "zip3",
        "comment": "",
        "type": "Generator a -> Generator b -> Generator c -> Generator ( a, b, c )"
      },
      {
        "name": "zip4",
        "comment": "",
        "type": "Generator a -> Generator b -> Generator c -> Generator d -> Generator ( a, b, c, d )"
      },
      {
        "name": "zip5",
        "comment": "",
        "type": "Generator a -> Generator b -> Generator c -> Generator d -> Generator e -> Generator ( a, b, c, d, e )"
      },
      {
        "name": "zip6",
        "comment": "",
        "type": "Generator a -> Generator b -> Generator c -> Generator d -> Generator e -> Generator f -> Generator ( a, b, c, d, e, f )"
      }
    ],
    "generated-with-elm-version": "old"
  },
  {
    "name": "Random.Keyboard",
    "comment": "List of Keyboard Generators\n\n# Generators\n@docs arrows, keyCode, numberKey, letterKey, arrowKey, numpadKey, fKey",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "arrowKey",
        "comment": "Generate a random arrow key input",
        "type": "Generator KeyCode"
      },
      {
        "name": "arrows",
        "comment": "Generate random Keyboard arrows input",
        "type": "Generator { x : Int, y : Int }"
      },
      {
        "name": "fKey",
        "comment": "Generate a random fKey input",
        "type": "Generator KeyCode"
      },
      {
        "name": "keyCode",
        "comment": "Generate a random Keyboard input.",
        "type": "Generator KeyCode"
      },
      {
        "name": "letterKey",
        "comment": "Generate a random letter key input",
        "type": "Generator KeyCode"
      },
      {
        "name": "numberKey",
        "comment": "Generate a random number key input",
        "type": "Generator KeyCode"
      },
      {
        "name": "numpadKey",
        "comment": "Generate a random numpadKey input",
        "type": "Generator KeyCode"
      }
    ],
    "generated-with-elm-version": "old"
  },
  {
    "name": "Random.Mouse",
    "comment": "List of Mouse Generators\n\n# Generators\n@docs mousePosition, mouseX, mouseY, leftMouseDown",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "leftMouseDown",
        "comment": "Generate a random instance of left mouse down (alias for `bool`)",
        "type": "Generator Bool"
      },
      {
        "name": "mousePosition",
        "comment": "Generate a random mouse position given a screen width and a screen height",
        "type": "Int -> Int -> Generator ( Int, Int )"
      },
      {
        "name": "mouseX",
        "comment": "Generate a random mouseX value given a screen width",
        "type": "Int -> Generator Int"
      },
      {
        "name": "mouseY",
        "comment": "Generate a random mouseY value given a screen height",
        "type": "Int -> Generator Int"
      }
    ],
    "generated-with-elm-version": "old"
  },
  {
    "name": "Random.String",
    "comment": "List of String Generators\n\n# Simple Generators\n@docs string, word, englishWord, capitalizedEnglishWord\n\n# Random Length String Generators\n@docs rangeLengthString, anyString, rangeLengthWord, rangeLengthEnglishWord, anyEnglishWord",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "anyCapitalizedEnglishWord",
        "comment": "Generate a random capitalized word with english characters of random length\nbetween 1 34.\nAside: 34 was picked as a maximum as \"supercalifragilisticexpialidocious\"\nis considered the longest commonly used word and is 34 character long.\nLonger words do occur, especially in scientific contexts. In which case, consider\nusing `rangeLengthEnglishWord` for more granular control.",
        "type": "Generator String"
      },
      {
        "name": "anyEnglishWord",
        "comment": "Generate a random lowercase word with english characters of random length\nbetween 1 34.\nAside: 34 was picked as a maximum as \"supercalifragilisticexpialidocious\"\nis considered the longest commonly used word and is 34 character long.\nLonger words do occur, especially in scientific contexts. In which case, consider\nusing `rangeLengthEnglishWord` for more granular control.",
        "type": "Generator String"
      },
      {
        "name": "anyString",
        "comment": "Generates a random string of random length between 0 and `maxInt`.\nNote: Will more often than note produce gigantic strings. Use for testing functions\non strings. Not appropriate for testing layout. Please use the appropriate generators\nfrom the list such as `string`, `word`, `rangeLengthString`, or `rangeLengthWord`.",
        "type": "Generator String"
      },
      {
        "name": "capitalizedEnglishWord",
        "comment": "Generate a random capitalized word with english characters of a given length.\nNote: This just generates a random string using the letters in english, so there\nare no guarantees that the result be an actual english word.",
        "type": "Int -> Generator String"
      },
      {
        "name": "englishWord",
        "comment": "Generate a random lowercase word with english characters of a given length.\nNote: This just generates a random string using the letters in english, so there\nare no guarantees that the result be an actual english word.",
        "type": "Int -> Generator String"
      },
      {
        "name": "rangeLengthCapitalizedEnglishWord",
        "comment": "Generate a random capitalized word with english characters of random length\ngiven a minimum length and a maximum length.",
        "type": "Int -> Int -> Generator String"
      },
      {
        "name": "rangeLengthEnglishWord",
        "comment": "Generate a random lowercase word with english characters of random length\ngiven a minimum length and maximum length.",
        "type": "Int -> Int -> Generator String"
      },
      {
        "name": "rangeLengthString",
        "comment": "Generates a random string of random length given the minimum length\nand maximum length and a given character generator.",
        "type": "Int -> Int -> Generator Char -> Generator String"
      },
      {
        "name": "rangeLengthWord",
        "comment": "Alias for `rangeLengthString`",
        "type": "Int -> Int -> Generator Char -> Generator String"
      },
      {
        "name": "string",
        "comment": "Generate a random string of a given length with a given character generator\n\n    fiveLetterEnglishWord = string 5 english",
        "type": "Int -> Generator Char -> Generator String"
      },
      {
        "name": "word",
        "comment": "Generate a random word of a given length with a given character generator\n(alias for `string`)",
        "type": "Int -> Generator Char -> Generator String"
      }
    ],
    "generated-with-elm-version": "old"
  },
  {
    "name": "Random.Touch",
    "comment": "List of Touch Generators\n\n# Generators\n@docs tap, touch",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "tap",
        "comment": "Generate a random tap given a screen width and screen height",
        "type": "Int -> Int -> Generator { x : Int, y : Int }"
      },
      {
        "name": "touch",
        "comment": "Generate a random touch given a screen width and screen height",
        "type": "Int -> Int -> Generator Touch"
      }
    ],
    "generated-with-elm-version": "old"
  },
  {
    "name": "Random.Window",
    "comment": "List of window Generators\n\n# Generators\n@docs windowDimensions, windowWidth, windowHeight",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "windowDimensions",
        "comment": "Generate a random tuple of window dimensions given a minimum screen width, a maximum screen width, a minimum screen height, a maximum screen height",
        "type": "Int -> Int -> Int -> Int -> Generator ( Int, Int )"
      },
      {
        "name": "windowHeight",
        "comment": "Generate a random width height value given a minimum screen height and a maximum screen height",
        "type": "Int -> Int -> Generator Int"
      },
      {
        "name": "windowWidth",
        "comment": "Generate a random window width value given a minimum screen width and a maximum screen width",
        "type": "Int -> Int -> Generator Int"
      }
    ],
    "generated-with-elm-version": "old"
  }
]