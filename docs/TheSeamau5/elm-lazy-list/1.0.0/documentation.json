[
  {
    "name": "Lazy.List",
    "comment": "Lazy list implementation.\n\n# Definition\n@docs LazyList\n\n# Basics\n@docs empty, isEmpty, length, member\n\n# Query List\n@docs head, tail, nth\n\n# Common List operations\n@docs cons, map, reduce, flatten, flatMap, append, reverse, take, takeWhile, drop, dropWhile, unique\n\n# Infinite List producers\n@docs repeat, cycle, iterate, numbers\n\n# Folds\n@docs foldl, foldr, sum, product\n\n# Chaining Lists\n@docs andMap, andThen\n\n# All the maps\n@docs map2, map3, map4, map5\n\n# All the zips\n@docs zip, zip3, zip4, zip5\n\n# Conversions\n@docs toList, fromList, toArray, fromArray\n\n# Useful Transducers\n@docs mapping, keeping, dropping",
    "aliases": [],
    "types": [
      {
        "name": "LazyList",
        "comment": "",
        "args": [
          "a"
        ],
        "cases": [
          [
            "Nil",
            []
          ],
          [
            "Cons",
            [
              "a",
              "() -> LazyList a"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "andMap",
        "comment": "This is useful when you want a version of `mapN` that is greater than 5.",
        "type": "LazyList (a -> b) -> LazyList a -> LazyList b"
      },
      {
        "name": "andThen",
        "comment": "Chain a list and a list constructor.",
        "type": "LazyList a -> (a -> LazyList b) -> LazyList b"
      },
      {
        "name": "append",
        "comment": "Append two lists together.",
        "type": "LazyList a -> LazyList a -> LazyList a"
      },
      {
        "name": "cons",
        "comment": "Push or cons a value onto the front of a list.",
        "type": "a -> LazyList a -> LazyList a"
      },
      {
        "name": "cycle",
        "comment": "Cycle a list n times",
        "type": "Int -> LazyList a -> LazyList a"
      },
      {
        "name": "drop",
        "comment": "Drop n values from a list.",
        "type": "Int -> LazyList a -> LazyList a"
      },
      {
        "name": "dropIf",
        "comment": "Drop elements from list only if they satisfy a given predicate.",
        "type": "(a -> Bool) -> LazyList a -> LazyList a"
      },
      {
        "name": "dropWhile",
        "comment": "Drop values from a list iteratively as long as the predicate is satisfied",
        "type": "(a -> Bool) -> LazyList a -> LazyList a"
      },
      {
        "name": "dropping",
        "comment": "Dropping transducer.\nAnalogous to `dropIf`.",
        "type": "(a -> Bool) -> (a -> b -> b) -> a -> b -> b"
      },
      {
        "name": "empty",
        "comment": "The empty list.",
        "type": "LazyList a"
      },
      {
        "name": "flatMap",
        "comment": "Map a list constructor onto a list and flatten the result.",
        "type": "(a -> LazyList b) -> LazyList a -> LazyList b"
      },
      {
        "name": "flatten",
        "comment": "Flatten a list of lists.",
        "type": "LazyList (LazyList a) -> LazyList a"
      },
      {
        "name": "foldl",
        "comment": "Fold from the left. Alias for `reduce`.",
        "type": "(a -> b -> b) -> b -> LazyList a -> b"
      },
      {
        "name": "foldr",
        "comment": "Fold from the right.",
        "type": "(a -> b -> b) -> b -> LazyList a -> b"
      },
      {
        "name": "fromArray",
        "comment": "Convert an array to a lazy list.",
        "type": "Array a -> LazyList a"
      },
      {
        "name": "fromList",
        "comment": "Convert a list to a lazy list.",
        "type": "List a -> LazyList a"
      },
      {
        "name": "head",
        "comment": "Return the first element of a list. This returns `Nothing` if the list\nis empty.",
        "type": "LazyList a -> Maybe a"
      },
      {
        "name": "isEmpty",
        "comment": "",
        "type": "LazyList a -> Bool"
      },
      {
        "name": "iterate",
        "comment": "Produce an infinite list of repeated applications of a function on a value.",
        "type": "(a -> a) -> a -> LazyList a"
      },
      {
        "name": "keepIf",
        "comment": "Keep elements in list only if they satisfy a given predicate.",
        "type": "(a -> Bool) -> LazyList a -> LazyList a"
      },
      {
        "name": "keeping",
        "comment": "Keeping transducer.\nAnalogous to `keepIf`.",
        "type": "(a -> Bool) -> (a -> b -> b) -> a -> b -> b"
      },
      {
        "name": "length",
        "comment": "",
        "type": "LazyList a -> Int"
      },
      {
        "name": "map",
        "comment": "Map a function onto a list.",
        "type": "(a -> b) -> LazyList a -> LazyList b"
      },
      {
        "name": "map2",
        "comment": "",
        "type": "(a -> b -> c) -> LazyList a -> LazyList b -> LazyList c"
      },
      {
        "name": "map3",
        "comment": "",
        "type": "(a -> b -> c -> d) -> LazyList a -> LazyList b -> LazyList c -> LazyList d"
      },
      {
        "name": "map4",
        "comment": "",
        "type": "(a -> b -> c -> d -> e) -> LazyList a -> LazyList b -> LazyList c -> LazyList d -> LazyList e"
      },
      {
        "name": "map5",
        "comment": "",
        "type": "(a -> b -> c -> d -> e -> f) -> LazyList a -> LazyList b -> LazyList c -> LazyList d -> LazyList e -> LazyList f"
      },
      {
        "name": "mapping",
        "comment": "Mapping transducer.\nMap a function on a reducer.",
        "type": "(a -> b) -> (b -> c -> c) -> a -> c -> c"
      },
      {
        "name": "member",
        "comment": "Test if a value is a member of a list",
        "type": "a -> LazyList a -> Bool"
      },
      {
        "name": "nth",
        "comment": "Get the nth value from a lazy list.\nNote : nth considers lists to be 1-indexed.",
        "type": "Int -> LazyList a -> Maybe a"
      },
      {
        "name": "numbers",
        "comment": "An infinite numbers of integers starting at 1.",
        "type": "LazyList number"
      },
      {
        "name": "product",
        "comment": "",
        "type": "LazyList number -> number"
      },
      {
        "name": "reduce",
        "comment": "Analogous to `List.foldl`. Reduce a list with a binary operation and an\ninitial value.",
        "type": "(a -> b -> b) -> b -> LazyList a -> b"
      },
      {
        "name": "repeat",
        "comment": "Produce an infinite list of a certain value.",
        "type": "a -> LazyList a"
      },
      {
        "name": "reverse",
        "comment": "Reverse a list.",
        "type": "LazyList a -> LazyList a"
      },
      {
        "name": "sum",
        "comment": "",
        "type": "LazyList number -> number"
      },
      {
        "name": "tail",
        "comment": "Get the tail of a list. This returns `Nothing` if the list is empty.",
        "type": "LazyList a -> Maybe (LazyList a)"
      },
      {
        "name": "take",
        "comment": "Take n values from a list.",
        "type": "Int -> LazyList a -> LazyList a"
      },
      {
        "name": "takeWhile",
        "comment": "Take values from a list iteratively as long as the predicate is satisfied.",
        "type": "(a -> Bool) -> LazyList a -> LazyList a"
      },
      {
        "name": "toArray",
        "comment": "Convert a lazy list to an array.",
        "type": "LazyList a -> Array a"
      },
      {
        "name": "toList",
        "comment": "Convert a lazy list to a regular list.",
        "type": "LazyList a -> List a"
      },
      {
        "name": "unique",
        "comment": "Remove duplicates from a list.",
        "type": "LazyList a -> LazyList a"
      },
      {
        "name": "zip",
        "comment": "",
        "type": "LazyList a -> LazyList b -> LazyList ( a, b )"
      },
      {
        "name": "zip3",
        "comment": "",
        "type": "LazyList a -> LazyList b -> LazyList c -> LazyList ( a, b, c )"
      },
      {
        "name": "zip4",
        "comment": "",
        "type": "LazyList a -> LazyList b -> LazyList c -> LazyList d -> LazyList ( a, b, c, d )"
      },
      {
        "name": "zip5",
        "comment": "",
        "type": "LazyList a -> LazyList b -> LazyList c -> LazyList d -> LazyList e -> LazyList ( a, b, c, d, e )"
      }
    ],
    "generated-with-elm-version": "old"
  }
]