[
  {
    "name": "Flex",
    "comment": "Companion library to elm-html. Helps with flexbox layout\n\n# Basic layout containers\n@docs row, column, rowReverse, columnReverse\n\n# Flexing individual elements\n@docs flex, flexN\n\n# Making an element go fullscreen\n@docs fullbleed\n\n# Advanced flexbox layout\n@docs layout\n\n# Flex Direction\n@docs horizontal, vertical, horizontalReverse, verticalReverse\n\n# Flex Alignment\n@docs start, center, end, stretch, surround\n\n# Flex Wrapping\n@docs wrap, noWrap, wrapReverse\n\n# Creating flexbox-ready nodes\n@docs flexNode, flexDiv",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "center",
        "comment": "",
        "type": "Alignment"
      },
      {
        "name": "column",
        "comment": "Align children vertically from top to bottom",
        "type": "List Html -> Html"
      },
      {
        "name": "columnReverse",
        "comment": "Align children vertically from bottom to top",
        "type": "List Html -> Html"
      },
      {
        "name": "end",
        "comment": "",
        "type": "Alignment"
      },
      {
        "name": "flex",
        "comment": "Surround an Html element by a flex container.\n\nNote: if `flex` does not seem to do what you think it should do,\nconsider adding the following style to the input Html node:\n\n    (\"flex\", \"1\")\n\n`flex` does not do this automatically. It creates a container around\na node rather than affect it directly.",
        "type": "Html -> Html"
      },
      {
        "name": "flexDiv",
        "comment": "Analog of `div`. Creates a div with a list of styles, a list of attributes,\nand a list of children\n\n    flexDiv styles attributes children\n\nNote: The styles have been separated from the attributes in order for the flex attribute\nto persist (in case the styles were overwritten). As a result, DO NOT include styles in\nyour attributes if you wish to use `flexDiv`. Pass the styles to the function directly.\nThis'll guarantee that things will go swimmingly :)",
        "type": "List ( String, String ) -> List Attribute -> List Html -> Html"
      },
      {
        "name": "flexN",
        "comment": "Surround an Html element by a flex container of a given flex size.\n\nNote: if `flexN` does not seem to do what you think it should do,\nconsider adding the following style to the input Html node:\n\n    (\"flex\", \"1\")\n\n`flexN` does not do this automatically. It creates a container around\na node rather than affect it directly.",
        "type": "Int -> Html -> Html"
      },
      {
        "name": "flexNode",
        "comment": "Analog of `node`. Creates a node (of given name), with a list of styles,\na list of attributes, and a list of children\n\n    flexNode name styles attributes children\n\nNote: The styles have been separated from the attributes in order for the flex attribute\nto persist (in case the styles were overwritten). As a result, DO NOT include styles in\nyour attributes if you wish to use `flexNode`. Pass the styles to the function directly.\nThis'll guarantee that things will go swimmingly :)",
        "type": "String -> List ( String, String ) -> List Attribute -> List Html -> Html"
      },
      {
        "name": "fullbleed",
        "comment": "Wraps an element in a flex container that takes the size of the entire\nscreen. Use this only at the top level for the full view. This is not intended\nto be used on individual Html nodes but rather once on the entire view.",
        "type": "Html -> Html"
      },
      {
        "name": "horizontal",
        "comment": "",
        "type": "Direction"
      },
      {
        "name": "horizontalReverse",
        "comment": "",
        "type": "Direction"
      },
      {
        "name": "layout",
        "comment": "Allows you to construct a custom flex container by setting various\nparameters.\n\n    layout direction justify align wrap children\n\n* `direction` dictates the direction the children will flow.\nThe choices are : `horizontal`, `vertical`, `horizontalReverse`, `verticalReverse`\n\n* `justify` dictates how the children align on the main-axis.\nThe choices are `start`, `center`, `end`, `stretch`, `surround`\n\n* `align` dictates how the children align on the cross-axis\nThe choices are `start`, `center`, `end`, `stretch`, `surround`\n\n* `wrap` dictates if the children wrap if there is no space left for them to flex\nThe choices are `wrap`, `noWrap`, `wrapReverse`",
        "type": "Direction -> Alignment -> Alignment -> Wrap -> List Html -> Html"
      },
      {
        "name": "noWrap",
        "comment": "",
        "type": "Wrap"
      },
      {
        "name": "row",
        "comment": "Align children horizontally from left to right",
        "type": "List Html -> Html"
      },
      {
        "name": "rowReverse",
        "comment": "Align children horizontally from right to left",
        "type": "List Html -> Html"
      },
      {
        "name": "start",
        "comment": "",
        "type": "Alignment"
      },
      {
        "name": "stretch",
        "comment": "",
        "type": "Alignment"
      },
      {
        "name": "surround",
        "comment": "",
        "type": "Alignment"
      },
      {
        "name": "vertical",
        "comment": "",
        "type": "Direction"
      },
      {
        "name": "verticalReverse",
        "comment": "",
        "type": "Direction"
      },
      {
        "name": "wrap",
        "comment": "",
        "type": "Wrap"
      },
      {
        "name": "wrapReverse",
        "comment": "",
        "type": "Wrap"
      }
    ],
    "generated-with-elm-version": "old"
  }
]