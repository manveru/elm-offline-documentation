[
  {
    "name": "Random.Distributions",
    "comment": " This library provides non-uniform distributions for the core Random library.\n\n# Generators\n@docs normal\n\n# Distribution functions\n@docs normalDensity\n@docs normalDensityInverse\n@docs erf\n@docs erfc\n\n# Ziggurat algorithm\n\nHelper functions implementing the [Ziggurat\nalgorithm](https://en.wikipedia.org/wiki/Ziggurat_algorithm).\n\n@docs ziggurat\n@docs zigguratTables\n@docs zigguratX1\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "erf",
        "comment": " The error function\nApproximation with a maximal error of 1.2*10^-7.\n\nDirectly from wikipedia:\nhttps://en.wikipedia.org/wiki/Error_function#Numerical_approximation\n\n    \\begin{align}\n    \\tau = {} & t\\cdot\\exp\\left(-x^2-1.26551223+1.00002368 t+0.37409196 t^2+0.09678418 t^3\\right.\\\\\n    & \\left.{}-0.18628806 t^4+0.27886807 t^5-1.13520398 t^6+1.48851587\\cdot t^7\\right. \\\\\n    & \\left.{}-0.82215223 t^8+0.17087277 t^9\\right)\n    \\end{align}\n",
        "type": "Float -> Float"
      },
      {
        "name": "erfc",
        "comment": " The complimentary error function.\nApproximation with a maximal error of 1.2*10^-7.\n",
        "type": "Float -> Float"
      },
      {
        "name": "normal",
        "comment": " Generate samples from a standard normal distribution.\n",
        "type": "Random.Generator Float"
      },
      {
        "name": "normalDensity",
        "comment": " The density function for a normal distribution.\n\n    y = normalDensity mu sigma x\n\n",
        "type": "Float -> Float -> Float -> Float"
      },
      {
        "name": "normalDensityInverse",
        "comment": " The inverse of the density function for a normal distribution.\n\n    x = normalDensityInverse mu sigma y\n\n",
        "type": "Float -> Float -> Float -> Float"
      },
      {
        "name": "ziggurat",
        "comment": " Implement the [Ziggurat algorithm](https://en.wikipedia.org/wiki/Ziggurat_algorithm) for one-sided distributions.\n\n    oneSidedNormalGenerator =\n      let\n        n = numLayers\n        pFunc = normalDensity 0 1\n        invPFunc = normalDensityInverse 0 1\n        x1 = zigguratX1 n pFunc invPFunc\n        y1 = pFunc x1\n        listTables = zigguratTables n y1 layerArea pFunc invPFunc\n        tables = Array.fromList listTables\n        tailGen = zigguratNormalTail x1\n      in\n        ziggurat tables pFunc tailGen\n\n",
        "type": "Array.Array ( Float, Float ) -> (Float -> Float) -> Random.Generator Float -> Random.Generator Float"
      },
      {
        "name": "zigguratTables",
        "comment": " Generate the ziggurat tables.\n\nhttps://en.wikipedia.org/wiki/Ziggurat_algorithm#Generating_the_tables\n\n    tables = zigguratTables numLayers y1 layerArea pFunc invPFunc\n    (xs, ys) = List.unzip tables\n\n",
        "type": "Int -> Float -> Float -> (Float -> Float) -> (Float -> Float) -> List ( Float, Float )"
      },
      {
        "name": "zigguratX1",
        "comment": " Find x1 and A for a given table size, density function, and inverse density\nfunction.\n\nhttps://en.wikipedia.org/wiki/Ziggurat_algorithm#Finding_x1_and_A\n\n    x1 = zigguratX1 n pFunc invPFunc\n\n",
        "type": "Int -> (Float -> Float) -> (Float -> Float) -> Float"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  }
]