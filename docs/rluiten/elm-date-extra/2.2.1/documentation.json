[
  {
    "name": "Date.Utils",
    "comment": " Date Utils.\n\n## Date parsing\n@docs fromString\n@docs dateFromFields\n@docs timeFromFields\n\n**Be careful with unsafeFromString it will Debug.crash() if it cant parse date.**\n@docs unsafeFromString\n\n## Utility\n@docs dayList\n@docs isoWeek\n@docs isoWeekOne\n\nCopyright (c) 2016 Robin Luiten\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "dateFromFields",
        "comment": " Create a date in current time zone from given fields.\nAll field values are clamped to there allowed range values.\nThis can only return dates in current time zone.\n\nHours are input in 24 hour time range 0 to 23 valid.\n",
        "type": "Int -> Date.Month -> Int -> Int -> Int -> Int -> Int -> Date.Date"
      },
      {
        "name": "dayList",
        "comment": " Return a list of days dayLength long for successive days\nstarting from startDate.\n",
        "type": "Int -> Date.Date -> List Date.Date"
      },
      {
        "name": "fromString",
        "comment": " Elm Date.fromString suffers from the some of the same javascript unusual\ncompensation of input ranges when converting strings to Dates.\n\nThis method makes some known undesirable no Err results return Err.\n\nExample produces `Ok \"2012-03-02\"` in javascript\n```\n  aDate = (Date.fromString \"2012-02-31\")\n```\n\ncheckDateResult tries to catch and mark as Err some of these cases.\n",
        "type": "String -> Result.Result String Date.Date"
      },
      {
        "name": "isoWeek",
        "comment": " Return iso week values year, week, isoDayOfWeek. ",
        "type": "Date.Date -> ( Int, Int, Int )"
      },
      {
        "name": "isoWeekOne",
        "comment": " Return date of start of week one for year. ",
        "type": "Int -> Date.Date"
      },
      {
        "name": "timeFromFields",
        "comment": " Create a time in current time zone from given fields, for\nwhen you dont care about the date part but need time part anyway.\n\nAll field values are clamped to there allowed range values.\nThis can only return dates in current time zone.\n\nHours are input in 24 hour time range 0 to 23 valid.\n\nThis defaults to year 1970, month Jan, day of month 1 for date part.\n",
        "type": "Int -> Int -> Int -> Int -> Date.Date"
      },
      {
        "name": "unsafeFromString",
        "comment": " Utility for known input string date creation cases.\nChecks for a fail just in case and calls Debug.crash().\n",
        "type": "String -> Date.Date"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Date.Floor",
    "comment": " Reduce a date to a given granularity this is similar in concept\nto floor on Float so was named the same.\n\nThis allows you to modify a date to reset to minimum values\nall values below a given granularity.\n\nThis operates in local time zone so if you are not in UTC time zone\nand you output date in UTC time zone the datefields will not be floored.\n\nExample `Floor.floor Hour date` will return a modified date with\n* Minutes to 0\n* Seconds to 0\n* Milliseconds to 0\n\n@docs floor\n@docs Floor\n\nThis modules implementation became much simpler when Field module was introduced.\n\nCopyright (c) 2016 Robin Luiten\n",
    "aliases": [],
    "types": [
      {
        "name": "Floor",
        "comment": " Date granularity of operations. ",
        "args": [],
        "cases": [
          [
            "Millisecond",
            []
          ],
          [
            "Second",
            []
          ],
          [
            "Minute",
            []
          ],
          [
            "Hour",
            []
          ],
          [
            "Day",
            []
          ],
          [
            "Month",
            []
          ],
          [
            "Year",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "floor",
        "comment": " Floor date by reducing to minimum value all values below given granularity.\n\nThis floors in local time zone values, as the date element parts\nare pulled straight from the local time zone date values.\n",
        "type": "Date.Floor.Floor -> Date.Date -> Date.Date"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Date.Format",
    "comment": " Date Format, turning dates into strings.\n\nThe format code originally came from and was modified and extended from.\nhttps://github.com/mgold/elm-date-format/blob/1.0.4/src/Date/Format.elm\n\n## Date presentation\n@docs format\n@docs formatUtc\n@docs formatOffset\n\n## Extra presentation convenience\n@docs isoString\n@docs utcIsoString\n\n## Low level formats used in specific places in library.\n@docs isoDateString\n@docs utcIsoDateString\n\n## Useful strings for format\n@docs isoFormat\n@docs isoMsecFormat\n@docs isoOffsetFormat\n@docs isoMsecOffsetFormat\n@docs isoDateFormat\n@docs isoTimeFormat\n\nCopyright (c) 2016 Robin Luiten\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "format",
        "comment": " Use a format string to format a date.\nThis gets time zone offset from provided date.\n",
        "type": "Date.Config.Config -> String -> Date.Date -> String"
      },
      {
        "name": "formatOffset",
        "comment": " This adjusts date for offset, and renders with the offset ",
        "type": "Date.Config.Config -> Int -> String -> Date.Date -> String"
      },
      {
        "name": "formatUtc",
        "comment": " Convert date to utc then format it with offset set to 0 if rendered. ",
        "type": "Date.Config.Config -> String -> Date.Date -> String"
      },
      {
        "name": "isoDateFormat",
        "comment": " ISO Date. ",
        "type": "String"
      },
      {
        "name": "isoDateString",
        "comment": " Return date as string.\n\nLow level routine required by areas like checkDateResult to avoid\nrecursive loops in Format.format.\n",
        "type": "Date.Date -> String"
      },
      {
        "name": "isoFormat",
        "comment": " ISO date time, 24hr. ",
        "type": "String"
      },
      {
        "name": "isoMsecFormat",
        "comment": " ISO Date time with milliseconds, 24hr. ",
        "type": "String"
      },
      {
        "name": "isoMsecOffsetFormat",
        "comment": " ISO Date time with milliseconds and timezone, 24hr. ",
        "type": "String"
      },
      {
        "name": "isoOffsetFormat",
        "comment": " ISO Date time with timezone, 24hr. ",
        "type": "String"
      },
      {
        "name": "isoString",
        "comment": " Return date and time as string in local zone. ",
        "type": "Date.Date -> String"
      },
      {
        "name": "isoTimeFormat",
        "comment": " ISO Time 24hr. ",
        "type": "String"
      },
      {
        "name": "utcIsoDateString",
        "comment": " Utc variant of isoDateString.\n\nLow level routine required by areas like checkDateResult to avoid\nrecursive loops in Format.format.\n",
        "type": "Date.Date -> String"
      },
      {
        "name": "utcIsoString",
        "comment": " Return date and time as string in ISO form with Z for UTC offset. ",
        "type": "Date.Date -> String"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Date.Field",
    "comment": " Setting a date field on a date.\n\n@docs fieldToDate\n@docs fieldToDateClamp\n@docs Field\n\n",
    "aliases": [],
    "types": [
      {
        "name": "Field",
        "comment": " Configured Field and Value to set on date.\n\nAll field values are applied Modulus there maximum value.\n\n\n* DayOfWeek\n * The week keeps the same start of week day as passed in and changes day.\n* Month\n * Will not change year only the month of year.\n\n",
        "args": [],
        "cases": [
          [
            "Millisecond",
            [
              "Int"
            ]
          ],
          [
            "Second",
            [
              "Int"
            ]
          ],
          [
            "Minute",
            [
              "Int"
            ]
          ],
          [
            "Hour",
            [
              "Int"
            ]
          ],
          [
            "DayOfWeek",
            [
              "( Date.Day, Date.Day )"
            ]
          ],
          [
            "DayOfMonth",
            [
              "Int"
            ]
          ],
          [
            "Month",
            [
              "Date.Month"
            ]
          ],
          [
            "Year",
            [
              "Int"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "fieldToDate",
        "comment": " Set a field on a date to a specific value.\n\nIf your value in field is out side of valid range for\nthe date field this function will return Nothing.\n\n* DayOfWeek cannot be invalid input range\n* Month cannot be invalid\n\nValid ranges\n* Millisecond 0 to 999\n* Second 0 to 59\n* Minute 0 to 59\n* Hour 0 to 23\n* DayOfMonth 1 to max day of month for year\n* Year >= 0\n\n",
        "type": "Date.Field.Field -> Date.Date -> Maybe.Maybe Date.Date"
      },
      {
        "name": "fieldToDateClamp",
        "comment": "  Set a field on a date to a specific value.\n\nThis version clamps any input Field values to valid ranges as\ndescribed in the doc for fieldToDate function.\n",
        "type": "Date.Field.Field -> Date.Date -> Date.Date"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Date.Config.Configs",
    "comment": " Get a Date Extra Config based up on a locale code.\n\n@docs getConfig\n@docs configs\n\nCopyright (c) 2016 Robin Luiten\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "configs",
        "comment": " Built in configurations. ",
        "type": "Dict.Dict String Date.Config.Config"
      },
      {
        "name": "getConfig",
        "comment": " Get a Date Extra Config for a locale id.\n\nLower case matches strings and accepts \"-\" or \"_\" to seperate\nthe characters in code.\n\nReturns \"en_us\" config if it can't find a match in configs.\n",
        "type": "String -> Date.Config.Config"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Date.Duration",
    "comment": " A Duration is time period that may vary with with calendar and time.\n\nName of type concept copied from NodaTime.\n\n@docs add\n@docs Duration\n\nCopyright (c) 2016 Robin Luiten\n",
    "aliases": [],
    "types": [
      {
        "name": "Duration",
        "comment": " A Duration is time period that may vary with with calendar and time.\n\nName of type copied from NodaTime.\n",
        "args": [],
        "cases": [
          [
            "Millisecond",
            []
          ],
          [
            "Second",
            []
          ],
          [
            "Minute",
            []
          ],
          [
            "Hour",
            []
          ],
          [
            "Day",
            []
          ],
          [
            "Week",
            []
          ],
          [
            "Month",
            []
          ],
          [
            "Year",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "add",
        "comment": " Add duration * count to date. ",
        "type": "Date.Duration.Duration -> Int -> Date.Date -> Date.Date"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Date.Config.Config_en_au",
    "comment": " This is the default english config for formatting dates.\n\n@docs config\n\nCopyright (c) 2016 Robin Luiten\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "config",
        "comment": " Config for en-au. ",
        "type": "Date.Config.Config"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Date.Config.Config_en_us",
    "comment": " This is the default english config for formatting dates.\n\n@docs config\n\nCopyright (c) 2016 Robin Luiten\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "config",
        "comment": " Config for en-us. ",
        "type": "Date.Config.Config"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Date.Create",
    "comment": " Create dates and offsets.\n\n@docs makeDateTicks\n@docs getTimezoneOffset\n\nCopyright (c) 2016 Robin Luiten\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "getTimezoneOffset",
        "comment": " Return the time zone offset of current javascript environment underneath\nElm in Minutes. This should produce the same result getTimezoneOffset()\nfor a given date in the same javascript VM.\n\nTime zone offset is always for a given date and time so an input date is required.\n\nGiven that timezones change (though slowly) this is not strictly pure, but\nI suspect it is sufficiently pure. Is is dependent on the timezone mechanics\nof the javascript VM.\n\n\n### Example zone stuff.\nFor an offset of -600 minutes, in +10:00 time zone offset.\n\nIn javascript date parsing of \"1970-01-01T00:00:00Z\" produces a\njavascript localised date.\n\nConverting this date to a string in javascript\n* toISOString()  produces \"1970-01-01T00:00:00.000Z\"\n* toLocalString() produces \"01/01/1970, 10:00:00\"\n\nThe 10 in hours field due to the +10:00 offset.\nThats how the time zone offset can be figured out, by creating the date\nusing makeDateTicks\n\nThe offset is picked up in Elm using makeDateTicks which creates a\nUTC date in ticks from the fields pulled from the date we want to\ncompare with.\n",
        "type": "Date.Date -> Int"
      },
      {
        "name": "makeDateTicks",
        "comment": " Return raw epoch ticks since Unix epoch for given date.\nResult can be positive or negative.\nUnix epoch. Thursday, 1 January 1970 at 00:00:00.000 in UTC is 0 ticks.\n\nThis can be fed to Date.fromTime to create a time, but be careful this\nfunction does nothing about time zone offsets so you may not get you\nwould expect.\n\nTODO ? not sure should pass in Date as source of the parameters, it is\nmissleading as to whats doing the work this way I think. It also means\nthe date offset has an impact...\n",
        "type": "Date.Date -> Int"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Date.Compare",
    "comment": " Compare dates.\n\n@docs is\n@docs is3\n@docs Compare2\n@docs Compare3\n\nCopyright (c) 2016 Robin Luiten\n",
    "aliases": [],
    "types": [
      {
        "name": "Compare2",
        "comment": " Date comparison type for 2 dates.\n\n* After\n * Return True if date1 is after date2.\n* Before\n * Return True if date1 is before date2.\n* Same\n * Return True if date1 is same as date2.\n* SameOrAfter\n * Return True if date1 is same or after date2.\n* SameOrBefore\n * Return True if date1 is same or before date2.\n",
        "args": [],
        "cases": [
          [
            "After",
            []
          ],
          [
            "Before",
            []
          ],
          [
            "Same",
            []
          ],
          [
            "SameOrAfter",
            []
          ],
          [
            "SameOrBefore",
            []
          ]
        ]
      },
      {
        "name": "Compare3",
        "comment": " Date comparison type for 3 dates.\n\nBetween does not care if date2 > date3 or date2 < date3.\n\n* Between\n * Return True if date1 is After date2 and Before date3\n * Return True if date1 is After date3 and Before date2\n* BetweenOpenStart\n * Return True if date1 is SameOrAfter date2 and Before date3\n* BetweenOpenEnd\n * Return True if date1 is After date2 and SameOrBefore date3\n* BetweenOpen\n * Return True if date1 is SameOrAfter date2 and SameOrBefore date3\n",
        "args": [],
        "cases": [
          [
            "Between",
            []
          ],
          [
            "BetweenOpenStart",
            []
          ],
          [
            "BetweenOpenEnd",
            []
          ],
          [
            "BetweenOpen",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "is",
        "comment": " Compare two dates.\n",
        "type": "Date.Compare.Compare2 -> Date.Date -> Date.Date -> Bool"
      },
      {
        "name": "is3",
        "comment": " Compare three dates.\n\nThis figures out the low and high bounds from date2\nand date3 using minimum and maximum of them respectively.\n",
        "type": "Date.Compare.Compare3 -> Date.Date -> Date.Date -> Date.Date -> Bool"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Date.Period",
    "comment": " Period is a fixed length of time.\n\nName of type concept copied from NodaTime.\n\nThis module has no concept of Months or Years which have variable lenghts of time.\nFor that see Duration.\n\n@docs add\n@docs diff\n@docs Period\n@docs DeltaRecord\n@docs zeroDelta\n\nCopyright (c) 2016 Robin Luiten\n",
    "aliases": [
      {
        "name": "DeltaRecord",
        "comment": " A multi granularity period delta. ",
        "args": [],
        "type": "{ week : Int , day : Int , hour : Int , minute : Int , second : Int , millisecond : Int }"
      }
    ],
    "types": [
      {
        "name": "Period",
        "comment": " A Period.\n\nWeek is a convenience for users if they want to use it, it does\njust scale Day in functionality so is not strictly required.\n\nDELTARECORD values are multiplied addend on application.\n",
        "args": [],
        "cases": [
          [
            "Millisecond",
            []
          ],
          [
            "Second",
            []
          ],
          [
            "Minute",
            []
          ],
          [
            "Hour",
            []
          ],
          [
            "Day",
            []
          ],
          [
            "Week",
            []
          ],
          [
            "Delta",
            [
              "Date.Period.DeltaRecord"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "add",
        "comment": " Add Period count to date. ",
        "type": "Date.Period.Period -> Int -> Date.Date -> Date.Date"
      },
      {
        "name": "diff",
        "comment": " Return a Period representing date difference. date1 - date2.\n\nIf  you add the result of this function to date2 with addend of 1\nwill return date1.\n ",
        "type": "Date.Date -> Date.Date -> Date.Period.Period"
      },
      {
        "name": "zeroDelta",
        "comment": " All zero delta.\nUseful as a starting point if you want to set a few fields only.\n",
        "type": "Date.Period.DeltaRecord"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Date.I18n.I_en_us",
    "comment": " English values for day and month names.\n\n@docs dayShort\n@docs dayName\n@docs monthShort\n@docs monthName\n\nCopyright (c) 2016 Robin Luiten\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "dayName",
        "comment": " Day full name. ",
        "type": "Date.Day -> String"
      },
      {
        "name": "dayShort",
        "comment": " Day short name. ",
        "type": "Date.Day -> String"
      },
      {
        "name": "monthName",
        "comment": " Month full name. ",
        "type": "Date.Month -> String"
      },
      {
        "name": "monthShort",
        "comment": " Month short name. ",
        "type": "Date.Month -> String"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Date.Core",
    "comment": " Date core.\n\n## Info\n@docs monthToInt\n@docs daysInMonth\n@docs monthList\n@docs daysInNextMonth\n@docs daysInPrevMonth\n@docs daysInMonthDate\n@docs isLeapYear\n@docs isLeapYearDate\n@docs yearToDayLength\n@docs isoDayOfWeek\n\n## Utility\n@docs toFirstOfMonth\n@docs firstOfNextMonthDate\n@docs lastOfMonthDate\n@docs lastOfPrevMonthDate\n@docs daysBackToStartOfWeek\n\n## Conversion\n@docs fromTime\n@docs toTime\n\n## Iteration Utility\n@docs nextDay\n@docs prevDay\n@docs nextMonth\n@docs prevMonth\n\n## Date constants\n@docs epochDateStr\n\n## Date constants\n@docs ticksAMillisecond\n@docs ticksASecond\n@docs ticksAMinute\n@docs ticksAnHour\n@docs ticksADay\n@docs ticksAWeek\n\nCopyright (c) 2016 Robin Luiten\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "daysBackToStartOfWeek",
        "comment": " Days back to start of week day. ",
        "type": "Date.Day -> Date.Day -> Int"
      },
      {
        "name": "daysInMonth",
        "comment": " Return days in month for year month. ",
        "type": "Int -> Date.Month -> Int"
      },
      {
        "name": "daysInMonthDate",
        "comment": " Days in month for given date. ",
        "type": "Date.Date -> Int"
      },
      {
        "name": "daysInNextMonth",
        "comment": " Return days in next calendar month. ",
        "type": "Date.Date -> Int"
      },
      {
        "name": "daysInPrevMonth",
        "comment": " Return days in previous calendar month. ",
        "type": "Date.Date -> Int"
      },
      {
        "name": "epochDateStr",
        "comment": " Epoch starting point for tick 0. ",
        "type": "String"
      },
      {
        "name": "firstOfNextMonthDate",
        "comment": " Return first of next month date. ",
        "type": "Date.Date -> Date.Date"
      },
      {
        "name": "fromTime",
        "comment": " Convenience fromTime as time ticks are Elm Ints in this library. ",
        "type": "Int -> Date.Date"
      },
      {
        "name": "isLeapYear",
        "comment": " Return True if Year is a leap year. ",
        "type": "Int -> Bool"
      },
      {
        "name": "isLeapYearDate",
        "comment": " Return True if Year of Date is a leap year. ",
        "type": "Date.Date -> Bool"
      },
      {
        "name": "isoDayOfWeek",
        "comment": " Return the Iso DayOfWeek Monday 1, to Sunday 7. ",
        "type": "Date.Day -> Int"
      },
      {
        "name": "lastOfMonthDate",
        "comment": " Resturn date of last day of month. ",
        "type": "Date.Date -> Date.Date"
      },
      {
        "name": "lastOfPrevMonthDate",
        "comment": " Return last of previous month date. ",
        "type": "Date.Date -> Date.Date"
      },
      {
        "name": "monthList",
        "comment": " List of months in order from Jan to Dec. ",
        "type": "List Date.Month"
      },
      {
        "name": "monthToInt",
        "comment": " Return month as integer. Jan = 1 to Dec = 12. ",
        "type": "Date.Month -> Int"
      },
      {
        "name": "nextDay",
        "comment": " Return next day in calendar sequence. ",
        "type": "Date.Day -> Date.Day"
      },
      {
        "name": "nextMonth",
        "comment": " Return next month in calendar sequence. ",
        "type": "Date.Month -> Date.Month"
      },
      {
        "name": "prevDay",
        "comment": " Return previous day in calendar sequence. ",
        "type": "Date.Day -> Date.Day"
      },
      {
        "name": "prevMonth",
        "comment": " Return previous month in calendar sequence. ",
        "type": "Date.Month -> Date.Month"
      },
      {
        "name": "ticksADay",
        "comment": " Ticks in a day. ",
        "type": "Int"
      },
      {
        "name": "ticksAMillisecond",
        "comment": " Ticks in a millisecond. (this is 1 on Win 7 in Chrome) ",
        "type": "Int"
      },
      {
        "name": "ticksAMinute",
        "comment": " Ticks in a minute. ",
        "type": "Int"
      },
      {
        "name": "ticksASecond",
        "comment": " Ticks in a second. ",
        "type": "Int"
      },
      {
        "name": "ticksAWeek",
        "comment": " Ticks in a week. ",
        "type": "Int"
      },
      {
        "name": "ticksAnHour",
        "comment": " Ticks in an hour. ",
        "type": "Int"
      },
      {
        "name": "toFirstOfMonth",
        "comment": " Return date of first of month. ",
        "type": "Date.Date -> Date.Date"
      },
      {
        "name": "toTime",
        "comment": " Convenience toTime as time ticks are Elm Ints in this library. ",
        "type": "Date.Date -> Int"
      },
      {
        "name": "yearToDayLength",
        "comment": " Return number of days in a year. ",
        "type": "Int -> Int"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Date.Config",
    "comment": " Date configuration.\n\nFor i18n for day and month names.\nParameter to Format.format* functions.\n\nThere is scope to put in some default format strings here.\n\n@docs Config\n\nCopyright (c) 2016 Robin Luiten\n",
    "aliases": [
      {
        "name": "Config",
        "comment": " Configuration for formatting dates. ",
        "args": [],
        "type": "{ i18n : { dayShort : Date.Day -> String , dayName : Date.Day -> String , monthShort : Date.Month -> String , monthName : Date.Month -> String } , format : { date : String , longDate : String , time : String , longTime : String , dateTime : String , firstDayOfWeek : Date.Day } }"
      }
    ],
    "types": [],
    "values": [],
    "generated-with-elm-version": "0.16.0"
  }
]