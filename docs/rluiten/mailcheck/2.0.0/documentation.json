[
  {
    "name": "Mailcheck",
    "comment": " A library that suggests a correct domain when a user miss spells an email address.\nThis is a port of this javascript library https://github.com/mailcheck/mailcheck\n\n## Basic Usage\n\nRunning\n\n    Mailcheck.suggest 'test@gnail.com'\n\nReturns\n\n    Suggestion (\"test\", \"gmail.com\", \"test@gmail.com\")\n\n\nRunning\n\n    Mailcheck.suggest 'test@gsnail.com'\n\nReturns\n\n    Nothing\n\n# Create\n@docs suggest\n\n# Utility\n@docs encodeEmail\n@docs splitEmail\n@docs findClosestDomain\n@docs suggestWith\n\n# Default domain lists used by suggest\n@docs defaultDomains\n@docs defaultTopLevelDomains\n@docs defaultSecondLevelDomains\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "defaultDomains",
        "comment": " default list of domains used in suggest ",
        "type": "List String"
      },
      {
        "name": "defaultSecondLevelDomains",
        "comment": " default list of second level domains used in suggest ",
        "type": "List String"
      },
      {
        "name": "defaultTopLevelDomains",
        "comment": " default list of top level domains used in suggest ",
        "type": "List String"
      },
      {
        "name": "encodeEmail",
        "comment": " Encode the email address to prevent XSS but leave in valid\ncharacters, following this official spec:\nhttp://en.wikipedia.org/wiki/Email_address#Syntax\nThis is exported to test it.\n\nencodeURI() will not encode: ~!@#$&*()=:/,;?+'\nElm's Http.uriEncode actually calls encodeURIComponent\n\nencodeURIComponent escapes all characters except the\nfollowing: alphabetic, decimal digits, - _ . ! ~ * ' ( )\n\nExtra rules were added since Elm provides encodeURIComponent() functionality.\n\n```elm\n  (encodeEmail \"<hello>@domain.com\") == \"%3Chello%3E@domain.com\"\n```\n\n",
        "type": "String -> String"
      },
      {
        "name": "findClosestDomain",
        "comment": " Find closest domain in given list of domains using default distance and threshold.\n\n```elm\n    findClosestDomain \"test@gmail.co\" slds tlds\n```\n\nis equivalent to\n\n```elm\n    findClosestDomainWith sift3Distance topLevelThreshold \"test@gmail.co\" slds tlds\n```\n",
        "type": "String -> List String -> Maybe.Maybe String"
      },
      {
        "name": "splitEmail",
        "comment": " Split an email address up into components.\nThis is exported to test it.\nResult is Maybe (address, domain, secondLevelDomain, topLevelDomain)\n\n```elm\n  (spitEmail \"user\") == Nothing\n  (spitEmail \"user@\") == Nothing\n  (spitEmail \"user@moo.com\") == Just(\"user\", \"moo.com\", \"moo\", \"com\")\n  (spitEmail \"user@moo.co.uk\") == Just(\"user\", \"moo.com.uk\", \"moo\", \"com.uk\")\n```\n\n",
        "type": "String -> Maybe.Maybe ( String, String, String, String )"
      },
      {
        "name": "suggest",
        "comment": " Suggest a domain which may assist a user with a possible error\nin a candidate email address. This version uses the default internal lists\nof domains.\n\n```elm\n    suggest 'test@gmail.co'\n```\n\nis equivalent to\n\n```elm\n    suggestWith defaultDomains defaultSecondLevelDomains defaultTopLevelDomains 'test@gmail.co'\n```\n\n```elm\n  (suggest \"user@gmil.com\") == Just (\"user\", \"gmail.com\", \"user@gmail.com\")\n```\n\n",
        "type": "String -> Mailcheck.Mailcheck"
      },
      {
        "name": "suggestWith",
        "comment": " Suggest with passed in domain lists.\n\ndomains is list of known valid domains\ntop level domains allowed to be empty\nsecond level domains allowed to be empty\n\n",
        "type": "List String -> List String -> List String -> String -> Mailcheck.Mailcheck"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "StringDistance",
    "comment": " A library to calculate the string distance between two strings.\nThis is ported from the code in https://github.com/mailcheck/mailcheck/blob/master/src/mailcheck.js.\nWhich refers back to http://siderite.blogspot.com.au/2007/04/super-fast-and-accurate-string-distance.html as\nsource of algorithm\n\nFunctions\n@docs sift3Distance\n@docs lcs\n@docs lcsLimit\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "lcs",
        "comment": " Longest Common Subsequence\nThis is simple implementation and would benefit from memoization if\nperformance is a problem. It also does not limit look ahead\nwhich can be very costly see lcsLimit for a limited look ahead version.\n\nWarning this gets very slow very quickly with increases in list lengths even\n17 character strings can cause things to bog down.\n\nThis implementation based on http://rosettacode.org/wiki/Longest_common_subsequence#Haskell\n\n```elm\n    lcs [\"a\", \"b\", \"c\"] [\"b\", \"c\", \"d\"] == [\"b\", \"c\"]\n```\n\n ",
        "type": "List Char -> List Char -> List Char"
      },
      {
        "name": "lcsLimit",
        "comment": " Return function which returns lcs with limited look ahead.\nWarning maxLookAhead quickly makes the returned function costly stay\nbelow 8 if you want responsiveness.\n\n```elm\n    lcsLimit 5 [\"a\", \"b\", \"c\"] [\"b\", \"c\", \"d\"] == [\"b\", \"c\"]\n```\n\n",
        "type": "Int -> List Char -> List Char -> List Char"
      },
      {
        "name": "sift3Distance",
        "comment": " Calculate sift3 string distance between candidate strings.\n\n```elm\n    sift3Distance \"\" \"abc\" == 3.0\n    sift3Distance \"ab\" \"\" == 2.0\n    sift3Distance \"abc\" \"abc\" == 0\n    sift3Distance \"abc\" \"ab\"  == 0.5\n```\n\n",
        "type": "String -> String -> Float"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  }
]