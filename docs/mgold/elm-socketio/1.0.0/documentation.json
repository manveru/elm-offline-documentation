[
  {
    "name": "SocketIO",
    "comment": "A module for working with [Socket.io](http://socket.io/) servers. This\n    module uses Socket.io 1.3.5.\n\n    Compared to native JavaScript, this library is limited in its ability to\n    dynamically change hosts, handle errors, and can data must be encoded as\n    a string.\n\n# Creating a Socket\nAvoid creating signals of sockets.\n@docs io, Options, defaultOptions\n\n# Sending and Receiving\nThese functions should be used with `Task.andThen` to provide a socket obtained\nwith `io`.\n@docs emit, on, connected",
    "aliases": [
      {
        "name": "Options",
        "comment": "A type for options on a socket. See the [Socket.io docs](http://socket.io/docs/client-api/)\n    for further explanation.",
        "args": [],
        "type": "{ multiplex : Bool , reconnection : Bool , reconnectionDelay : Time.Time , reconnectionDelayMax : Time.Time , timeout : Time.Time }"
      }
    ],
    "types": [
      {
        "name": "Socket",
        "comment": "",
        "args": [],
        "cases": [
          [
            "Socket",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "connected",
        "comment": "Set up a signal of bools indicating whether or not the socket is connected.\n    You should initialize the mailbox to `False`; if the server is available a\n    `True` event will be sent almost immediately. If the server is not\n    available, `io` will not complete and therefore this task will not run. If\n    the socket disconnects (and then reconnects later), the created signal will\n    have an event indicating that.",
        "type": "Signal.Address Bool -> Socket -> Task.Task x ()"
      },
      {
        "name": "defaultOptions",
        "comment": "Default options for a new socket and manager. These are the same as\n    Socket.io itself.",
        "type": "Options"
      },
      {
        "name": "emit",
        "comment": "Send a string on the socket using the given event name. To serialize your\n    Elm values, use `toString` or `JSON.Encode`.",
        "type": "String -> String -> Socket -> Task.Task x ()"
      },
      {
        "name": "io",
        "comment": "Create a socket, given a hostname and options.\n\n    socket = SocketIO.io \"http://localhost:8001\" SocketIO.defaultOptions\n\nIt's possible to run the Elm Reactor and your Socket.io node server\nsimultaneously on different ports.\n\nThe task never fails; if the server is unreachable it will never succeed.",
        "type": "String -> Options -> Task.Task x Socket"
      },
      {
        "name": "on",
        "comment": "Receive data of the given event name at a mailbox as a string. If data\n    received is not already a string, it will be JSON-encoded. Unserializable JS\n    values become `\"null\"`; this is a good initial value when you set up the\n    mailbox.",
        "type": "String -> Signal.Address String -> Socket -> Task.Task x ()"
      }
    ],
    "generated-with-elm-version": "old"
  }
]