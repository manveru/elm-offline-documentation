[
  {
    "name": "Turtle",
    "comment": "A tiny language for teaching a virtual turtle to draw. The turtle carries a pen and draws lines as it moves.\n\nMove the turtle around by making a list of steps. Then give it to the turtle with `animate`. Like this:\n\n````elm\nimport Turtle exposing (..)\n\nsteps = [forward 20, left 90, forward 10]\nmain = animate steps\n````\n\nThe turtle starts in the middle of the page facing up (90 degrees), with the pen down using black ink.\n\n## Moving\n@docs left, right, forward\n\n## Drawing\n@docs penUp, penDown, penColor\n\n## Special\n@docs make, withRandom, scale\n\n## Running Steps\nOnce you've made a list of steps, use one of these functions to see it happen.\n@docs animate, draw",
    "aliases": [
      {
        "name": "Step",
        "comment": "",
        "args": [],
        "type": "Core.Step"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "animate",
        "comment": "Animate the turtle drawing, showing the each step as it moves.",
        "type": "List Step -> Signal Element"
      },
      {
        "name": "draw",
        "comment": "Run the turtle and immediately show the result in a collage of the given size. It is\nuseful when you are changing your code quickly and don't want to wait for the turtle to move.",
        "type": "List Step -> Element"
      },
      {
        "name": "forward",
        "comment": "",
        "type": "Float -> Step"
      },
      {
        "name": "left",
        "comment": "",
        "type": "Float -> Step"
      },
      {
        "name": "make",
        "comment": "",
        "type": "List Step -> Step"
      },
      {
        "name": "penColor",
        "comment": "Change the color of the drawing.",
        "type": "Color -> Step"
      },
      {
        "name": "penDown",
        "comment": "Put the pen back down so that the turtle starts drawing again.",
        "type": "Step"
      },
      {
        "name": "penUp",
        "comment": "Lift the pen from the paper so that nothing is drawn.",
        "type": "Step"
      },
      {
        "name": "right",
        "comment": "",
        "type": "Float -> Step"
      },
      {
        "name": "scale",
        "comment": "Make moving forward bigger or smaller. The numbers multiply, so doing `scale 3` and then `scale 5` is the same as\ndoing `scale 15`.",
        "type": "Float -> Step"
      },
      {
        "name": "withRandom",
        "comment": "Give a step-making function a random number between 0 and 1.",
        "type": "(Float -> Step) -> Step"
      }
    ],
    "generated-with-elm-version": "old"
  },
  {
    "name": "Turtle.Advanced",
    "comment": "Advanced turtle drawing functions for those comfortable programming in Elm. This module is meant to be combined with\nthe simple one, so either import both `exposing (..)` or:\n\n````elm\nimport Turtle exposing (Step)\nimport Turtle.Advanced as Turtle\n````\n\nYes, this will work and place all the functions into the `Turtle` namespace.\n\n## Basics\n@docs back, stay\n\n## Shapes\n@docs ngon, circle, star\n\n## Functional Modifiers\nThese functions wrap steps with transformations that are undone afterwards, rather than leaving state with the turtle.\nThey still leak state a little, so be careful. Also, they may be made to leak less in a MINOR release.\n@docs scaled, rotated, invisibly\n\n## Atomicity\n@docs atomically\n\n## Absolute Positioning\n@docs teleport, rotateTo\n\n## Working with Steps\n### Drawing\n@docs DrawOptions, defaultDrawOptions, drawWith\n\n### Animating\n@docs AnimateOptions, defaultAnimateOptions, animateWith\n\n### Inspecting\n@docs length, depth",
    "aliases": [
      {
        "name": "AnimateOptions",
        "comment": "Customize the `animateWith` function by supplying the initial random seed, the dimensions of the drawing, and the\nclock on which the animation progresses.",
        "args": [],
        "type": "{ seed : Random.Seed, dims : Signal ( Int, Int ), clock : Signal () }"
      },
      {
        "name": "DrawOptions",
        "comment": "Customize the `drawWith` function by supplying the initial random seed and the dimensions of the drawing.",
        "args": [],
        "type": "{ seed : Random.Seed, dims : ( Int, Int ) }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "animateWith",
        "comment": "Animate the steps running sequentially, using the options given. Useful if `animate` isn't quite meeting your needs.",
        "type": "AnimateOptions -> List Step -> Signal Element"
      },
      {
        "name": "atomically",
        "comment": "The same as `make`, except when using `animate` the steps are all run together (atomically). Also considered to be a\nsingle step by `depth` and `length`. Used by the geometry helpers in this library to draw shapes immediately rather than\nwatch the turtle trace them out.",
        "type": "List Step -> Step"
      },
      {
        "name": "back",
        "comment": "Move the turtle back a distance, without affecting the rotation.",
        "type": "Float -> Step"
      },
      {
        "name": "circle",
        "comment": "Create a circle of the given radius, centered at the current location.",
        "type": "Float -> Step"
      },
      {
        "name": "defaultAnimateOptions",
        "comment": "The options used for `animate`. Uses the same seed as the draw options, `Window.dimensions`, and a 5fps timer. You\ncan use a faster timer, or `Mouse.clicks`, among other things.",
        "type": "AnimateOptions"
      },
      {
        "name": "defaultDrawOptions",
        "comment": "The options used for `draw`. Uses an arbitrary seed and the arbitrary dimensions of 1000x1000.",
        "type": "DrawOptions"
      },
      {
        "name": "depth",
        "comment": "Determine the recursive depth of a Movement.",
        "type": "List Step -> Int"
      },
      {
        "name": "drawWith",
        "comment": "Draw the steps immediately, using the options given. You will usually use this with `Signal.map` to rapidly iterate\na design, change a drawing based on user input, or create an animation.",
        "type": "DrawOptions -> List Step -> Element"
      },
      {
        "name": "invisibly",
        "comment": "Run a step with the pen up, and then put it down to start drawing. Useful for moving the a new location.",
        "type": "Step -> Step"
      },
      {
        "name": "length",
        "comment": "Determine the number of steps in a Movement, accounting for recursion.",
        "type": "List Step -> Int"
      },
      {
        "name": "ngon",
        "comment": "Create a regular n-gon with sides of length 50. Use `scale` or `scaled` to increase the size. The turtle begins the\nfirst edge immediately; you may want to position and rotate the turtle first.",
        "type": "Int -> Step"
      },
      {
        "name": "randomly",
        "comment": "Provide access to a random seed, and therefore, the Random library. This is much more powerful than `withRandom`\ntaking a random float, but carries with it the responsibility to pass back an unused seed.",
        "type": "(Random.Seed -> ( Step, Random.Seed )) -> Step"
      },
      {
        "name": "rotateTo",
        "comment": "Rotate to a given angle in degrees, regardless of the old rotation.",
        "type": "Float -> Step"
      },
      {
        "name": "rotated",
        "comment": "Rotate a step left (counterclockwise) by a given angle in degrees, and then rotate back (assuming the step itself does not change the angle.)",
        "type": "Float -> Step -> Step"
      },
      {
        "name": "scaled",
        "comment": "Scale a step by a given factor without affecting later actions (assuming the step itself does not change the scale).",
        "type": "Float -> Step -> Step"
      },
      {
        "name": "star",
        "comment": "Create a star polygon. The first argument specifies the number of points. The second argument specifies the ratio of\nthe exterior angle to the interior angle. A pentagram is `star 5 3` and a Star of David is `star 6 2`. This can take\nsome experimentation to get the effect you need; sometimes a star comes out as a convex polygon.\n\nEach side has length 50. Use `scale` or `scaled` to increase the size. The turtle begins the\nfirst edge immediately; you may want to position and rotate the turtle first.",
        "type": "Int -> Float -> Step"
      },
      {
        "name": "stay",
        "comment": "Tell the turtle to do nothing.",
        "type": "Step"
      },
      {
        "name": "teleport",
        "comment": "Move to a given location, regardless of the old location.",
        "type": "( Float, Float ) -> Step"
      }
    ],
    "generated-with-elm-version": "old"
  }
]