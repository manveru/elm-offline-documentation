[{"name":"Rails.Decode","comment":"\n\nTypes\n@docs ErrorList\n\n# Decoding\n@docs errors","aliases":[{"name":"ErrorList","comment":"ErrorList is a type alias for\na list of fields to String, where `field` is expected to be a type for matching\nerrors to\n```\n\ntype Field = Name | Password\n\ndecode : ErrorList Field\n\n```","args":["field"],"type":"List ( field, String )"}],"types":[],"values":[{"name":"errors","comment":"Decodes errors passed from rails formatted as\n\n`{ errors: {errorName: [\"Error String\"] } }`.\n\nThis function takes a Dict that is a map of all the fields you need decoded. It should be formatted\nnest\n\nDict.fromList\n    [ ( \"school\", School )\n    , ( \"school.name\", SchoolName )\n    , ( \"school.address\", SchoolAddress )\n    , ( \"school.city\", City )\n    , ( \"school.state\", State )\n    , ( \"school.zip\", Zip )\n    , ( \"school.country\", Country )\n    ]","type":"Dict.Dict String field -> Json.Decode.Decoder (Rails.Decode.ErrorList field)"}],"generated-with-elm-version":"0.15.1"},{"name":"Rails","comment":"\n\n# Http\n@docs send","aliases":[],"types":[],"values":[{"name":"send","comment":"Utility for working with rails. Wraps Http.send passing an Authenticity Token\nalong with the type of request and a way to decode results.","type":"String -> Json.Decode.Decoder value -> String -> String -> Http.Body -> Task.Task Http.Error value"}],"generated-with-elm-version":"0.15.1"}]