[{"name":"Erl","comment":" Library for parsing and constructing URLs\n\n# Types\n@docs Url, Query\n\n# Parse\n@docs parse\n\n# Parse helpers\n@docs extractFragment, extractHost, extractPath, extractProtocol, extractQuery\n\n# Construct\n@docs new, toString\n\n# Mutation helpers\n@docs clearQuery, unsetQuery, setQuery\n\n","aliases":[{"name":"Query","comment":" A Dict that holds keys and values for the query string\n","args":[],"type":"Dict.Dict String String"},{"name":"Url","comment":" Record that holds url attributes\n","args":[],"type":"{ protocol : String , username : String , password : String , host : List String , port' : Int , path : List String , fragment : List String , query : Erl.Query }"}],"types":[],"values":[{"name":"clearQuery","comment":" Clears the current query string\n    \n    Erl.clearQuery url\n","type":"Erl.Url -> Erl.Url"},{"name":"extractFragment","comment":" Extract the fragment (hash) from the url\n\n","type":"String -> String"},{"name":"extractHost","comment":" Extract the host from the url\n\n","type":"String -> String"},{"name":"extractPath","comment":" Extract the path from the url\n\n","type":"String -> String"},{"name":"extractProtocol","comment":" Extract the protocol from the url\n\n","type":"String -> String"},{"name":"extractQuery","comment":" Extract the query string from the url\n\n","type":"String -> String"},{"name":"new","comment":" Generate an empty Erl.Url record\n\n    Erl.new ==\n\n    {\n      protocol = \"\",\n      username = \"\",\n      password = \"\",\n      host = [],\n      path = [],\n      port' = 0,\n      fragment = [],\n      query = Dict.empty\n    }\n\n","type":"Erl.Url"},{"name":"parse","comment":" Parse a url string, returns an Erl.Url record\n\n    Erl.parse \"http://api.example.com/users/1#x/1?a=1\" == Erl.Url{...}\n","type":"String -> Erl.Url"},{"name":"setQuery","comment":" Set key/value in query string\n    \n    Erl.setQuery key value url\n","type":"String -> String -> Erl.Url -> Erl.Url"},{"name":"toString","comment":" Generate url string from an Erl.Url record\n\n    url = {\n      protocol = \"http\",\n      username = \"\",\n      password = \"\",\n      host = [\"www\", \"foo\", \"com\"],\n      path = [\"users\", \"1\"],\n      port' = 2000,\n      fragment = [\"a\", \"b\"],\n      query = Dict.empty |> Dict.insert \"q\" \"1\" |> Dict.insert \"k\" \"2\"\n    }\n\n    Erl.toString url == \"http://www.foo.com:2000/users/1#a/b?k=2&q=1\"\n\n","type":"Erl.Url -> String"},{"name":"unsetQuery","comment":" Removes key from query string\n    \n    Erl.unsetQuery key url\n","type":"String -> Erl.Url -> Erl.Url"}],"generated-with-elm-version":"0.16.0"}]