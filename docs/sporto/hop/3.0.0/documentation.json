[
  {
    "name": "Hop",
    "comment": " A router for single page applications. See [readme](https://github.com/sporto/hop) for usage.\n\n# Setup\n@docs new\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "new",
        "comment": "\nCreate a Router\n\n    router =\n      Hop.new {\n        matchers = matchers,\n        notFound = NotFound\n      }\n",
        "type": "Hop.Types.Config routeTag -> Hop.Types.Router routeTag"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Hop.Navigate",
    "comment": " Functions for changing the browser location\n\n@docs navigateTo, addQuery, removeQuery, setQuery, clearQuery\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "addQuery",
        "comment": " Add query string values (patches any existing values)\n\n    update action model =\n      case action of\n        ...\n        AddQuery query ->\n          (model, Effects.map HopAction (Hop.addQuery query model.location))\n\n  To remove a value set the value to \"\"\n",
        "type": "Hop.Types.Query -> Hop.Types.Location -> Effects.Effects ()"
      },
      {
        "name": "clearQuery",
        "comment": " Clear all query string values\n\n    update action model =\n      case action of\n        ...\n        ClearQuery ->\n          (model, Effects.map HopAction (Hop.clearQuery model.location))\n",
        "type": "Hop.Types.Location -> Effects.Effects ()"
      },
      {
        "name": "navigateTo",
        "comment": " Changes the location (hash and query)\n\n  navigateTo will append \"#/\" if necessary\n\n    update action model =\n      case action of\n        ...\n        NavigateTo path ->\n          (model, Effects.map HopAction (navigateTo path))\n",
        "type": "String -> Effects.Effects ()"
      },
      {
        "name": "removeQuery",
        "comment": " Remove one query string value\n\n    update action model =\n      case action of\n        ...\n        RemoveQuery query ->\n          (model, Effects.map HopAction (Hop.removeQuery key model.location))\n",
        "type": "String -> Hop.Types.Location -> Effects.Effects ()"
      },
      {
        "name": "setQuery",
        "comment": " Set query string values (removes existing values)\n\n    update action model =\n      case action of\n        ...\n        SetQuery query ->\n          (model, Effects.map HopAction (Hop.setQuery query model.location))\n",
        "type": "Hop.Types.Query -> Hop.Types.Location -> Effects.Effects ()"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Hop.Matchers",
    "comment": "\nFunctions for building matchers and matching paths\n\n# Building matchers\n@docs match1, match2, match3, match4, nested1, nested2, int, str\n\n# Using matchers\n@docs matchPath, matchLocation, matcherToPath\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "int",
        "comment": " Parameter matcher that matches an integer\n\n    match2 User \"/users/\" int\n",
        "type": "Combine.Parser Int"
      },
      {
        "name": "match1",
        "comment": "\nCreate a matcher with one static segment.\n\n    type Route = Books\n\n    match1 Books \"/books\"\n\nThis will match exactly\n\n    \"/books\"\n",
        "type": "route -> String -> Hop.Types.PathMatcher route"
      },
      {
        "name": "match2",
        "comment": "\nCreate a matcher with one static segment and one dynamic parameter.\n\n    type Route = Book Str\n\n    match2 Book \"/books/\" str\n\nThis will match a path like\n\n    \"/books/abc\"\n",
        "type": "(param1 -> route) -> String -> Combine.Parser param1 -> Hop.Types.PathMatcher route"
      },
      {
        "name": "match3",
        "comment": " Create a matcher with three segments.\n\n    type Route = BookReviews Int\n\n    match3 BookReviews \"/books/\" int \"/reviews\"\n\nThis will match a path like\n\n    \"/books/1/reviews\"\n",
        "type": "(param1 -> route) -> String -> Combine.Parser param1 -> String -> Hop.Types.PathMatcher route"
      },
      {
        "name": "match4",
        "comment": " Create a matcher with four segments.\n\n    type Route = BookChapter Int String\n\n    match4 BookChapter \"/books/\" int \"/chapters/\" str\n\nThis will match a path like\n\n    \"/books/1/chapters/abc\"\n\n",
        "type": "(param1 -> param2 -> route) -> String -> Combine.Parser param1 -> String -> Combine.Parser param2 -> Hop.Types.PathMatcher route"
      },
      {
        "name": "matchLocation",
        "comment": "\nMatches a complete location including path and query e.g. \"/users/1/post?a=1\".\nReturns a tuple e.g. (route, location).\n\n    matchLocation matchers NotFound \"/users/1?a=1\"\n\n    ==\n\n    (User 1, location)\n",
        "type": "List (Hop.Types.PathMatcher route) -> route -> String -> ( route, Hop.Types.Location )"
      },
      {
        "name": "matchPath",
        "comment": "\nMatches a path e.g. \"/users/1/comments/2\".\nReturns the matching route.\n\n    matchPath matchers NotFound \"/users/1/comments/2\"\n\n    ==\n\n    User 1 (Comment 2)\n",
        "type": "List (Hop.Types.PathMatcher route) -> route -> String -> route"
      },
      {
        "name": "matcherToPath",
        "comment": "\nGenerates a path from a matcher.\nThe second parameters should be a list of strings.\nYou need to pass one string for each dynamic parameter that this route takes.\n\n    matcherToPath bookReviewMatcher [\"1\", \"2\"]\n\n    ==\n\n    \"/books/1/reviews/2\"\n",
        "type": "Hop.Types.PathMatcher a -> List String -> String"
      },
      {
        "name": "nested1",
        "comment": " Create a matcher with two segments and nested routes\n\n    type CategoriesRoute = Games | Business | Product Int\n    type Route = ShopCategories CategoriesRoute\n\n    nested1 ShopCategories \"/shop\" categoriesRoutes\n\nThis could match paths like (depending on the nested routes)\n\n    \"/shop/games\"\n    \"/shop/business\"\n    \"/shop/product/1\"\n\n",
        "type": "(subRoute -> route) -> String -> List (Hop.Types.PathMatcher subRoute) -> Hop.Types.PathMatcher route"
      },
      {
        "name": "nested2",
        "comment": " Create a matcher with two segments and nested routes\n\n    type ReviewsRoutes = Reviews | Review Int\n    type Route = BookReviews ReviewsRoutes\n\n    nested2 BookReviews \"/books/\" int reviewsRoutes\n\nThis could match paths like (depending on the nested routes)\n\n    \"/books/1/reviews\"\n    \"/books/1/reviews/3\"\n\n",
        "type": "(param1 -> subRoute -> route) -> String -> Combine.Parser param1 -> List (Hop.Types.PathMatcher subRoute) -> Hop.Types.PathMatcher route"
      },
      {
        "name": "str",
        "comment": " Parameter matcher that matches a string, except /\n\n    match2 Token \"/token/\" str\n",
        "type": "Combine.Parser String"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Hop.Types",
    "comment": "\n\n# Types\n@docs Config, Router, PathMatcher, Query, Location\n\n# Create\n@docs newLocation, newQuery\n",
    "aliases": [
      {
        "name": "Config",
        "comment": " Configuration input for Hop.new\n",
        "args": [
          "route"
        ],
        "type": "{ matchers : List (Hop.Types.PathMatcher route), notFound : route }"
      },
      {
        "name": "Location",
        "comment": " A Record that represents the current location\nIncludes a `path` and a `query`\n\n    {\n      path: String,\n      query: Query\n    }\n",
        "args": [],
        "type": "{ path : List String, query : Hop.Types.Query }"
      },
      {
        "name": "PathMatcher",
        "comment": " A path matcher\n",
        "args": [
          "action"
        ],
        "type": "{ parser : Combine.Parser action, segments : List String }"
      },
      {
        "name": "Query",
        "comment": " A Dict that holds query parameters\n\n    Dict.Dict String String\n",
        "args": [],
        "type": "Dict.Dict String String"
      },
      {
        "name": "Router",
        "comment": " Router record created by Hop.new\n",
        "args": [
          "route"
        ],
        "type": "{ run : Task.Task () () , signal : Signal.Signal ( route, Hop.Types.Location ) }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "newLocation",
        "comment": "\nCreate a empty Location record\n",
        "type": "Hop.Types.Location"
      },
      {
        "name": "newQuery",
        "comment": "\nCreate an empty Query record\n",
        "type": "Hop.Types.Query"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  }
]