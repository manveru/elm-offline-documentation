[
  {
    "name": "Matrix",
    "comment": "\nA matrix implemention for Elm.\nInternally it uses a flat array for speed reasons.\n\nThe matrix type\n@docs Matrix\n\nCreating a matrix\n@docs repeat, fromList\n\nDealing with individual elements\n@docs get, set, update\n\nApplying functions\n@docs filter, map, indexedMap",
    "aliases": [
      {
        "name": "Matrix",
        "comment": "\nMatrix a has a given size, and data contained within",
        "args": [
          "a"
        ],
        "type": "{ size : ( Int, Int ), data : Array.Array a }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "filter",
        "comment": "\nKeep only elements that return True when passed to the given function f",
        "type": "(a -> Bool) -> Matrix.Matrix a -> Array.Array a"
      },
      {
        "name": "fromList",
        "comment": "\nCreate a matrix from a list of lists.\nIf the lists within the list are not consistently sized, return Nothing\nOtherwise return a matrix with the size as the size of the outer and nested lists",
        "type": "List (List a) -> Maybe.Maybe (Matrix.Matrix a)"
      },
      {
        "name": "get",
        "comment": "\nGet a value from a given x y and return Just v if it exists\nOtherwise Nothing",
        "type": "Int -> Int -> Matrix.Matrix a -> Maybe.Maybe a"
      },
      {
        "name": "indexedMap",
        "comment": "\nApply a function, taking the (x, y) of every element in the matrix",
        "type": "(Int -> Int -> a -> b) -> Matrix.Matrix a -> Matrix.Matrix b"
      },
      {
        "name": "map",
        "comment": "\nApply a function of every element in the matrix",
        "type": "(a -> b) -> Matrix.Matrix a -> Matrix.Matrix b"
      },
      {
        "name": "repeat",
        "comment": "\nCreate a matrix of a given size x y with a default value of v",
        "type": "Int -> Int -> a -> Matrix.Matrix a"
      },
      {
        "name": "set",
        "comment": "\nSet a value at a given i, j in the matrix and return the new matrix\nIf the i, j is out of bounds then return the unmodified matrix",
        "type": "Int -> Int -> a -> Matrix.Matrix a -> Matrix.Matrix a"
      },
      {
        "name": "update",
        "comment": "\nUpdate an element at x, y with the given update function\nIf out of bounds, return the matrix unchanged",
        "type": "Int -> Int -> (a -> a) -> Matrix.Matrix a -> Matrix.Matrix a"
      }
    ],
    "generated-with-elm-version": "0.15.1"
  }
]