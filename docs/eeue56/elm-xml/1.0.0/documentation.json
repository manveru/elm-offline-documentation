[
  {
    "name": "Xml.Decode",
    "comment": "\n\n@docs decode\n\n@docs decodeInt, decodeFloat, decodeString, decodeString, decodeBool\n\n@docs decodeChildren\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "decode",
        "comment": " Try to decode a string and turn it into an XML value\n    >>> import Xml.Encode exposing (Value(Tag, Object), null)\n    >>> import Dict\n    >>> decode \"<name></name>\"\n    Ok (Object [Tag \"name\" Dict.empty null])\n",
        "type": "String -> Result.Result String Xml.Encode.Value"
      },
      {
        "name": "decodeBool",
        "comment": " Decode a bool\n",
        "type": "String -> Result.Result String Xml.Encode.Value"
      },
      {
        "name": "decodeChildren",
        "comment": " Decode children from a string\n\n    >>> import Xml.Encode exposing (Value(Object, Tag, StrNode))\n    >>> decodeChildren \"<name>hello</name>\"\n    Ok (Object [Tag \"name\" Dict.empty (StrNode \"hello\")] )\n\n",
        "type": "String -> Result.Result String Xml.Encode.Value"
      },
      {
        "name": "decodeFloat",
        "comment": " Decode a float\n    >>> import Xml.Encode exposing (Value(FloatNode))\n    >>> decodeFloat \"hello\"\n    Err \"could not convert string 'hello' to a Float\"\n\n    >>> decodeFloat \"5\"\n    Ok (FloatNode 5.0)\n\n    >>> decodeFloat \"5.5\"\n    Ok (FloatNode 5.5)\n\n",
        "type": "String -> Result.Result String Xml.Encode.Value"
      },
      {
        "name": "decodeInt",
        "comment": " Decode a int\n    >>> import Xml.Encode exposing (Value(IntNode))\n    >>> decodeInt \"hello\"\n    Err \"could not convert string 'hello' to an Int\"\n\n    >>> decodeInt \"5\"\n    Ok (IntNode 5)\n",
        "type": "String -> Result.Result String Xml.Encode.Value"
      },
      {
        "name": "decodeString",
        "comment": " Decode a string\n\n    >>> import Xml.Encode exposing (Value(StrNode))\n    >>> decodeString \"hello\"\n    Ok (StrNode \"hello\")\n",
        "type": "String -> Result.Result String Xml.Encode.Value"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Xml.Query",
    "comment": "\n\n# Search the parsed XML\n\n@docs tags, contains\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "contains",
        "comment": " check if a XML value contains another XML value\n",
        "type": "Xml.Encode.Value -> Xml.Encode.Value -> Bool"
      },
      {
        "name": "tags",
        "comment": " Search an XML value for any tags matching\n\n    >>> import Xml.Encode exposing (object, null, encode, Value(Tag, Object))\n    >>> import Dict\n    >>> object [ (\"name\", Dict.empty, null)] |> tags \"name\"\n    [Tag \"name\" Dict.empty (Object []) ]\n\n",
        "type": "String -> Xml.Encode.Value -> List Xml.Encode.Value"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Xml.Encode",
    "comment": "\n@docs Value\n\n@docs encode\n\n@docs string, int, float, bool, object, null\n",
    "aliases": [],
    "types": [
      {
        "name": "Value",
        "comment": " Representation of the XML tree\n",
        "args": [],
        "cases": [
          [
            "Tag",
            [
              "String",
              "Dict.Dict String Xml.Encode.Value",
              "Xml.Encode.Value"
            ]
          ],
          [
            "StrNode",
            [
              "String"
            ]
          ],
          [
            "IntNode",
            [
              "Int"
            ]
          ],
          [
            "FloatNode",
            [
              "Float"
            ]
          ],
          [
            "BoolNode",
            [
              "Bool"
            ]
          ],
          [
            "Object",
            [
              "List Xml.Encode.Value"
            ]
          ],
          [
            "DocType",
            [
              "String",
              "Dict.Dict String Xml.Encode.Value"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "bool",
        "comment": " Encode an int\n",
        "type": "Bool -> Xml.Encode.Value"
      },
      {
        "name": "encode",
        "comment": " Take a value, then generate a string from it\n",
        "type": "Int -> Xml.Encode.Value -> String"
      },
      {
        "name": "float",
        "comment": " Encode an int\n",
        "type": "Float -> Xml.Encode.Value"
      },
      {
        "name": "int",
        "comment": " Encode an int\n",
        "type": "Int -> Xml.Encode.Value"
      },
      {
        "name": "null",
        "comment": " Empty contents\n",
        "type": "Xml.Encode.Value"
      },
      {
        "name": "object",
        "comment": " Encode an \"object\" (a tag)\n",
        "type": "List ( String, Dict.Dict String Xml.Encode.Value, Xml.Encode.Value ) -> Xml.Encode.Value"
      },
      {
        "name": "string",
        "comment": " Encode an XML string\n",
        "type": "String -> Xml.Encode.Value"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]