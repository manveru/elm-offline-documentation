[{"name":"Dialog","comment":" Elm Modal Dialogs.\n\n@docs view, Config\n","aliases":[{"name":"Config","comment":" The configuration for the dialog you display. The `header`, `body`\nand `footer` are all optional `Html` blocks. Use only the ones you\nwant and set the others to `Nothing`.\n\nThe `closeMessage` is a mandatory message we will send when the user\nclicks to dismiss the modal.\n","args":[],"type":"{ closeMessage : Signal.Message , header : Maybe.Maybe Html.Html , body : Maybe.Maybe Html.Html , footer : Maybe.Maybe Html.Html }"}],"types":[],"values":[{"name":"view","comment":" Renders a modal dialog whenever you supply a `Config`.\n\nTo use this, include this view in your *top-level* view function,\nright at the top of the DOM tree, like so:\n\n    view : Address Action -> Model -> Html\n    view address model =\n      div\n        []\n        [ ...\n        , ...your regular view code....\n        , ...\n        , Dialog.view\n            (if model.shouldShowDialog then\n              Just { closeMessage = Signal.message address AcknowledgeDialogBox\n                   , header = Just (text \"Alert!\"\n                   , body = Just (p [] [text \"Let me tell you something important...\"])\n                   , footer = Nothing\n                   }\n             else\n              Nothing\n            )\n        ]\n\n\nIt's then up to you to replace `model.shouldShowDialog` with whatever\nlogic should cause the dialog to be displayed, and to handle the\n`AcknowledgeDialogBox` with whatever logic should occur when the user\ncloses the dialog.\n\nSee the `examples/` directory for working examples of how this works\nfor apps large and small.\n\n","type":"Maybe.Maybe Dialog.Config -> Html.Html"}],"generated-with-elm-version":"0.16.0"}]