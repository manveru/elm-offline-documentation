[{"name":"ParseInt","comment":" Convert String value to Int, or Int to String, with given radix.\n\nThe `parseInt` function here is similar to Javascript's parseInt(), parsing a\ndecimal string and returning the corresponding Int value if any. `parseIntOct`,\n`parseIntHex`, and `parseIntRadix` parse strings encoded as octal, hexadecimal,\nor arbitrary radix, respectively.\n\nThe `toRadix` function inverts `parseInt`. `toRadix 10` is equivalent to\n`toString` for Int arguments.\n\n# Functions\n@docs parseInt, parseIntOct, parseIntHex, parseIntRadix, toRadix, toRadix'\n\n# Errors\n@docs Error\n","aliases":[],"types":[{"name":"Error","comment":" Possible Result.Err returns from these functions.\n","args":[],"cases":[["InvalidChar",["Char"]],["OutOfRange",["Char"]],["InvalidRadix",["Int"]]]}],"values":[{"name":"parseInt","comment":" Convert String to Int assuming base 10.\n\n    parseInt \"314159\" == Ok 314159\n    parseInt \"foo\" = Err (OutOfRange 'o')\n\n","type":"String -> Result.Result ParseInt.Error Int"},{"name":"parseIntHex","comment":" Convert String to Int assuming base 16 (hexadecimal). No leading characters\nare expected; input starting with \"0x\" (or any other out of range character)\nwill cause an `Err` return.\n","type":"String -> Result.Result ParseInt.Error Int"},{"name":"parseIntOct","comment":" Convert String to Int assuming base 8 (octal). No leading '0' is required.\n","type":"String -> Result.Result ParseInt.Error Int"},{"name":"parseIntRadix","comment":" Convert String to Int assuming given radix. Radix can be any of\n2..36. Leading zeroes are ignored. Valid characters are the alphanumerics: those\nin the ASCII range [0-9a-zA-Z]. Case does not matter. For radixes beyond 16 the\nnormal [A-F] range for hexadecimal is extended in the natural way. Any invalid\ncharacter results in a `Err` return. Any valid character outside of the range\ndefined by the radix also results in an `Err`. In particular, any initial '-' or\n' ' (space) is an error. An `Ok` return means that the entire input string was\nconsumed. The empty string results in `Ok 0`\n\n    parseIntRadix 16 \"DEADBEEF\" = Ok 3735928559\n","type":"Int -> String -> Result.Result ParseInt.Error Int"},{"name":"toRadix","comment":" Convert Int to String assuming given radix. Radix values from 2..36 are\nallowed; others result in an `Err InvalidRadix`. Negative numbers get an initial\n'-'.\n\n    toRadix 16 1234 == Ok \"4D2\"\n    toRadix 8 -99 == Ok \"-143\"\n","type":"Int -> Int -> Result.Result ParseInt.Error String"},{"name":"toRadix'","comment":" Convert Int to String assuming given radix. Radix value must be in 2..36\n(not checked, so it can crash).\n\n    toRadix' 16 3735928559 == \"DEADBEEF\"\n    toRadix' 37 36 --> crash\n","type":"Int -> Int -> String"}],"generated-with-elm-version":"0.16.0"}]