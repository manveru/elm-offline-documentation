[
  {
    "name": "Function.Extra",
    "comment": "Higher-order helpers for working with functions.\n\n# Higher-order helpers\n@docs map, map2, map3, map4\n@docs apply, andThen\n@docs curry3, curry4, curry5\n@docs uncurry3, uncurry4, uncurry5",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "andThen",
        "comment": "Connect the result `a` of the first function to the first argument of the second function to form a pipeline.\nThen, send `x` into each function along the pipeline in order to execute it in a sequential manner.\n\nThe `(x -> ...)` pattern is sometimes refered to as a \"Reader\" of `x`, where `x` represents some ancillary environment within which we would like to operate.\nThis allows `andThen` to repeatedly read from the environment `x` and send the result into to the next function, which in turn reads from the environment `x` again and so forth.\n\n    (f `andThen` g `andThen` h) x == (h (g (f x) x) x)",
        "type": "(x -> a) -> (a -> x -> b) -> x -> b"
      },
      {
        "name": "apply",
        "comment": "Incrementally apply more functions, similar to `map*N*` where `*N*` is not fixed.\n\nThe `(x -> ...)` pattern is sometimes refered to as a \"Reader\" of `x`, where `x` represents some ancillary environment within which we would like to operate.\nThis allows `apply` to compose two function `f` and `fa` similar to `f << fa`, but instead passes the environment into both so that \n\n    (f `apply` g `apply` h) x == (f x << g x << h x)",
        "type": "(x -> a -> b) -> (x -> a) -> x -> b"
      },
      {
        "name": "curry3",
        "comment": "Change how arguments are passed to a function.\nThis splits 3-tupled arguments into three separate arguments.",
        "type": "(( a, b, c ) -> x) -> a -> b -> c -> x"
      },
      {
        "name": "curry4",
        "comment": "Change how arguments are passed to a function.\nThis splits 4-tupled arguments into four separate arguments.",
        "type": "(( a, b, c, d ) -> x) -> a -> b -> c -> d -> x"
      },
      {
        "name": "curry5",
        "comment": "Change how arguments are passed to a function.\nThis splits 5-tupled arguments into five separate arguments.",
        "type": "(( a, b, c, d, e ) -> x) -> a -> b -> c -> d -> e -> x"
      },
      {
        "name": "map",
        "comment": "Map into a function with a fixed input `x`. This function is just an alias for `(<<)`, the function composition operator.\n\n    (Function.map f fa) == (f << fa)\n\nThe `(x -> ...)` pattern is sometimes refered to as a \"Reader\" of `x`, where `x` represents some ancillary environment within which we would like to operate.\nThis allows `map` to transform a \"Reader\" that produces an `a` into a \"Reader\" that produces a `b`.",
        "type": "(a -> b) -> (x -> a) -> x -> b"
      },
      {
        "name": "map2",
        "comment": "Send a single argument `x` into a binary function using two intermediate mappings.\nSee also `apply`.\n\nThe `(x -> ...)` patterns are sometimes refered to as \"Readers\" of `x`, where `x` represents some ancillary environment within which we would like to operate.\nThis allows `map2` to read two variables from the environment `x` before applying them to a binary function `f`.",
        "type": "(a -> b -> c) -> (x -> a) -> (x -> b) -> x -> c"
      },
      {
        "name": "map3",
        "comment": "Send a single argument `x` into a ternary function using three intermediate mappings.\n\nThe `(x -> ...)` patterns are sometimes refered to as \"Readers\" of `x`, where `x` represents some ancillary environment within which we would like to operate.\nThis allows `map3` to read three variables from the environment `x` before applying them to a ternary function `f`.",
        "type": "(a -> b -> c -> d) -> (x -> a) -> (x -> b) -> (x -> c) -> x -> d"
      },
      {
        "name": "map4",
        "comment": "Send a single argument `x` into a quaternary function using four intermediate mappings.\nUse `apply` as an infix combinator in order to deal with a larger numbers of arguments.\n\nThe `(x -> ...)` patterns are sometimes refered to as \"Readers\" of `x`, where `x` represents some ancillary environment within which we would like to operate.\nThis allows `map4` to read four variables from the environment `x` before applying them to a quaternary function `f`.",
        "type": "(a -> b -> c -> d -> e) -> (x -> a) -> (x -> b) -> (x -> c) -> (x -> d) -> x -> e"
      },
      {
        "name": "uncurry3",
        "comment": "Change how arguments are passed to a function.\nThis combines three arguments into a single 3-tuple.",
        "type": "(a -> b -> c -> x) -> ( a, b, c ) -> x"
      },
      {
        "name": "uncurry4",
        "comment": "Change how arguments are passed to a function.\nThis combines four arguments into a single 4-tuple.",
        "type": "(a -> b -> c -> d -> x) -> ( a, b, c, d ) -> x"
      },
      {
        "name": "uncurry5",
        "comment": "Change how arguments are passed to a function.\nThis combines five arguments into a single 5-tuple.",
        "type": "(a -> b -> c -> d -> e -> x) -> ( a, b, c, d, e ) -> x"
      }
    ],
    "generated-with-elm-version": "old"
  }
]