[{"name":"Array.Extra","comment":"Convenience functions for working with Array\n\n# Higher order helpers\n@docs filterMap, apply, map2, map3, map4, map5\n\n# Slicing / resizing\n@docs resizelRepeat, resizerRepeat, resizelIndexed, resizerIndexed, splitAt, removeAt\n\n# Unsafe\n@docs getUnsafe","aliases":[],"types":[],"values":[{"name":"apply","comment":"Apply an array of functions to an array of values.","type":"Array (a -> b) -> Array a -> Array b"},{"name":"filterMap","comment":"Apply a function that may succeed to all values in the array, but only keep the successes.\n\n    String.toInt : String -> Maybe Int\n    filterMap String.toInt (fromList [\"3\", \"4.0\", \"5\", \"hats\"]) == fromList [3,5]","type":"(a -> Maybe b) -> Array a -> Array b"},{"name":"getUnsafe","comment":"Unsafe version of get, don't use this unless you know what you're doing!","type":"Int -> Array a -> a"},{"name":"map2","comment":"Combine two arrays, combining them with the given function.\nIf one array is longer, the extra elements are dropped.\n\n    map2 (+) [1,2,3] [1,2,3,4] == [2,4,6]\n    map2 (,) [1,2,3] ['a','b'] == [ (1,'a'), (2,'b') ]\n    pairs : Array a -> Array b -> Array (a,b)\n    pairs lefts rights =\n        map2 (,) lefts rights","type":"(a -> b -> result) -> Array a -> Array b -> Array result"},{"name":"map3","comment":"","type":"(a -> b -> c -> result) -> Array a -> Array b -> Array c -> Array result"},{"name":"map4","comment":"","type":"(a -> b -> c -> d -> result) -> Array a -> Array b -> Array c -> Array d -> Array result"},{"name":"map5","comment":"","type":"(a -> b -> c -> d -> e -> result) -> Array a -> Array b -> Array c -> Array d -> Array e -> Array result"},{"name":"removeAt","comment":"Remove the element at the given index","type":"Int -> Array a -> Array a"},{"name":"resizelIndexed","comment":"Resize an array from the left, padding the right-hand side with the given index function.","type":"Int -> (Int -> a) -> Array a -> Array a"},{"name":"resizelRepeat","comment":"Reduce a list from the left, building up all of the intermediate results into a list.","type":"Int -> a -> Array a -> Array a"},{"name":"resizerIndexed","comment":"Resize an array from the right, padding the left-hand side with the given index function.","type":"Int -> (Int -> a) -> Array a -> Array a"},{"name":"resizerRepeat","comment":"Resize an array from the right, padding the left-hand side with the given value.","type":"Int -> a -> Array a -> Array a"},{"name":"splitAt","comment":"Split an array into two arrays, the first ending at and the second starting at the given index","type":"Int -> Array a -> ( Array a, Array a )"},{"name":"zip","comment":"Zip arrays into tuples","type":"Array a -> Array b -> Array ( a, b )"},{"name":"zip3","comment":"","type":"Array a -> Array b -> Array c -> Array ( a, b, c )"},{"name":"zip4","comment":"","type":"Array a -> Array b -> Array c -> Array d -> Array ( a, b, c, d )"},{"name":"zip5","comment":"","type":"Array a -> Array b -> Array c -> Array d -> Array e -> Array ( a, b, c, d, e )"}],"generated-with-elm-version":"old"}]