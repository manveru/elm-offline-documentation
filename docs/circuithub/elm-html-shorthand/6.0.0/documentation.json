[
  {
    "name": "Html.Shorthand",
    "comment": "Shorthands for common Html elements\n\n# Conventions\nThe following conventions are used for shorthands. One example is provided for each.\n\n## Elision form\nThe attributes argument of the node is elided, with only the list of children remaining.\n\nVery rarely, when an idiomatic form is highly desirable, the elision form has not been provided.\nThis is done in order to encourage more uniform use. For example:\n* An `img` tag will almost certainly benefit from having `src` and `alt` attributes.\n* Some structural elements such as `section`, `aside`, `article` and `figure` should quite likely list an `id` in order to help users target interesting portions of your website via a URL.\n* Other elements, such as `hr` are not included simply because it does not make sense to provide them with *any* child elements whatsoever. In this case the idiomatic form, `hr'`, appropriate.\n\n@docs div_\n\n## Idiomatic form\n\nThis form attempts to take a common sense list of arguments. This is a limited shorthand which\nwill not satisfy every need, but takes care of the extremely common case and encourages uniform use.\nWhen an element is missing the elision form, an idiomatic form will always be provided. \n\n@docs img'\n\n## Classy form\n\nAnother very common case is creating elements for mostly aesthetic reasons.\nFor this it is frequently convenient to specify only a `class` attribute and not much else.\nThese 'c'-suffixed shorthands are identical to the idiomatic form with the addition of a class string\n(space separated string of CSS classes) argument.\n\n@docs divc\n\n# Basic type aliases\nThe following types are all aliases for `String` and as such, only serve documentation purposes.\n\n@docs IdString, ClassString, UrlString, TextString\n\n# Encoders\n@docs encodeId, encodeClass\n\n# Idiomatic attributes\n@docs id', class'\n\n# Sections\n@docs body_, bodyc, section', sectionc, nav_, navc, article', articlec, aside', asidec\n@docs h1', h1c, h2', h2c, h3', h3c, h4', h4c, h5', h5c, h6', h6c, header_, headerc, footer_, footerc\n@docs address_, addressc, main_, mainc\n\n# Grouping content\n@docs p_, p', pc, pre_, prec, blockquote_, blockquote', blockquotec, ol_, olc, ul_, ulc, li_, li', lic, dl_, dlc, dt', dtc, dd', ddc\n@docs figure', figurec, figcaption_, figcaption', figcaptionc\n@docs div_, divc, a', ac, em_, em', emc, strong_, strong', strongc, small_, small', smallc, s_, s', sc\n@docs cite_, citec, q_, q', qc, dfn', dfnc, abbr', abbrc, time_\n-- time'\n-- timec\n@docs code_, code', codec, var', varc, samp_, samp', sampc, kbd_, kbd', kbdc\n@docs sub_, sub', subc, sup_, sup', supc, i_, i', ic, b_, b', bc, u_, u', uc, mark_, mark', markc\n@docs ruby_, rubyc, rt', rtc, rp', rpc, bdi_, bdi', bdic\n-- bdo'\n-- bdoc\n@docs span_, spanc\n\n# Edits\n@docs ins_\n-- ins'\n-- insc\n@docs del_\n-- del'\n-- delc\n\n# Embedded content\n@docs img', imgc, iframe', iframec, embed', embedc\n-- object'\n-- objectc\n@docs param', video', videoc, audio', audioc\n-- source'\n-- sourcec\n-- track'\n-- trackc\n@docs map_, area_\n-- svg_\n-- svg'\n-- svgc\n-- math_\n-- math'\n-- mathc\n\n# Tabular data\n@docs table_, tablec, caption_, captionc\n-- colgroup_\n-- colgroup'\n-- colgroupc\n-- col_\n-- col'\n-- colc\n@docs tbody_, tbodyc, thead_, theadc, tfoot_, tfootc, tr_, trc, td_, td', tdc, th_, th', thc\n\n# Forms\n@docs form_, form', formc, fieldset_, fieldsetc, legend', legendc, label_, label', labelc\n@docs FieldUpdate, fieldUpdate\n@docs inputField', inputFieldc, inputText', inputTextc, inputFloat', inputFloatc, inputInt', inputIntc\n-- radio'\n-- radioc\n-- checkbox'\n-- checkboxc\n@docs button_, button', buttonc, buttonLink', buttonLinkc, buttonSubmit_, buttonSubmit', buttonSubmitc, buttonReset_, buttonReset', buttonResetc\n-- select_\n-- select'\n-- selectc\n-- datalist_\n-- datalist'\n-- datalistc\n-- optgroup_\n-- optgroup'\n-- optgroupc\n-- option_\n-- option'\n-- optionc\n-- textarea_\n-- textarea'\n-- textareac\n-- keygen_\n-- keygen'\n-- keygenc\n-- output_\n-- output'\n-- outputc\n@docs progress', progressc\n-- meter_\n-- meter'\n-- meterc\n\n# Interactive elements\n-- details_\n-- details'\n-- detailsc\n-- summary_\n-- summary'\n-- summaryc\n-- menuitem_\n-- menuitem'\n-- menuitemc\n-- menu_\n-- menu'\n-- menuc",
    "aliases": [
      {
        "name": "FieldUpdate",
        "comment": "Update style for input fields.\n\n* *continuous* - continuously send messages on any input event (`on \"input\"`)\n* *onEnter* - a message to send when whenever the enter key is hit",
        "args": [
          "a"
        ],
        "type": "T.FieldUpdate a"
      },
      {
        "name": "TextString",
        "comment": "The string passed to a function taking this parameter will be rendered as textual content via `text`.",
        "args": [],
        "type": "T.TextString"
      },
      {
        "name": "UrlString",
        "comment": "Only valid urls should be passed to functions taking this parameter",
        "args": [],
        "type": "T.UrlString"
      },
      {
        "name": "ClassString",
        "comment": "Class parameters will automatically be encoded via `encodeClass`",
        "args": [],
        "type": "T.ClassString"
      },
      {
        "name": "IdString",
        "comment": "Id parameters will automatically be encoded via `encodeId`",
        "args": [],
        "type": "T.IdString"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "a'",
        "comment": "[&lt;a&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) represents a hyperlink , linking to another resource.",
        "type": "UrlString -> TextString -> Html"
      },
      {
        "name": "abbr'",
        "comment": "[&lt;abbr&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr) represents an abbreviation or an acronym ; the expansion of the\nabbreviation can be represented in the title attribute.",
        "type": "TextString -> Html"
      },
      {
        "name": "abbrc",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "ac",
        "comment": "",
        "type": "ClassString -> UrlString -> TextString -> Html"
      },
      {
        "name": "address_",
        "comment": "[&lt;address&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address) defines a section containing contact information.\n\n**Do:**\n* [place inside the &lt;footer&gt; where appropriate](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address#Summary)\n\n**Don't:**\n* [represent an arbitrary, unrelated address](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address#Summary)",
        "type": "List Html -> Html"
      },
      {
        "name": "addressc",
        "comment": "",
        "type": "ClassString -> List Html -> Html"
      },
      {
        "name": "article'",
        "comment": "[&lt;article&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article) defines self-contained content that could exist independently of the rest\nof the content.\n\n**Do:**\n* [use &lt;article&gt; for self-contained components with informational content](http://html5doctor.com/the-article-element/)\n* [use &lt;article&gt; for blog entries, user-submitted comments, interactive educational gadgets](http://html5doctor.com/the-article-element/)\n\n**Don't:**\n* [confuse &lt;article&gt; with &lt;section&gt; which need not be self-contained](http://www.brucelawson.co.uk/2010/html5-articles-and-sections-whats-the-difference/)",
        "type": "IdString -> List Html -> Html"
      },
      {
        "name": "articlec",
        "comment": "",
        "type": "ClassString -> IdString -> List Html -> Html"
      },
      {
        "name": "aside'",
        "comment": "[&lt;aside&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside) defines some content loosely related to the page content. If it is removed,\nthe remaining content still makes sense.",
        "type": "IdString -> List Html -> Html"
      },
      {
        "name": "asidec",
        "comment": "",
        "type": "ClassString -> IdString -> List Html -> Html"
      },
      {
        "name": "audio'",
        "comment": "[&lt;audio&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio) represents a sound or audio stream.\n\nDoesn't allow for &lt;track&gt;s &lt;source&gt;s, please use `audio` for that.",
        "type": "UrlString -> Html"
      },
      {
        "name": "audioc",
        "comment": "",
        "type": "ClassString -> UrlString -> Html"
      },
      {
        "name": "b'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "b_",
        "comment": "[&lt;b&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b) represents a text which to which attention is drawn for utilitarian\npurposes. It doesn't convey extra importance and doesn't imply an alternate voice.",
        "type": "List Html -> Html"
      },
      {
        "name": "bc",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "bdi'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "bdi_",
        "comment": "[&lt;bdi&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdi) represents text that must be isolated from its surrounding for\nbidirectional text formatting. It allows embedding a span of text with a\ndifferent, or unknown, directionality.",
        "type": "List Html -> Html"
      },
      {
        "name": "bdic",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "blockquote'",
        "comment": "",
        "type": "UrlString -> List Html -> Html"
      },
      {
        "name": "blockquote_",
        "comment": "[&lt;blockquote&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote) represents a content that is quoted from another source.\n\nThe idiomatic form uses a cite url, but an elision form is also provided.\n\n**Don't:**\n* use blockquote for short, inline quotations, we have &lt;`q'`&gt; for that",
        "type": "List Html -> Html"
      },
      {
        "name": "blockquotec",
        "comment": "",
        "type": "ClassString -> UrlString -> List Html -> Html"
      },
      {
        "name": "body_",
        "comment": "[&lt;body&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body) represents the content of an HTML document. There is only one `body`\nelement in a document.",
        "type": "List Html -> Html"
      },
      {
        "name": "bodyc",
        "comment": "",
        "type": "ClassString -> List Html -> Html"
      },
      {
        "name": "br'",
        "comment": "[&lt;br&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br) represents a line break.",
        "type": "Html"
      },
      {
        "name": "button'",
        "comment": "",
        "type": "TextString -> Signal.Message -> Html"
      },
      {
        "name": "buttonLink'",
        "comment": "",
        "type": "TextString -> Signal.Message -> Html"
      },
      {
        "name": "buttonLinkc",
        "comment": "",
        "type": "ClassString -> TextString -> Signal.Message -> Html"
      },
      {
        "name": "buttonReset'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "buttonReset_",
        "comment": "",
        "type": "List Html -> Html"
      },
      {
        "name": "buttonResetc",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "buttonSubmit'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "buttonSubmit_",
        "comment": "",
        "type": "List Html -> Html"
      },
      {
        "name": "buttonSubmitc",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "button_",
        "comment": "[&lt;button&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button) represents a button.",
        "type": "List Html -> Html"
      },
      {
        "name": "buttonc",
        "comment": "",
        "type": "ClassString -> TextString -> Signal.Message -> Html"
      },
      {
        "name": "caption_",
        "comment": "[&lt;caption&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption) represents the title of a table.",
        "type": "List Html -> Html"
      },
      {
        "name": "captionc",
        "comment": "",
        "type": "ClassString -> List Html -> Html"
      },
      {
        "name": "cite_",
        "comment": "[&lt;cite&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite) represents the title of a work.\n\n**Do:**\n* [consider using an anchor inside of the cite to link to the origin](http://html5doctor.com/cite-and-blockquote-reloaded/)",
        "type": "List Html -> Html"
      },
      {
        "name": "citec",
        "comment": "",
        "type": "ClassString -> List Html -> Html"
      },
      {
        "name": "class'",
        "comment": "Encoded class attribute. Uses `encodeClass` to ensure that the classes are nicely normalized.",
        "type": "ClassString -> Attribute"
      },
      {
        "name": "code'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "code_",
        "comment": "[&lt;code&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code) represents computer code.\n\n`code` or `code_` can be used for code that includes color highlighting.\n`code'` and `codec` can be used for simple unhighlighted code fragments.",
        "type": "List Html -> Html"
      },
      {
        "name": "codec",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "dd'",
        "comment": "[&lt;dd&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd) represents the definition of the terms immediately listed before it.",
        "type": "TextString -> Html"
      },
      {
        "name": "ddc",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "del_",
        "comment": "[&lt;del&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del) defines a removal from the document.",
        "type": "List Html -> Html"
      },
      {
        "name": "dfn'",
        "comment": "[&lt;dfn&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn) represents a term whose definition is contained in its nearest ancestor\ncontent.",
        "type": "IdString -> List Html -> Html"
      },
      {
        "name": "dfnc",
        "comment": "",
        "type": "ClassString -> IdString -> List Html -> Html"
      },
      {
        "name": "div_",
        "comment": "[&lt;div&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div) represents a generic container with no special meaning.",
        "type": "List Html -> Html"
      },
      {
        "name": "divc",
        "comment": "",
        "type": "ClassString -> List Html -> Html"
      },
      {
        "name": "dl_",
        "comment": "[&lt;dl&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl) defines a definition list, that is, a list of terms and their associated\ndefinitions.",
        "type": "List Html -> Html"
      },
      {
        "name": "dlc",
        "comment": "",
        "type": "ClassString -> List Html -> Html"
      },
      {
        "name": "dt'",
        "comment": "[&lt;dt&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt) represents a term defined by the next `dd`.",
        "type": "IdString -> TextString -> Html"
      },
      {
        "name": "dtc",
        "comment": "",
        "type": "ClassString -> IdString -> TextString -> Html"
      },
      {
        "name": "em'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "em_",
        "comment": "[&lt;em&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em) represents emphasized text, like a stress accent.",
        "type": "List Html -> Html"
      },
      {
        "name": "embed'",
        "comment": "[&lt;embed&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed) represents a integration point for an external, often non-HTML,\napplication or interactive content.",
        "type": "String -> UrlString -> Int -> Int -> Html"
      },
      {
        "name": "embedc",
        "comment": "",
        "type": "ClassString -> String -> UrlString -> Int -> Int -> Html"
      },
      {
        "name": "emc",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "encodeClass",
        "comment": "A simplistic way of encoding of `class` attributes into a [sane format](http://stackoverflow.com/a/72577).\nThis is used internally by all of the shorthands that take a `ClassString`.\n\n* Everything is turned into lowercase\n* Only alpha-numeric characters (a-z,A-Z,0-9), hyphens (-) and underscores (_) are passed through the filter.\n* Trim hyphens (-) and underscores (_) on the sides of each class.\n* If the first character is a number, 'x' will be prepended.\n* Empty strings are allowed\n\nE.g.\n\n    encodeClass \"Color.encoding: BLUE-GREEN\" == \"colorencoding blue-green\"\n    encodeClass \"99-bottles... 98-bottles\" == \"x99-bottles x98-bottles\"\n    encodeClass \"_internal-class-\" == \"internal-class\"\n    encodeClass \" \\t \\n\" == \"\"",
        "type": "ClassString -> ClassString"
      },
      {
        "name": "encodeId",
        "comment": "A simplistic way of encoding `id` attributes into a [sane format](http://stackoverflow.com/a/72577).\nThis is used internally by all of the shorthands that take an `IdString`.\n\n* Everything is turned into lowercase\n* Only alpha-numeric characters (a-z,A-Z,0-9), hyphens (-) and underscores (_) are passed through the filter.\n* Trim hyphens (-) and underscores (_) off the sides.\n* If the first character is a number, 'x' will be prepended.\n* Empty strings are allowed\n\nE.g.\n\n    encodeId \"Elmo teaches Elm!\" == \"elmo-teaches-elm\"\n    encodeId \"99 bottles of beer, 98 bottles...\" == \"x99-bottles-of-beer-98-bottles\"\n    encodeId \"_internal- -<-identifier->-\" == \"internal-identifier\"\n    encodeId \" \\t \\n\" == \"\"",
        "type": "IdString -> IdString"
      },
      {
        "name": "fieldUpdate",
        "comment": "Default field update handlers. Use this to select only one or two handlers.\n\n    { fieldUpdate\n    | continuous <- Just (\\val -> Signal.send updates (MyEvent val))\n    }",
        "type": "FieldUpdate a"
      },
      {
        "name": "fieldset_",
        "comment": "[&lt;fieldset&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset) represents a set of controls.",
        "type": "List Html -> Html"
      },
      {
        "name": "fieldsetc",
        "comment": "",
        "type": "ClassString -> List Html -> Html"
      },
      {
        "name": "figcaption'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "figcaption_",
        "comment": "[&lt;figcaption&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption) represents the legend of a figure.",
        "type": "List Html -> Html"
      },
      {
        "name": "figcaptionc",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "figure'",
        "comment": "[&lt;figure&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure) represents a figure illustrated as part of the document.\n\n**Do:**\n* [use figure for captioned content](http://html5doctor.com/the-figure-figcaption-elements/)\n* [use figure for things other than images: video, audio, a chart, a table etc](http://html5doctor.com/the-figure-figcaption-elements/)\n\n**Don't:**\n* [turn every image into a figure](http://html5doctor.com/avoiding-common-html5-mistakes/#figure)",
        "type": "IdString -> List Html -> Html"
      },
      {
        "name": "figurec",
        "comment": "",
        "type": "ClassString -> IdString -> List Html -> Html"
      },
      {
        "name": "footer_",
        "comment": "[&lt;footer&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer) defines the footer for a page or section. It often contains a copyright\nnotice, some links to legal information, or addresses to give feedback.",
        "type": "List Html -> Html"
      },
      {
        "name": "footerc",
        "comment": "",
        "type": "ClassString -> List Html -> Html"
      },
      {
        "name": "form'",
        "comment": "",
        "type": "String -> String -> List Html -> Html"
      },
      {
        "name": "form_",
        "comment": "[&lt;form&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form) represents a form , consisting of controls, that can be submitted to a\nserver for processing.",
        "type": "List Html -> Html"
      },
      {
        "name": "formc",
        "comment": "",
        "type": "ClassString -> String -> String -> List Html -> Html"
      },
      {
        "name": "h1'",
        "comment": "[&lt;h*n*&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) provide titles for sections and subsections, describing the topic it introduces.\n\n**Do:**\n* [use &lt;h*n*&gt; to define a document outline](http://www.paciellogroup.com/blog/2013/10/html5-document-outline/)\n* [try to have only one first level &lt;h*n*&gt; on a page](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements)\n* [introduce &lt;section&gt;s with headings](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements)\n\n**Don't:**\n* [skip &lt;h*n*&gt; levels if you can help it](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements)\n* [style &lt;h*n*&gt;s using html5 &lt;section&gt;s](http://www.stubbornella.org/content/2011/09/06/style-headings-using-html5-sections/)\n* [use &lt;h*n*&gt; for subtitles, subheadings](http://html5doctor.com/howto-subheadings/)",
        "type": "TextString -> Html"
      },
      {
        "name": "h1c",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "h2'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "h2c",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "h3'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "h3c",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "h4'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "h4c",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "h5'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "h5c",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "h6'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "h6c",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "header_",
        "comment": "[&lt;header&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header) defines the header of a page or section. It often contains a logo, the\ntitle of the web site, and a navigational table of content.\n\n**Don't:**\n* [overuse &lt;header&gt;](http://html5doctor.com/avoiding-common-html5-mistakes/#header-hgroup)",
        "type": "List Html -> Html"
      },
      {
        "name": "headerc",
        "comment": "",
        "type": "ClassString -> List Html -> Html"
      },
      {
        "name": "hr'",
        "comment": "[&lt;hr&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr) represents a thematic break between paragraphs of a section or article or\nany longer content.\n\nNo classy form is provided in order to prevent abuse.",
        "type": "Html"
      },
      {
        "name": "i'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "i_",
        "comment": "[&lt;i&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i) represents some text in an alternate voice or mood, or at least of\ndifferent quality, such as a taxonomic designation, a technical term, an\nidiomatic phrase, a thought, or a ship name.",
        "type": "List Html -> Html"
      },
      {
        "name": "ic",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "id'",
        "comment": "Encoded id attribute. Uses `encodeId` to ensure that the id is nicely normalized.",
        "type": "IdString -> Attribute"
      },
      {
        "name": "iframe'",
        "comment": "[&lt;iframe&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe) embedded an HTML document.",
        "type": "UrlString -> Int -> Int -> Html"
      },
      {
        "name": "iframec",
        "comment": "",
        "type": "ClassString -> UrlString -> Int -> Int -> Html"
      },
      {
        "name": "img'",
        "comment": "[&lt;img&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img) represents an image.\n\nThere is no `img_` function since it is expected that images will *always* have at least 'src' and 'alt' attributes.",
        "type": "UrlString -> Int -> Int -> String -> Html"
      },
      {
        "name": "imgc",
        "comment": "",
        "type": "ClassString -> UrlString -> Int -> Int -> String -> Html"
      },
      {
        "name": "inputField'",
        "comment": "[&lt;input&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) represents a typed data field allowing the user to edit the data.",
        "type": "IdString -> String -> Maybe String -> String -> Json.Decoder a -> FieldUpdate a -> Html"
      },
      {
        "name": "inputFieldc",
        "comment": "",
        "type": "ClassString -> IdString -> String -> Maybe String -> String -> Json.Decoder a -> FieldUpdate a -> Html"
      },
      {
        "name": "inputFloat'",
        "comment": "",
        "type": "IdString -> Maybe String -> Float -> FieldUpdate Float -> Html"
      },
      {
        "name": "inputFloatc",
        "comment": "",
        "type": "ClassString -> IdString -> Maybe String -> Float -> FieldUpdate Float -> Html"
      },
      {
        "name": "inputInt'",
        "comment": "",
        "type": "IdString -> Maybe String -> Int -> FieldUpdate Int -> Html"
      },
      {
        "name": "inputIntc",
        "comment": "",
        "type": "ClassString -> IdString -> Maybe String -> Int -> FieldUpdate Int -> Html"
      },
      {
        "name": "inputText'",
        "comment": "",
        "type": "IdString -> Maybe String -> String -> FieldUpdate String -> Html"
      },
      {
        "name": "inputTextc",
        "comment": "",
        "type": "ClassString -> IdString -> Maybe String -> String -> FieldUpdate String -> Html"
      },
      {
        "name": "ins_",
        "comment": "[&lt;ins&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins) defines an addition to the document.",
        "type": "List Html -> Html"
      },
      {
        "name": "kbd'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "kbd_",
        "comment": "[&lt;kbd&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd) represents user input, often from the keyboard, but not necessarily; it\nmay represent other input, like transcribed voice commands.\n\n    instructions : Html\n    instructions =\n        p_ \n        [ text \"Press \"\n        , kbd_ [ kbd' \"Ctrl\", text \"+\", kbd' \"S\" ]\n        , text \" to save this document.\"\n        ]",
        "type": "List Html -> Html"
      },
      {
        "name": "kbdc",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "label'",
        "comment": "",
        "type": "IdString -> TextString -> Html"
      },
      {
        "name": "label_",
        "comment": "[&lt;label&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label) represents the caption of a form control.",
        "type": "List Html -> Html"
      },
      {
        "name": "labelc",
        "comment": "",
        "type": "ClassString -> IdString -> TextString -> Html"
      },
      {
        "name": "legend'",
        "comment": "[&lt;legend&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend) represents the caption for a `fieldset`.",
        "type": "TextString -> Html"
      },
      {
        "name": "legendc",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "li'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "li_",
        "comment": "[&lt;li&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li) defines a item of an enumeration list.",
        "type": "List Html -> Html"
      },
      {
        "name": "lic",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "main_",
        "comment": "[&lt;main&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main) defines the main or important content in the document. There is only one\n`main` element in the document.\n\nNote that main' is provided by [elm-html](http://package.elm-lang.org/packages/evancz/elm-html/latest/Html#main'), not by this package which only provides `main_`.",
        "type": "List Html -> Html"
      },
      {
        "name": "mainc",
        "comment": "",
        "type": "ClassString -> List Html -> Html"
      },
      {
        "name": "mark'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "mark_",
        "comment": "[&lt;mark&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark) represents text highlighted for reference purposes, that is for its\nrelevance in another context.",
        "type": "List Html -> Html"
      },
      {
        "name": "markc",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "nav_",
        "comment": "[&lt;nav&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav) defines a section that contains only navigation links.\n\n**Do:**\n* [use &lt;nav&gt; for major navigation](http://html5doctor.com/avoiding-common-html5-mistakes/#nav-external)\n\n**Don't:**\n* [wrap all lists of links in &lt;nav&gt;](http://html5doctor.com/avoiding-common-html5-mistakes/#nav-external)",
        "type": "List Html -> Html"
      },
      {
        "name": "navc",
        "comment": "",
        "type": "ClassString -> List Html -> Html"
      },
      {
        "name": "ol_",
        "comment": "[&lt;ol&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol) defines an ordered list of items.",
        "type": "List Html -> Html"
      },
      {
        "name": "olc",
        "comment": "",
        "type": "ClassString -> List Html -> Html"
      },
      {
        "name": "p'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "p_",
        "comment": "[&lt;p&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p) defines a portion that should be displayed as a paragraph of text.",
        "type": "List Html -> Html"
      },
      {
        "name": "param'",
        "comment": "[&lt;param&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/param) defines parameters for use by plug-ins invoked by `object` elements.",
        "type": "String -> String -> Html"
      },
      {
        "name": "pc",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "pre_",
        "comment": "[&lt;pre&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre) indicates that its content is preformatted and that this format must be\npreserved.\n\n**Do:**\n* [use &lt;pre&gt; for blocks of whitespace sensitive text that must not wrap](http://stackoverflow.com/a/4611735)\n* use &lt;pre&gt; as a wrapper for blocks &lt;`code_`&gt;\n* use &lt;pre&gt; as a wrapper for blocks of &lt;`samp_`&gt; output from a computer program",
        "type": "List Html -> Html"
      },
      {
        "name": "prec",
        "comment": "",
        "type": "ClassString -> List Html -> Html"
      },
      {
        "name": "progress'",
        "comment": "[&lt;progress&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress) represents the completion progress of a task.",
        "type": "number -> number -> String -> Html"
      },
      {
        "name": "progressc",
        "comment": "",
        "type": "ClassString -> number -> number -> String -> Html"
      },
      {
        "name": "q'",
        "comment": "",
        "type": "UrlString -> TextString -> Html"
      },
      {
        "name": "q_",
        "comment": "[&lt;q&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q) represents an inline quotation.\n\nThe idiomatic form uses a cite url, but the elision is also provided.",
        "type": "List Html -> Html"
      },
      {
        "name": "qc",
        "comment": "",
        "type": "ClassString -> UrlString -> TextString -> Html"
      },
      {
        "name": "rp'",
        "comment": "[&lt;rp&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp) represents parenthesis around a ruby annotation, used to display the\nannotation in an alternate way by browsers not supporting the standard display\nfor annotations.",
        "type": "TextString -> Html"
      },
      {
        "name": "rpc",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "rt'",
        "comment": "[&lt;rt&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt) represents the text of a ruby annotation .",
        "type": "TextString -> Html"
      },
      {
        "name": "rtc",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "ruby_",
        "comment": "[&lt;ruby&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby) represents content to be marked with ruby annotations, short runs of text\npresented alongside the text. This is often used in conjunction with East Asian\nlanguage where the annotations act as a guide for pronunciation, like the\nJapanese furigana.",
        "type": "List Html -> Html"
      },
      {
        "name": "rubyc",
        "comment": "",
        "type": "ClassString -> List Html -> Html"
      },
      {
        "name": "s'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "s_",
        "comment": "[&lt;s&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s) represents content that is no longer accurate or relevant.\n\n**Don't:**\n* [use &lt;s&gt; for indicating document edits, use &lt;del&gt; or &lt;ins&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s#Summary)",
        "type": "List Html -> Html"
      },
      {
        "name": "samp'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "samp_",
        "comment": "[&lt;samp&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp) represents the output of a program or a computer.",
        "type": "List Html -> Html"
      },
      {
        "name": "sampc",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "sc",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "section'",
        "comment": "[&lt;section&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section) defines a section in a document. Use sections to construct a document outline.\n\n**Do:**\n* [use &lt;section&gt;s to define document outlines](http://html5doctor.com/outlines/)\n* [...but use &lt;h*n*&gt;s carefully](http://www.paciellogroup.com/blog/2013/10/html5-document-outline/)\n\n**Don't:**\n* [use &lt;section&gt; as a wrapper for styling](http://html5doctor.com/avoiding-common-html5-mistakes/#section-wrapper)",
        "type": "IdString -> List Html -> Html"
      },
      {
        "name": "sectionc",
        "comment": "",
        "type": "ClassString -> IdString -> List Html -> Html"
      },
      {
        "name": "small'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "small_",
        "comment": "[&lt;small&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small) represents a side comment , that is, text like a disclaimer or a\ncopyright, which is not essential to the comprehension of the document.\n\n**Don't:**\n  * [use small for pure styling](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small#Summary)\n\n**Do:**\n  * [use small for side-comments and small print, including copyright and legal text](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small#Summary)",
        "type": "List Html -> Html"
      },
      {
        "name": "smallc",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "span_",
        "comment": "[&lt;span&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span) represents text with no specific meaning. This has to be used when no other\ntext-semantic element conveys an adequate meaning, which, in this case, is\noften brought by global attributes like class', lang, or dir.",
        "type": "List Html -> Html"
      },
      {
        "name": "spanc",
        "comment": "",
        "type": "ClassString -> List Html -> Html"
      },
      {
        "name": "strong'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "strong_",
        "comment": "[&lt;strong&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong) represents especially important text.",
        "type": "List Html -> Html"
      },
      {
        "name": "strongc",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "sub'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "sub_",
        "comment": "[&lt;sub&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub) represent a subscript.",
        "type": "List Html -> Html"
      },
      {
        "name": "subc",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "sup'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "sup_",
        "comment": "[&lt;sup&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup) represent a superscript.",
        "type": "List Html -> Html"
      },
      {
        "name": "supc",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "table_",
        "comment": "[&lt;canvas&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas) represents a bitmap area for graphics rendering.\n\nNo defaults provided since you're probably best off using Elm's `Graphics`!",
        "type": "List Html -> Html"
      },
      {
        "name": "tablec",
        "comment": "",
        "type": "ClassString -> List Html -> Html"
      },
      {
        "name": "tbody_",
        "comment": "[&lt;tbody&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody) represents the block of rows that describes the concrete data of a table.",
        "type": "List Html -> Html"
      },
      {
        "name": "tbodyc",
        "comment": "",
        "type": "ClassString -> List Html -> Html"
      },
      {
        "name": "td'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "td_",
        "comment": "[&lt;td&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td) represents a data cell in a table.",
        "type": "List Html -> Html"
      },
      {
        "name": "tdc",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "tfoot_",
        "comment": "[&lt;tfoot&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot) represents the block of rows that describes the column summaries of a table.",
        "type": "List Html -> Html"
      },
      {
        "name": "tfootc",
        "comment": "",
        "type": "ClassString -> List Html -> Html"
      },
      {
        "name": "th'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "th_",
        "comment": "[&lt;th&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th) represents a header cell in a table.",
        "type": "List Html -> Html"
      },
      {
        "name": "thc",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "thead_",
        "comment": "[&lt;thead&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead) represents the block of rows that describes the column labels of a table.",
        "type": "List Html -> Html"
      },
      {
        "name": "theadc",
        "comment": "",
        "type": "ClassString -> List Html -> Html"
      },
      {
        "name": "time_",
        "comment": "[&lt;time&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time) represents a date and time value; the machine-readable equivalent can be\nrepresented in the datetime attribute.",
        "type": "List Html -> Html"
      },
      {
        "name": "tr_",
        "comment": "[&lt;tr&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr) represents a row of cells in a table.",
        "type": "List Html -> Html"
      },
      {
        "name": "trc",
        "comment": "",
        "type": "ClassString -> List Html -> Html"
      },
      {
        "name": "u'",
        "comment": "",
        "type": "TextString -> Html"
      },
      {
        "name": "u_",
        "comment": "[&lt;u&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u) represents a non-textual annoatation for which the conventional\npresentation is underlining, such labeling the text as being misspelt or\nlabeling a proper name in Chinese text.",
        "type": "List Html -> Html"
      },
      {
        "name": "uc",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "ul_",
        "comment": "[&lt;ul&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul) defines an unordered list of items.",
        "type": "List Html -> Html"
      },
      {
        "name": "ulc",
        "comment": "",
        "type": "ClassString -> List Html -> Html"
      },
      {
        "name": "var'",
        "comment": "[&lt;var&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/var) represents a variable. Specific cases where it should be used include an\nactual mathematical expression or programming context, an identifier\nrepresenting a constant, a symbol identifying a physical quantity, a function\nparameter, or a mere placeholder in prose.",
        "type": "TextString -> Html"
      },
      {
        "name": "varc",
        "comment": "",
        "type": "ClassString -> TextString -> Html"
      },
      {
        "name": "video'",
        "comment": "[&lt;video&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video) represents a video, the associated audio and captions, and controls.\n\nDoesn't allow for &lt;track&gt;s &lt;source&gt;s, please use `video` for that.",
        "type": "UrlString -> Html"
      },
      {
        "name": "videoc",
        "comment": "",
        "type": "ClassString -> UrlString -> Html"
      },
      {
        "name": "wbr'",
        "comment": "[&lt;wbr&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr) represents a line break opportunity , that is a suggested point for\nwrapping text in order to improve readability of text split on several lines.",
        "type": "Html"
      }
    ],
    "generated-with-elm-version": "old"
  },
  {
    "name": "Html.Shorthand.Event",
    "comment": "Shorthands for common Html events\n\n# Events\n@docs targetValueFloat, targetValueInt\n@docs onEnter",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "onEnter",
        "comment": "Fires off the message when the `Enter` key is pressed (on keydown).",
        "type": "Json.Decoder a -> (a -> Signal.Message) -> Attribute"
      },
      {
        "name": "targetValueFloat",
        "comment": "Floating-point target value",
        "type": "Json.Decoder Float"
      },
      {
        "name": "targetValueInt",
        "comment": "Integer target value",
        "type": "Json.Decoder Int"
      }
    ],
    "generated-with-elm-version": "old"
  },
  {
    "name": "Html.Shorthand.Type",
    "comment": "Types used by the shorthand. All of these types are re-exported by `Html.Shorthand` so this module is only useful if\nyou aren't already importing Html.Shorthand.\n\n@docs IdString, ClassString, UrlString, TextString\n@docs FieldUpdate",
    "aliases": [
      {
        "name": "FieldUpdate",
        "comment": "",
        "args": [
          "a"
        ],
        "type": "{ continuous : Maybe (a -> Signal.Message) , onEnter : Maybe (a -> Signal.Message) }"
      },
      {
        "name": "TextString",
        "comment": "",
        "args": [],
        "type": "String"
      },
      {
        "name": "UrlString",
        "comment": "",
        "args": [],
        "type": "String"
      },
      {
        "name": "ClassString",
        "comment": "",
        "args": [],
        "type": "String"
      },
      {
        "name": "IdString",
        "comment": "",
        "args": [],
        "type": "String"
      }
    ],
    "types": [],
    "values": [],
    "generated-with-elm-version": "old"
  }
]