[
  {
    "name": "Maybe.Extra",
    "comment": "Convenience functions for Maybe.\n\n@docs (?), join, isNothing, isJust, or",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "?",
        "comment": "Flipped, infix version of `withDefault`.\n\n    head [] ? 0 == 0",
        "type": "Maybe.Maybe a -> a -> a"
      },
      {
        "name": "isJust",
        "comment": "Conveniently check if a `Maybe` matches `Just _`.\n\n    isJust (Just 42) == True\n    isJust (Just []) == True\n    isJust Nothing   == False",
        "type": "Maybe.Maybe a -> Bool"
      },
      {
        "name": "isNothing",
        "comment": "Conveniently check if a `Maybe` matches `Nothing`.\n\n    isNothing (Just 42) == False\n    isNothing (Just []) == False\n    isNothing Nothing   == True",
        "type": "Maybe.Maybe a -> Bool"
      },
      {
        "name": "join",
        "comment": "Flattens nested Maybes\n\n    join (Just (Just 1)) == Just 1\n    join (Just Nothing)  == Nothing\n    join Nothing         == Nothing",
        "type": "Maybe.Maybe (Maybe.Maybe a) -> Maybe.Maybe a"
      },
      {
        "name": "or",
        "comment": "\n  Like the boolean '||' this will return the first value that is positive ('Just').\n\n    Just 4 `or` Just 5    == Just 4\n    Just 4 `or` Nothing   == Just 4\n    Nothing `or` Just 5   == Just 5\n    Nothing `or` Nothing  == Nothing\n\n  This function sort of works like 'oneOf' but on single 'Maybe's.\n\n  Advanced functional programmers will recognize this as the implementation of 'mplus' for Maybes from the 'MonadPlus' Typeclass.",
        "type": "Maybe.Maybe a -> Maybe.Maybe a -> Maybe.Maybe a"
      }
    ],
    "generated-with-elm-version": "0.15.1"
  }
]