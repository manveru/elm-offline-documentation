[
  {
    "name": "ComponentList",
    "comment": " This library implements a generic list component, that, given a component type, creates a list of it\nIt can be used everywhere in your interface where there are list of elements with\nwhich the user can interact.\n\nThe generated html will have this form:\n\n    <div class=\"ComponentList\">\n      <ul>\n        <li class=\"Component\">\n          {{YOUR COMPONENT}}\n          <div class=\"ComponentListActions\">\n            <button>{{Your deleteModelTxt}}</button>\n            <button>{{Your newModelTxt}}</button>\n          </div>\n        </li>\n      </ul>\n      <button class=\"newComponent\">{{Your newModelTxt}}</button>\n    </div>\n\n\n# Model\n@docs init, getModels, setModels, Model\n\n# View\n@docs ViewParams, view\n\n# Update\n@docs Msg, update\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Represents a model.",
        "args": [
          "componentModel"
        ],
        "type": "{ models : List ( ComponentList.ID, componentModel ) , nextID : ComponentList.ID , defaultModel : componentModel }"
      },
      {
        "name": "ViewParams",
        "comment": " Represents the text to display in the GUI view\n    * *newModelTxt* : text to display in the \"+\" button\n    * *deleteModelTxt* : text to display in the \"-\" button\n",
        "args": [],
        "type": "{ newModelTxt : String, deleteModelTxt : String }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Represents a model update message",
        "args": [
          "componentMsg"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "getModels",
        "comment": "Get the the models of the elements of a `ComponentList` ",
        "type": "ComponentList.Model a -> List a"
      },
      {
        "name": "init",
        "comment": " Create a new model representing a list of elements of the given model\n\n    -- EXAMPLE\n    -- simple component that prints a hello button\n    cModel = \"Hello\"\n    cUpdate v _ = v\n    cView cmodel = input [onInput identity, value cmodel] []\n    -- Create a list of text inputs\n    main =\n      App.beginnerProgram {\n        model =\n          init \"New hello\" \"Delete this hello\" cModel,\n        view = view cView,\n        update = update cUpdate\n      }\n",
        "type": "a -> ComponentList.Model a"
      },
      {
        "name": "setModels",
        "comment": "Set the the models of the elements of a `ComponentList` ",
        "type": "List a -> ComponentList.Model a -> ComponentList.Model a"
      },
      {
        "name": "update",
        "comment": " Given the component update function, returns a `ComponentList` update function\n    update Counter.update\n",
        "type": "(compMsg -> compModel -> compModel) -> ComponentList.Msg compMsg -> ComponentList.Model compModel -> ComponentList.Model compModel"
      },
      {
        "name": "view",
        "comment": " Given a component view function, return a ComponentList view function",
        "type": "ComponentList.ViewParams -> (compModel -> Html.Html compMsg) -> ComponentList.Model compModel -> Html.Html (ComponentList.Msg compMsg)"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  }
]