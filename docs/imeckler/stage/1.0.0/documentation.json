[
  {
    "name": "Stage",
    "comment": "A type and functions on it for building up values as a function of time.\n\n# Formation\n@docs Stage, ForATime, Forever\n\n# Introduction\n@docs forever, for, stayFor, stayForever\n\n# Transformation\n@docs dilate, cycle, map\n\n# Composition\n@docs followedBy, chainTo\n\n# Elimination\n@docs run",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "chainTo",
        "comment": "Create a sequence of two stages, giving the second access to the\nfinal value of the first. For example,\n\n    pos = for (3 * second) (\\t -> t * (100 / 1*second))\n          `chainTo` \\finalPos -> for (1*second) (\\t -> finalPos - t * (finalPos / 1*second))\n\nConsider using the synonym `(+>)` from `Stage.Infix`.",
        "type": "Stage ForATime a -> (a -> Stage t a) -> Stage t a"
      },
      {
        "name": "cycle",
        "comment": "Repeat the given `Stage` forever.",
        "type": "Stage ForATime a -> Stage Forever a"
      },
      {
        "name": "dilate",
        "comment": "Speed up or slow down time by the given factor. E.g.,\n\n    dilate 0.5 s\n\nis a `Stage` which lasts twice as long as `s` and proceeds half\nas fast",
        "type": "Float -> Stage t a -> Stage t a"
      },
      {
        "name": "followedBy",
        "comment": "Sequence two stages. Thinking of stages as functions of\ntime, s1 `followedBy` s2 is a piecewise function which acts like\n`s1` for the duration of s1 and afterwards acts like `s2` (shifted\nby the duration of `s1`). For example, we could write\n\n    for (3 * second) (\\_ -> \"hi\") `followedBy` for (1 * second) (\\_ -> \"bye\")\n\nwhich corresponds to a function of time which is `\"hi\"` for times in\nthe interval `[0, 3]` and `\"bye\"` in the interval `(3, 4]`. Consider \nusing the synonym `(<>)` from `Stage.Infix`.",
        "type": "Stage ForATime a -> Stage t a -> Stage t a"
      },
      {
        "name": "for",
        "comment": "Create a `Stage` which runs for the specified duration",
        "type": "Time -> (Time -> a) -> Stage ForATime a"
      },
      {
        "name": "forever",
        "comment": "Create a total `Stage`, defined on all times.",
        "type": "(Time -> a) -> Stage Forever a"
      },
      {
        "name": "map",
        "comment": "",
        "type": "(a -> b) -> Stage t a -> Stage t b"
      },
      {
        "name": "run",
        "comment": "Convert a Signal of `Stage`s into a `Signal` by sampling using the given\n`Signal Time`.",
        "type": "Signal (Stage Forever a) -> Signal Time -> Signal a"
      },
      {
        "name": "stayFor",
        "comment": "A constant `Stage`.\n\n    stayFor dur x = for dur (\\_ -> x)",
        "type": "Time -> a -> Stage ForATime a"
      },
      {
        "name": "stayForever",
        "comment": "An eternally constant `Stage` \n\n    stayForever x = forever (\\_ -> x)",
        "type": "a -> Stage Forever a"
      }
    ],
    "generated-with-elm-version": "old"
  },
  {
    "name": "Stage.Infix",
    "comment": "Infix synonyms. \n# Operators\n@docs (<>), (+>)",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "+>",
        "comment": "(+>) = Stage.chainTo",
        "type": "Stage ForATime a -> (a -> Stage t a) -> Stage t a",
        "associativity": "left",
        "precedence": 9
      },
      {
        "name": "<>",
        "comment": "(<>) = Stage.followedBy",
        "type": "Stage ForATime a -> Stage t a -> Stage t a",
        "associativity": "left",
        "precedence": 9
      }
    ],
    "generated-with-elm-version": "old"
  }
]