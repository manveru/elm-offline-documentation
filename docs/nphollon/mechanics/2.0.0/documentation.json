[{"name":"TimeEvolution","comment":" Evolve a system continuously through time. This module does not know any\nphysics. You provide it the physical laws, and it updates your state for you.\n\n`evolve` uses the [Runge-Kutta method](https://en.wikipedia.org/wiki/Runge-Kutta_methods),\nwhich is much more accurate than the simpler\n[Euler method](https://en.wikipedia.org/wiki/Euler_method).\n\n@docs Laws, evolve\n","aliases":[{"name":"Laws","comment":" Laws describes the behavior of the system.\n\nThe model contains all of the data that needs to be updated. The values will\nchange continuously over time, so this should be a collection of `Float`s.\nFor example, the model might include things like position and velocity. \n\n* add: Add the corresponding elements of one model to another\n* scale: Multiply all the elements of a model by a factor\n* force: Given a model, return the time derivative of the model\n\nNote that `force` is not the same as the update function you normally pass to\n`Signal.foldp`. It does not return an updated model, it returns a derivative.\n\n    type alias State = { position : Float, momentum : Float }\n\n    mass = 0.5\n    gravity = 9.81\n\n    laws =\n      { add a b = \n          { position = a.position + b.position\n          , momentum = a.momentum + b.momentum\n          }\n      , scale f state =\n          { position = f * state.position\n          , momentum = f * state.momentum\n          }\n      , force env state =\n          { position = state.momentum / mass -- Change in position\n          , momentum = gravity -- Change in momentum\n          }\n","args":["model"],"type":"{ add : model -> model -> model , scale : Float -> model -> model , force : model -> model }"}],"types":[],"values":[{"name":"evolve","comment":" Given a set of laws, a time delta, and an initial state, compute the state\nat the new time. This is suitable as the update function for a `Signal.foldp`\n\n    initialState = { position = 0, momentum = 1 }\n\n    system = Signal.foldp (evolve laws) initialState (Time.fps 60)\n","type":"TimeEvolution.Laws a -> Time.Time -> a -> a"}],"generated-with-elm-version":"0.16.0"}]