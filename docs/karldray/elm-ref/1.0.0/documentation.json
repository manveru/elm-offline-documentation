[
  {
    "name": "Ref",
    "comment": "A `Ref` represents a \"mutable\" piece of data that might exist inside a larger data structure.\nIt exposes the current value of that data and encapsulates the information needed to update it.\n\nRefs can simplify building modular UI components that know how to update themselves.\nA typical module might look like this:\n\n```elm\ntype alias Model =\n    { foo: String\n    , widget: Widget.Model,\n    , bloops: Array Bloop.Model\n    }\n\n-- a model-updating function\nchangeFoo : String -> Model -> Model\nchangeFoo x model = {model | foo <- x}\n\n\n-- create Focus objects that represent fields of our Model type.\nwidgetFocus = Ref.focus .widget (\\x m -> {m | widget <- x})\nbloopsFocus = Ref.focus .bloops (\\x m -> {m | bloops <- x})\n\n\nview : Ref Model -> Html\nview model =\n    let\n        -- create Refs to fields of our model record\n        widget = Ref.map widgetFocus model\n        bloops = Ref.map bloopsFocus model\n    in\n        div [] [\n            -- model.value is our Model\n            text model.value.foo,\n\n            -- on click, perform an update\n            (button [onClick (transform model) (changeFoo \"Hello\")] [text \"Hi\"]),\n\n            -- pass a nested component's model \"by reference\" to its module's view function \n            Widget.view widget,\n\n            -- map over an array, passing elements \"by reference\" to a view function\n            span [] (Array.Ref.map Bloop.view bloops)\n        ]\n\n\nmain : Signal Html\nmain = Signal.map view (Ref.signal initialModel)\n\n```\n\n## Full examples\n\nRef-based versions of Counter, CounterPair, and CounterList\nin the style of the Elm Architecture tutorial are\n[here](https://github.com/karldray/elm-ref/tree/master/examples).\n\n## Note on model-view separation\n\nIn this pattern, an Action type (as described in\n[the Elm Architecture](https://github.com/evancz/elm-architecture-tutorial#the-elm-architecture))\nis not part of a typical module's public API.\nHowever, it's still good practice to keep model-manipulating code separate from view logic,\nand you can still use an Action type to help with this.\nJust partially-apply your update function when constructing event handlers:\n\n```elm\nonClick (transform model) (update MyAction)\n```\n\nIn fact, using Actions is easier in a Ref-based module because\nyou don't need to thread nested components' actions through your own Action/update code!\n\n\n# Creating Refs\n@docs Focus, focus, map\n\n# Array.Ref and Dict.Ref\nThese modules help you:\n- Create Refs that point to elements inside collections\n- Map over collections, passing elements \"by reference\" to a function\n\n# Address builders for use in Html.Events attributes\n@docs transform, set\n\n# Creating top-level Refs\n@docs signal, fromMailbox",
    "aliases": [
      {
        "name": "Focus",
        "comment": "A Focus describes how to get and set a value of one type inside a value of another type.\nThe `get` function takes a \"big\" value and returns the \"small\" value inside it.\nThe `set` function takes a new \"small\" value and an old \"big\" value\nand returns an updated \"big\" value.",
        "args": [
          "t",
          "u"
        ],
        "type": "{ get : t -> u, set : u -> t -> t }"
      },
      {
        "name": "Ref",
        "comment": "",
        "args": [
          "t"
        ],
        "type": "{ value : t, address : Address t }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "focus",
        "comment": "Create a focus from `get` and `set` functions.",
        "type": "(t -> u) -> (u -> t -> t) -> Focus t u"
      },
      {
        "name": "fromMailbox",
        "comment": "Create a Ref that refers to the value in a Mailbox.",
        "type": "Mailbox t -> Signal (Ref t)"
      },
      {
        "name": "map",
        "comment": "Apply a Focus to a Ref.",
        "type": "Focus t u -> Ref t -> Ref u"
      },
      {
        "name": "set",
        "comment": "Create an Address that replaces the referenced value with whatever you send it.",
        "type": "Ref t -> Address t"
      },
      {
        "name": "signal",
        "comment": "Create a new mutable object with the given initial value.",
        "type": "t -> Signal (Ref t)"
      },
      {
        "name": "transform",
        "comment": "Create an Address that updates the referenced value by applying functions to it.",
        "type": "Ref t -> Address (t -> t)"
      }
    ],
    "generated-with-elm-version": "old"
  },
  {
    "name": "Array.Ref",
    "comment": "Tools for dealing with `Ref Array` values.\nThese functions are analagous to the corresponding ones from the Array module.\n\nSee\n[CounterList.elm](https://github.com/karldray/elm-ref/blob/master/examples/CounterList.elm)\nfor example usage.\n\n@docs get, map, indexedMap",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "get",
        "comment": "Refer to the element at a given index in an array.",
        "type": "Int -> Ref (Array t) -> Maybe (Ref t)"
      },
      {
        "name": "indexedMap",
        "comment": "Like `map`, but also passes element indexes to the provided function.",
        "type": "(Int -> Ref t -> u) -> Ref (Array t) -> Array u"
      },
      {
        "name": "map",
        "comment": "Map over an array, passing elements \"by reference\" to the provided function.",
        "type": "(Ref t -> u) -> Ref (Array t) -> Array u"
      }
    ],
    "generated-with-elm-version": "old"
  }
]