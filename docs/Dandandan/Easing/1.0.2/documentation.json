[{"name":"Easing","comment":"Library for working creating transitions with easing functions. Easing functions interpolate a value over time. This can be a value of any type, including numbers, points and colors.\n\nYou can find graphical examples of easing functions on [easings.net](http://easings.net/ \"Easings\").\n\n    sampleAnimation : Time -> Float\n    sampleAnimation = ease easeInCubic float 0 10 second\n\n    {- Transition from blue to red -}\n    customAnimation : Time -> Color\n    customAnimation = ease (\\x -> x ^ 2.4) color blue red second\n\n    {- Animate between 0 and 5 with the easeInOutQuad Easing -}\n    animation1 : Time -> Float\n    animation1 = ease easeInOutQuad number 0 5 second\n\n    {- Create your own Interpolation functions -}\n    vec : Interpolation Vec3\n    vec from to v = from `add` ((to `sub` from) `scale` v)\n\n    {- Use your Easing and Interpolation functions -}\n    3dmovement : Time -> Vec3\n    3dmovement = ease easeInQuad vec (vec3 0 0 0) (vec3 10 10 10) (3 * second)\n\n    {- Manipulate your easing functions and animations -}\n    elasticMovement : Time -> Vec3\n    elasticMovement =\n        let animation = ease (retour easeOutElastic) vec (vec3 0 0 0) (vec3 10 10 10)\n        in  cycle animation (3 * second)\n\n# Easing\n@docs ease\n\n# Interpolation and Animation\n@docs Interpolation, Animation\n\n# Interpolation functions\n@docs float, point2d, point3d, color, pair\n\n#Easing function manipulation\n@docs cycle, invert, retour, inOut, flip\n\n# Easing functions\n@docs Easing,\n      bezier,\n      linear,\n      easeInQuad, easeOutQuad, easeInOutQuad,\n      easeInCubic, easeOutCubic, easeInOutCubic,\n      easeInQuart, easeOutQuart, easeInOutQuart,\n      easeInQuint, easeOutQuint, easeInOutQuint,\n      easeInSine, easeOutSine, easeInOutSine,\n      easeInExpo, easeOutExpo, easeInOutExpo,\n      easeInCirc, easeOutCirc, easeInOutCirc,\n      easeInBack, easeOutBack, easeInOutBack,\n      easeInBounce, easeOutBounce, easeInOutBounce,\n      easeInElastic, easeOutElastic, easeInOutElastic","aliases":[{"name":"Animation","comment":"An `Animation` is a function that returns a value given a duration and the current time.","args":["a"],"type":"Time -> Time -> a"},{"name":"Interpolation","comment":"An interpolation of two values using a Float value.\n\n    float : Interpolation Float\n    float from to v = from + (from - to) * v","args":["a"],"type":"a -> a -> Float -> a"},{"name":"Easing","comment":"Type alias for Easing functions.","args":[],"type":"Float -> Float"}],"types":[],"values":[{"name":"bezier","comment":"A cubic bezier function using 4 parameters: x and y position of first control point, and x and y position of second control point.\n\nGo to [here](http://greweb.me/glsl-transition/example/ \"glsl-transitions\") for examples or [here](http://cubic-bezier.com/ \"tester\") to test.","type":"Float -> Float -> Float -> Float -> Easing"},{"name":"color","comment":"Interpolation of two colors","type":"Interpolation Color"},{"name":"cycle","comment":"Repeats an `Animation` infinitely\n\n    rotate : Time -> Float\n    rotate = cycle (ease linear float 0 360) second","type":"Animation a -> Animation a"},{"name":"ease","comment":"Ease a value.\n      Parameters are: an easing function, an interpolation function, a `from` value, a `to` value, the duration of the transition and the current (normalized) time.\n\n      ease linear float 0 20 second     0      == 0\n      ease linear float 0 20 second     second == 20\n      ease linear color  blue red second second == red\n      ease easeInOutQuad point2d {x=0,y=0} {x=1,y=1} second second == {x=1,y=1}","type":"Easing -> Interpolation a -> a -> a -> Time -> Time -> a"},{"name":"easeInBack","comment":"","type":"Easing"},{"name":"easeInBounce","comment":"","type":"Easing"},{"name":"easeInCirc","comment":"","type":"Easing"},{"name":"easeInCubic","comment":"","type":"Easing"},{"name":"easeInElastic","comment":"","type":"Easing"},{"name":"easeInExpo","comment":"","type":"Easing"},{"name":"easeInOutBack","comment":"","type":"Easing"},{"name":"easeInOutBounce","comment":"","type":"Easing"},{"name":"easeInOutCirc","comment":"","type":"Easing"},{"name":"easeInOutCubic","comment":"","type":"Easing"},{"name":"easeInOutElastic","comment":"","type":"Easing"},{"name":"easeInOutExpo","comment":"","type":"Easing"},{"name":"easeInOutQuad","comment":"","type":"Easing"},{"name":"easeInOutQuart","comment":"","type":"Easing"},{"name":"easeInOutQuint","comment":"","type":"Easing"},{"name":"easeInOutSine","comment":"","type":"Easing"},{"name":"easeInQuad","comment":"","type":"Easing"},{"name":"easeInQuart","comment":"","type":"Easing"},{"name":"easeInQuint","comment":"","type":"Easing"},{"name":"easeInSine","comment":"","type":"Easing"},{"name":"easeOutBack","comment":"","type":"Easing"},{"name":"easeOutBounce","comment":"","type":"Easing"},{"name":"easeOutCirc","comment":"","type":"Easing"},{"name":"easeOutCubic","comment":"","type":"Easing"},{"name":"easeOutElastic","comment":"","type":"Easing"},{"name":"easeOutExpo","comment":"","type":"Easing"},{"name":"easeOutQuad","comment":"","type":"Easing"},{"name":"easeOutQuart","comment":"","type":"Easing"},{"name":"easeOutQuint","comment":"","type":"Easing"},{"name":"easeOutSine","comment":"","type":"Easing"},{"name":"flip","comment":"Flips an `Easing` function. A transition that looks like /, now looks like \\\\.","type":"Easing -> Easing"},{"name":"float","comment":"Interpolation of two Floats","type":"Interpolation Float"},{"name":"inOut","comment":"Makes an Easing function using two `Easing` functions. The first half the first `Easing` function is used, the other half the second.","type":"Easing -> Easing -> Easing"},{"name":"invert","comment":"Inverts an `Easing` function. A transition that starts fast and continues slow now starts slow and continues fast.","type":"Easing -> Easing"},{"name":"linear","comment":"","type":"Easing"},{"name":"pair","comment":"Interpolation of a pair","type":"Interpolation a -> Interpolation ( a, a )"},{"name":"point2d","comment":"Interpolation of two points in 2D","type":"Interpolation { x : Float, y : Float }"},{"name":"point3d","comment":"Interpolation of two points in 3D","type":"Interpolation { x : Float, y : Float, z : Float }"},{"name":"retour","comment":"Makes an `Easing` function go to the end first and then back to the start. A transition that looks like /, now looks like /\\\\.","type":"Easing -> Easing"}],"generated-with-elm-version":"old"}]