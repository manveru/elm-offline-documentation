[{"name":"Parser","comment":"A simple parser combinator library.\n\n#Running the parser\n@docs parse, parseString, parser\n\n#Core functions\n@docs map, or, and, andThen\n\n#Combinators\n@docs succeed, satisfy, empty, symbol, token, choice, optional, many, some, seperatedBy, end\n\n#Writing recursive grammars\n@docs recursively\n\n#Core functions (infix operators)\n@docs (<*>), (<$>), (<|>), (<*), (*>), (<$)","aliases":[],"types":[{"name":"Parser","comment":"","args":["a","r"],"cases":[["Direct",["List a -> List ( r, List a )"]],["Delayed",["Lazy (List a -> List ( r, List a ))"]]]}],"values":[{"name":"*>","comment":"Variant of `<*>` that ignores the result of the parser at the left","type":"Parser a s -> Parser a r -> Parser a r","associativity":"left","precedence":4},{"name":"<$","comment":"Variant of `<$>` that ignores the result of the parser","type":"r -> Parser a b -> Parser a r","associativity":"left","precedence":4},{"name":"<$>","comment":"Map a function over the result of the parser","type":"(r -> s) -> Parser a r -> Parser a s","associativity":"left","precedence":4},{"name":"<*","comment":"Variant of `<*>` that ignores the result of the parser at the right","type":"Parser a r -> Parser a s -> Parser a r","associativity":"left","precedence":4},{"name":"<*>","comment":"Sequence two parsers","type":"Parser a (r -> s) -> Parser a r -> Parser a s","associativity":"left","precedence":4},{"name":"<|>","comment":"Choice between two parsers","type":"Parser a r -> Parser a r -> Parser a r","associativity":"right","precedence":3},{"name":"and","comment":"Sequence two parsers\n\n    data Date = Date Int Int Int\n    date = Date `map` year `and` month `and` day","type":"Parser a (r -> s) -> Parser a r -> Parser a s","associativity":"left","precedence":4},{"name":"andThen","comment":"Sequence two parsers, but pass the result of the first parser to the second parser.\n    This is useful for creating context sensitive parsers like XML.","type":"Parser s a -> (a -> Parser s b) -> Parser s b"},{"name":"choice","comment":"Combine a list of parsers","type":"List (Parser a r) -> Parser a r"},{"name":"empty","comment":"Parser that always fails","type":"Parser a r"},{"name":"end","comment":"Succeeds when input is empty","type":"Parser a ()"},{"name":"funP","comment":"","type":"Parser a r -> List a -> List ( r, List a )"},{"name":"many","comment":"Parses zero or more occurences of a parser","type":"Parser a r -> Parser a (List r)"},{"name":"map","comment":"Map a function over the result of the parser\n\n      count = length `map` many digit","type":"(r -> s) -> Parser a r -> Parser a s","associativity":"left","precedence":4},{"name":"optional","comment":"Parses an optional element","type":"Parser a r -> r -> Parser a r"},{"name":"or","comment":"Choice between two parsers\n\n      oneOrTwo = symbol '1' `or` symbol '2'","type":"Parser a r -> Parser a r -> Parser a r","associativity":"right","precedence":3},{"name":"parse","comment":"Parse a list using a parser, return list of results","type":"Parser a r -> List a -> Result String (List r)"},{"name":"parseString","comment":"Parse a `String` using a `Char` parser","type":"Parser Char r -> String -> Result String (List r)"},{"name":"parser","comment":"The parser record makes things look nicer when using command syntax","type":"{ andThen : Parser s a -> (a -> Parser s b) -> Parser s b }"},{"name":"recursively","comment":"For realizing otherwise inexpressible recursive grammars. For\nexample, while\n\n    bbbba = (symbol 'a') `or` (symbol 'b' *> bbbba)\n\nwill fail at runtime with a non-termination issue, the replacement\n\n    bbbba = (symbol 'a') `or` (symbol 'b' *> recursively (\\() -> bbbba))\n\nis safe.","type":"(() -> Parser a r) -> Parser a r"},{"name":"satisfy","comment":"Parser that satisfies a given predicate","type":"(a -> Bool) -> Parser a a"},{"name":"separatedBy","comment":"Parses a sequence of the first parser, separated by the second parser","type":"Parser a r -> Parser a s -> Parser a (List r)"},{"name":"some","comment":"Parses one or more occurences of a parser","type":"Parser a r -> Parser a (List r)"},{"name":"succeed","comment":"Parser that always succeeds without consuming input","type":"r -> Parser a r"},{"name":"symbol","comment":"Parses a symbol","type":"a -> Parser a a"},{"name":"token","comment":"Parses a token of symbols","type":"List a -> Parser a (List a)"}],"generated-with-elm-version":"old"},{"name":"Parser.Char","comment":"Some parsers\n\n@docs digit, natural, integer, float, parenthesized, bracketed, braced","aliases":[],"types":[],"values":[{"name":"braced","comment":"Parses a parser between braces `{` and `}`","type":"Parser Char r -> Parser Char r"},{"name":"bracketed","comment":"Parses a parser between brackets `[` and `]`","type":"Parser Char r -> Parser Char r"},{"name":"digit","comment":"Parse a digit","type":"Parser Char Int"},{"name":"float","comment":"Parse a float","type":"Parser Char Float"},{"name":"integer","comment":"Parse an integer","type":"Parser Char Int"},{"name":"lower","comment":"Parse a lower case character","type":"Parser Char Char"},{"name":"natural","comment":"Parse a natural number","type":"Parser Char Int"},{"name":"parenthesized","comment":"Parse a parser between parentheses `(` and `)`","type":"Parser Char r -> Parser Char r"},{"name":"upper","comment":"Parse a upper case character","type":"Parser Char Char"}],"generated-with-elm-version":"old"}]