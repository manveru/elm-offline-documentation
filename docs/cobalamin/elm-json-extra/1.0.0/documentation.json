[
  {
    "name": "Json.Decode.Extra",
    "comment": " This library provides functions for use cases of Json.Decode/Json.Encode that are non-obvious to implement with the primitives these modules expose.\n\n# Lists of Decoders\n@docs sequence\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "sequence",
        "comment": " This function turns a list of decoders into a decoder that returns a list.\n\nThe returned decoder will zip the list of decoders with a list of values, matching each decoder with exactly one value at the same position. This is most often useful in cases where `Json.Decode.oneOf`, which will try every decoder for every value in the list, would be too lenient.\n\nNote that this function, unlike `List.map2`'s behaviour, expects the list of decoders to have the same length as the list of values in the JSON.\n\n    type FloatOrInt\n        = I Int\n        | F Float\n\n    -- we'd like a list like [I, F, I] from this\n    -- fairly contrived example, but data like this does exist!\n    json = \"[1, 2.0, 3]\"\n\n    intDecoder = Decode.map I Decode.int\n    floatDecoder = Decode.map F Decode.float\n\n    decoder : Decoder (List FloatOrInt)\n    decoder =\n        sequence [ intDecoder, floatDecoder, intDecoder ]\n\n    decoded = Decode.decodeString decoder json\n    -- Ok ([I 1,F 2,I 3]) : Result String (List FloatOrInt)\n\n",
        "type": "List (Json.Decode.Decoder a) -> Json.Decode.Decoder (List a)"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  }
]